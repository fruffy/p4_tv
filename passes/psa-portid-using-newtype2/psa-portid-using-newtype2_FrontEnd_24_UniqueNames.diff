--- before_pass
+++ after_pass
@@ -156,7 +156,7 @@ control PacketIoEgress(inout parsed_head
     }
 }
 control Filtering(inout parsed_headers_t hdr, inout fabric_metadata_t fabric_metadata, inout standard_metadata_t standard_metadata) {
-    table t {
+    @name("t") table t_0 {
         key = {
             standard_metadata.ingress_port: exact @name("standard_metadata.ingress_port") ;
         }
@@ -168,45 +168,45 @@ control Filtering(inout parsed_headers_t
         default_action = NoAction();
     }
     apply {
-        t.apply();
+        t_0.apply();
     }
 }
 control Forwarding(inout parsed_headers_t hdr, inout fabric_metadata_t fabric_metadata, inout standard_metadata_t standard_metadata) {
-    action fwd(PortId_t next_port) {
+    @name("fwd") action fwd_0(PortId_t next_port) {
         standard_metadata.egress_spec = next_port;
     }
-    table t {
+    @name("t") table t_1 {
         key = {
             hdr.ipv4.dstAddr: exact @name("hdr.ipv4.dstAddr") ;
         }
         actions = {
             drop();
-            fwd();
+            fwd_0();
             @defaultonly NoAction();
         }
         default_action = NoAction();
     }
     apply {
-        t.apply();
+        t_1.apply();
         standard_metadata.egress_spec = (PortId_t)((PortIdUInt_t)standard_metadata.egress_spec + 9w1);
-        PortId_t mask = (PortId_t)9w0xf;
-        standard_metadata.egress_spec = (PortId_t)((PortIdUInt_t)standard_metadata.egress_spec & (PortIdUInt_t)mask);
+        PortId_t mask_0 = (PortId_t)9w0xf;
+        standard_metadata.egress_spec = (PortId_t)((PortIdUInt_t)standard_metadata.egress_spec & (PortIdUInt_t)mask_0);
     }
 }
 control FabricIngress(inout parsed_headers_t hdr, inout fabric_metadata_t fabric_metadata, inout standard_metadata_t standard_metadata) {
-    PacketIoIngress() packet_io_ingress;
-    Filtering() filtering;
-    Forwarding() forwarding;
+    @name("packet_io_ingress") PacketIoIngress() packet_io_ingress_0;
+    @name("filtering") Filtering() filtering_0;
+    @name("forwarding") Forwarding() forwarding_0;
     apply {
-        packet_io_ingress.apply(hdr, fabric_metadata, standard_metadata);
-        filtering.apply(hdr, fabric_metadata, standard_metadata);
-        forwarding.apply(hdr, fabric_metadata, standard_metadata);
+        packet_io_ingress_0.apply(hdr, fabric_metadata, standard_metadata);
+        filtering_0.apply(hdr, fabric_metadata, standard_metadata);
+        forwarding_0.apply(hdr, fabric_metadata, standard_metadata);
     }
 }
 control FabricEgress(inout parsed_headers_t hdr, inout fabric_metadata_t fabric_metadata, inout standard_metadata_t standard_metadata) {
-    PacketIoEgress() pkt_io_egress;
+    @name("pkt_io_egress") PacketIoEgress() pkt_io_egress_0;
     apply {
-        pkt_io_egress.apply(hdr, fabric_metadata, standard_metadata);
+        pkt_io_egress_0.apply(hdr, fabric_metadata, standard_metadata);
     }
 }
 control FabricDeparser(packet_out packet, in parsed_headers_t hdr) {
