--- before_pass
+++ after_pass
@@ -70,8 +70,6 @@ extern register<T> {
 extern action_profile {
     action_profile(bit<32> size);
 }
-extern void random<T>(out T result, in T lo, in T hi);
-extern void digest<T>(in bit<32> receiver, in T data);
 enum HashAlgorithm {
     crc32,
     crc32_custom,
@@ -83,27 +81,13 @@ enum HashAlgorithm {
     xor16
 }
 extern void mark_to_drop();
-extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);
 extern action_selector {
     action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
 }
-enum CloneType {
-    I2E,
-    E2E
-}
 @deprecated("Please use verify_checksum/update_checksum instead.") extern Checksum16 {
     Checksum16();
     bit<16> get<D>(in D data);
 }
-extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
-extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
-extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
-extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
-extern void resubmit<T>(in T data);
-extern void recirculate<T>(in T data);
-extern void clone(in CloneType type, in bit<32> session);
-extern void clone3<T>(in CloneType type, in bit<32> session, in T data);
-extern void truncate(in bit<32> length);
 parser Parser<H, M>(packet_in b, out H parsedHdr, inout M meta, inout standard_metadata_t standard_metadata);
 control VerifyChecksum<H, M>(inout H hdr, inout M meta);
 @pipeline control Ingress<H, M>(inout H hdr, inout M meta, inout standard_metadata_t standard_metadata);
@@ -204,7 +188,6 @@ control Forwarding(inout parsed_headers_
     }
     apply {
         t.apply();
-        bit<9> tmp2 = 9w1;
         standard_metadata.egress_spec = (PortId_t)((PortIdUInt_t)standard_metadata.egress_spec + 9w1);
         PortId_t mask = (PortId_t)9w0xf;
         standard_metadata.egress_spec = (PortId_t)((PortIdUInt_t)standard_metadata.egress_spec & (PortIdUInt_t)mask);
