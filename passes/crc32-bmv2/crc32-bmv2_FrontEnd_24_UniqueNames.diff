--- before_pass
+++ after_pass
@@ -44,68 +44,68 @@ control MyVerifyChecksum(inout headers h
     }
 }
 control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    action send_back(bit<32> result) {
-        bit<48> tmp;
+    @name("send_back") action send_back_0(bit<32> result) {
+        bit<48> tmp_0;
         hdr.p4calc.res = result;
-        tmp = hdr.ethernet.dstAddr;
+        tmp_0 = hdr.ethernet.dstAddr;
         hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
-        hdr.ethernet.srcAddr = tmp;
+        hdr.ethernet.srcAddr = tmp_0;
         standard_metadata.egress_spec = standard_metadata.ingress_port;
     }
-    action operation_add() {
-        send_back(hdr.p4calc.operand_a + hdr.p4calc.operand_b);
+    @name("operation_add") action operation_add_0() {
+        send_back_0(hdr.p4calc.operand_a + hdr.p4calc.operand_b);
     }
-    action operation_sub() {
-        send_back(hdr.p4calc.operand_a - hdr.p4calc.operand_b);
+    @name("operation_sub") action operation_sub_0() {
+        send_back_0(hdr.p4calc.operand_a - hdr.p4calc.operand_b);
     }
-    action operation_and() {
-        send_back(hdr.p4calc.operand_a & hdr.p4calc.operand_b);
+    @name("operation_and") action operation_and_0() {
+        send_back_0(hdr.p4calc.operand_a & hdr.p4calc.operand_b);
     }
-    action operation_or() {
-        send_back(hdr.p4calc.operand_a | hdr.p4calc.operand_b);
-    }
-    action operation_xor() {
-        send_back(hdr.p4calc.operand_a ^ hdr.p4calc.operand_b);
-    }
-    action operation_crc() {
-        bit<32> nbase = hdr.p4calc.operand_b;
-        bit<64> ncount = 64w8589934592;
-        bit<32> nselect;
-        bit<32> ninput = hdr.p4calc.operand_a;
-        hash<bit<32>, bit<32>, tuple<bit<32>>, bit<64>>(nselect, HashAlgorithm.crc32, nbase, { ninput }, ncount);
-        send_back(nselect);
+    @name("operation_or") action operation_or_0() {
+        send_back_0(hdr.p4calc.operand_a | hdr.p4calc.operand_b);
+    }
+    @name("operation_xor") action operation_xor_0() {
+        send_back_0(hdr.p4calc.operand_a ^ hdr.p4calc.operand_b);
+    }
+    @name("operation_crc") action operation_crc_0() {
+        bit<32> nbase_0 = hdr.p4calc.operand_b;
+        bit<64> ncount_0 = 64w8589934592;
+        bit<32> nselect_0;
+        bit<32> ninput_0 = hdr.p4calc.operand_a;
+        hash<bit<32>, bit<32>, tuple<bit<32>>, bit<64>>(nselect_0, HashAlgorithm.crc32, nbase_0, { ninput_0 }, ncount_0);
+        send_back_0(nselect_0);
     }
-    action operation_drop() {
+    @name("operation_drop") action operation_drop_0() {
         mark_to_drop(standard_metadata);
     }
-    table calculate {
+    @name("calculate") table calculate_0 {
         key = {
             hdr.p4calc.op: exact @name("hdr.p4calc.op") ;
         }
         actions = {
-            operation_add();
-            operation_sub();
-            operation_and();
-            operation_or();
-            operation_xor();
-            operation_crc();
-            operation_drop();
+            operation_add_0();
+            operation_sub_0();
+            operation_and_0();
+            operation_or_0();
+            operation_xor_0();
+            operation_crc_0();
+            operation_drop_0();
         }
-        const default_action = operation_drop();
+        const default_action = operation_drop_0();
         const entries = {
-                        8w0x2b : operation_add();
-                        8w0x2d : operation_sub();
-                        8w0x26 : operation_and();
-                        8w0x7c : operation_or();
-                        8w0x5e : operation_xor();
-                        8w0x3e : operation_crc();
+                        8w0x2b : operation_add_0();
+                        8w0x2d : operation_sub_0();
+                        8w0x26 : operation_and_0();
+                        8w0x7c : operation_or_0();
+                        8w0x5e : operation_xor_0();
+                        8w0x3e : operation_crc_0();
         }
     }
     apply {
         if (hdr.p4calc.isValid()) {
-            calculate.apply();
+            calculate_0.apply();
         } else {
-            operation_drop();
+            operation_drop_0();
         }
     }
 }
