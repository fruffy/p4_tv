--- before_pass
+++ after_pass
@@ -5,16 +5,16 @@ header ethernet_t {
     bit<48> srcAddr;
     bit<16> etherType;
 }
-const bit<16> P4CALC_ETYPE = 0x1234;
-const bit<8> P4CALC_P = 0x50;
-const bit<8> P4CALC_4 = 0x34;
-const bit<8> P4CALC_VER = 0x1;
-const bit<8> P4CALC_PLUS = 0x2b;
-const bit<8> P4CALC_MINUS = 0x2d;
-const bit<8> P4CALC_AND = 0x26;
-const bit<8> P4CALC_OR = 0x7c;
-const bit<8> P4CALC_CARET = 0x5e;
-const bit<8> P4CALC_CRC = 0x3e;
+const bit<16> P4CALC_ETYPE = 16w0x1234;
+const bit<8> P4CALC_P = 8w0x50;
+const bit<8> P4CALC_4 = 8w0x34;
+const bit<8> P4CALC_VER = 8w0x1;
+const bit<8> P4CALC_PLUS = 8w0x2b;
+const bit<8> P4CALC_MINUS = 8w0x2d;
+const bit<8> P4CALC_AND = 8w0x26;
+const bit<8> P4CALC_OR = 8w0x7c;
+const bit<8> P4CALC_CARET = 8w0x5e;
+const bit<8> P4CALC_CRC = 8w0x3e;
 header p4calc_t {
     bit<8>  p;
     bit<8>  four;
@@ -34,13 +34,13 @@ parser MyParser(packet_in packet, out he
     state start {
         packet.extract(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
-            P4CALC_ETYPE: check_p4calc;
+            16w0x1234: check_p4calc;
             default: accept;
         }
     }
     state check_p4calc {
         transition select((packet.lookahead<p4calc_t>()).p, (packet.lookahead<p4calc_t>()).four, (packet.lookahead<p4calc_t>()).ver) {
-            (P4CALC_P, P4CALC_4, P4CALC_VER): parse_p4calc;
+            (8w0x50, 8w0x34, 8w0x1): parse_p4calc;
             default: accept;
         }
     }
@@ -79,7 +79,7 @@ control MyIngress(inout headers hdr, ino
     }
     action operation_crc() {
         bit<32> nbase = hdr.p4calc.operand_b;
-        bit<64> ncount = 4294967296 * 2;
+        bit<64> ncount = 8589934592;
         bit<32> nselect;
         bit<32> ninput = hdr.p4calc.operand_a;
         hash(nselect, HashAlgorithm.crc32, nbase, { ninput }, ncount);
@@ -103,12 +103,12 @@ control MyIngress(inout headers hdr, ino
         }
         const default_action = operation_drop();
         const entries = {
-                        P4CALC_PLUS : operation_add();
-                        P4CALC_MINUS : operation_sub();
-                        P4CALC_AND : operation_and();
-                        P4CALC_OR : operation_or();
-                        P4CALC_CARET : operation_xor();
-                        P4CALC_CRC : operation_crc();
+                        8w0x2b : operation_add();
+                        8w0x2d : operation_sub();
+                        8w0x26 : operation_and();
+                        8w0x7c : operation_or();
+                        8w0x5e : operation_xor();
+                        8w0x3e : operation_crc();
         }
     }
     apply {
