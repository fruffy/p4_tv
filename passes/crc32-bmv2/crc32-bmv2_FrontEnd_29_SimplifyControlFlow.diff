--- before_pass
+++ after_pass
@@ -25,9 +25,7 @@ parser MyParser(packet_in packet, out he
     p4calc_t tmp_1;
     p4calc_t tmp_2;
     state start {
-        {
-            packet.extract<ethernet_t>(hdr.ethernet);
-        }
+        packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             16w0x1234: check_p4calc;
             default: accept;
@@ -43,9 +41,7 @@ parser MyParser(packet_in packet, out he
         }
     }
     state parse_p4calc {
-        {
-            packet.extract<p4calc_t>(hdr.p4calc);
-        }
+        packet.extract<p4calc_t>(hdr.p4calc);
         transition accept;
     }
 }
@@ -60,68 +56,36 @@ control MyIngress(inout headers hdr, ino
     bit<32> nselect_0;
     bit<32> ninput_0;
     @name("send_back") action send_back_0(bit<32> result) {
-        {
-            hdr.p4calc.res = result;
-        }
-        {
-            tmp_0 = hdr.ethernet.dstAddr;
-        }
-        {
-            hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
-        }
-        {
-            hdr.ethernet.srcAddr = tmp_0;
-        }
-        {
-            standard_metadata.egress_spec = standard_metadata.ingress_port;
-        }
+        hdr.p4calc.res = result;
+        tmp_0 = hdr.ethernet.dstAddr;
+        hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
+        hdr.ethernet.srcAddr = tmp_0;
+        standard_metadata.egress_spec = standard_metadata.ingress_port;
     }
     @name("operation_add") action operation_add_0() {
-        {
-            send_back_0(hdr.p4calc.operand_a + hdr.p4calc.operand_b);
-        }
+        send_back_0(hdr.p4calc.operand_a + hdr.p4calc.operand_b);
     }
     @name("operation_sub") action operation_sub_0() {
-        {
-            send_back_0(hdr.p4calc.operand_a - hdr.p4calc.operand_b);
-        }
+        send_back_0(hdr.p4calc.operand_a - hdr.p4calc.operand_b);
     }
     @name("operation_and") action operation_and_0() {
-        {
-            send_back_0(hdr.p4calc.operand_a & hdr.p4calc.operand_b);
-        }
+        send_back_0(hdr.p4calc.operand_a & hdr.p4calc.operand_b);
     }
     @name("operation_or") action operation_or_0() {
-        {
-            send_back_0(hdr.p4calc.operand_a | hdr.p4calc.operand_b);
-        }
+        send_back_0(hdr.p4calc.operand_a | hdr.p4calc.operand_b);
     }
     @name("operation_xor") action operation_xor_0() {
-        {
-            send_back_0(hdr.p4calc.operand_a ^ hdr.p4calc.operand_b);
-        }
+        send_back_0(hdr.p4calc.operand_a ^ hdr.p4calc.operand_b);
     }
     @name("operation_crc") action operation_crc_0() {
-        {
-            nbase_0 = hdr.p4calc.operand_b;
-        }
-        {
-            ncount_0 = 64w8589934592;
-        }
-        {
-            ninput_0 = hdr.p4calc.operand_a;
-        }
-        {
-            hash<bit<32>, bit<32>, tuple<bit<32>>, bit<64>>(nselect_0, HashAlgorithm.crc32, nbase_0, { ninput_0 }, ncount_0);
-        }
-        {
-            send_back_0(nselect_0);
-        }
+        nbase_0 = hdr.p4calc.operand_b;
+        ncount_0 = 64w8589934592;
+        ninput_0 = hdr.p4calc.operand_a;
+        hash<bit<32>, bit<32>, tuple<bit<32>>, bit<64>>(nselect_0, HashAlgorithm.crc32, nbase_0, { ninput_0 }, ncount_0);
+        send_back_0(nselect_0);
     }
     @name("operation_drop") action operation_drop_0() {
-        {
-            mark_to_drop(standard_metadata);
-        }
+        mark_to_drop(standard_metadata);
     }
     @name("calculate") table calculate_0 {
         key = {
@@ -160,19 +124,13 @@ control MyEgress(inout headers hdr, inou
 }
 control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        {
-            update_checksum<tuple<bit<32>>, bit<32>>(hdr.p4calc.isValid(), { hdr.p4calc.operand_a }, hdr.p4calc.res, HashAlgorithm.crc32);
-        }
+        update_checksum<tuple<bit<32>>, bit<32>>(hdr.p4calc.isValid(), { hdr.p4calc.operand_a }, hdr.p4calc.res, HashAlgorithm.crc32);
     }
 }
 control MyDeparser(packet_out packet, in headers hdr) {
     apply {
-        {
-            packet.emit<ethernet_t>(hdr.ethernet);
-        }
-        {
-            packet.emit<p4calc_t>(hdr.p4calc);
-        }
+        packet.emit<ethernet_t>(hdr.ethernet);
+        packet.emit<p4calc_t>(hdr.p4calc);
     }
 }
 V1Switch<headers, metadata>(MyParser(), MyVerifyChecksum(), MyIngress(), MyEgress(), MyComputeChecksum(), MyDeparser()) main;
