--- before_pass
+++ after_pass
@@ -52,51 +52,73 @@ struct metadata {
 }
 parser TopParser(packet_in b, out headers p, inout metadata meta, inout standard_metadata_t standard_metadata) {
     state start {
-        b.extract<ethernet_t>(p.ethernet);
+        {
+            b.extract<ethernet_t>(p.ethernet);
+        }
         transition select(p.ethernet.etherType) {
             16w0x800: parse_ipv4;
         }
     }
     state parse_ipv4 {
-        b.extract<ipv4_t>(p.ipv4);
+        {
+            b.extract<ipv4_t>(p.ipv4);
+        }
         transition select(p.ipv4.protocol) {
             8w0x11: parse_udp;
             default: accept;
         }
     }
     state parse_udp {
-        b.extract<udp_t>(p.udp);
+        {
+            b.extract<udp_t>(p.udp);
+        }
         transition select(p.udp.dstPort) {
             16w0x8888: parse_myhdr;
             default: accept;
         }
     }
     state parse_myhdr {
-        b.extract<myhdr_t>(p.myhdr);
+        {
+            b.extract<myhdr_t>(p.myhdr);
+        }
         transition accept;
     }
 }
 control TopDeparser(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
-        packet.emit<udp_t>(hdr.udp);
-        packet.emit<myhdr_t>(hdr.myhdr);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
+        {
+            packet.emit<udp_t>(hdr.udp);
+        }
+        {
+            packet.emit<myhdr_t>(hdr.myhdr);
+        }
     }
 }
 control verifyChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 control computeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("_drop") action _drop_0() {
-        mark_to_drop(standard_metadata);
+        {
+            mark_to_drop(standard_metadata);
+        }
     }
     @name("drop_tbl") table drop_tbl_0 {
         key = {
@@ -110,13 +132,17 @@ control egress(inout headers hdr, inout
         default_action = NoAction();
     }
     apply {
-        drop_tbl_0.apply();
+        {
+            drop_tbl_0.apply();
+        }
     }
 }
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("registerRound") register<bit<16>>(32w65536) registerRound_0;
     @name("read_round") action read_round_0() {
-        registerRound_0.read(meta.local_metadata.round, hdr.myhdr.inst);
+        {
+            registerRound_0.read(meta.local_metadata.round, hdr.myhdr.inst);
+        }
     }
     @name("round_tbl") table round_tbl_0 {
         key = {
