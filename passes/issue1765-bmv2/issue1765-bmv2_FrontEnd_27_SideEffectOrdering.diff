--- before_pass
+++ after_pass
@@ -57,32 +57,58 @@ struct metadata {
     bool        b;
 }
 parser parserI(packet_in pkt, out headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
+    IPv4_up_to_ihl_only_h tmp;
+    bit<9> tmp_0;
+    bit<9> tmp_1;
+    bit<9> tmp_2;
+    bit<32> tmp_3;
     state start {
-        pkt.extract<ethernet_t>(hdr.ethernet);
+        {
+            pkt.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        pkt.extract<ipv4_t>(hdr.ipv4, (bit<32>)(((bit<9>)(pkt.lookahead<IPv4_up_to_ihl_only_h>()).ihl << 2) + 9w492 << 3));
-        verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
-        verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
+        {
+            tmp = pkt.lookahead<IPv4_up_to_ihl_only_h>();
+            tmp_0 = (bit<9>)tmp.ihl << 2;
+            tmp_1 = tmp_0 + 9w492;
+            tmp_2 = tmp_1 << 3;
+            tmp_3 = (bit<32>)tmp_2;
+            pkt.extract<ipv4_t>(hdr.ipv4, tmp_3);
+        }
+        {
+            verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
+        }
+        {
+            verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
+        }
         transition select(hdr.ipv4.protocol) {
             8w6: parse_tcp;
             default: accept;
         }
     }
     state parse_tcp {
-        pkt.extract<tcp_t>(hdr.tcp);
+        {
+            pkt.extract<tcp_t>(hdr.tcp);
+        }
         transition accept;
     }
 }
 control cIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
     @name("foo") action foo_0() {
-        hdr.tcp.srcPort = hdr.tcp.srcPort + 16w1;
-        hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
-        hdr.ipv4.dstAddr = hdr.ipv4.dstAddr + 32w4;
+        {
+            hdr.tcp.srcPort = hdr.tcp.srcPort + 16w1;
+        }
+        {
+            hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        }
+        {
+            hdr.ipv4.dstAddr = hdr.ipv4.dstAddr + 32w4;
+        }
     }
     @name("guh") table guh_0 {
         key = {
@@ -94,7 +120,9 @@ control cIngress(inout headers hdr, inou
         default_action = foo_0();
     }
     apply {
-        guh_0.apply();
+        {
+            guh_0.apply();
+        }
     }
 }
 control cEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
@@ -103,19 +131,29 @@ control cEgress(inout headers hdr, inout
 }
 control vc(inout headers hdr, inout metadata meta) {
     apply {
-        verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>, varbit<320>>, bit<16>>(true, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.options }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>, varbit<320>>, bit<16>>(true, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.options }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 control uc(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>, varbit<320>>, bit<16>>(meta.b, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, meta.mystruct1.a ++ meta.mystruct1.b, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.options }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>, varbit<320>>, bit<16>>(meta.b, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, meta.mystruct1.a ++ meta.mystruct1.b, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.options }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 control DeparserI(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
-        packet.emit<tcp_t>(hdr.tcp);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
+        {
+            packet.emit<tcp_t>(hdr.tcp);
+        }
     }
 }
 V1Switch<headers, metadata>(parserI(), vc(), cIngress(), cEgress(), uc(), DeparserI()) main;
