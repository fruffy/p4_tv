--- before_pass
+++ after_pass
@@ -25,54 +25,48 @@ extern bs {
 }
 struct Packet_data {
 }
-control T_host_0(inout TArg1 tArg1, in TArg2 aArg2) {
-    @name("B_action") action B_action_0(out bit<9> barg_0, BParamType bData) {
+control Q_pipe(inout TArg1 qArg1, inout TArg2 qArg2) {
+    @name("p1.thost.B_action") action p1_thost_B_action(out bit<9> barg_0, BParamType bData) {
         barg_0 = bData;
     }
-    @name("C_action") action C_action_0(bit<9> cData) {
-        tArg1.field1 = cData;
+    @name("p1.thost.C_action") action p1_thost_C_action(bit<9> cData) {
+        qArg1.field1 = cData;
     }
-    @name("T") table T_0 {
+    @name("p1.thost.T") table p1_thost_T {
         key = {
-            tArg1.field1: ternary @name("tArg1.field1") ;
-            aArg2.field2: exact @name("aArg2.field2") ;
+            qArg1.field1: ternary @name("tArg1.field1") ;
+            qArg2.field2: exact @name("aArg2.field2") ;
         }
         actions = {
-            B_action_0(tArg1.field1);
-            C_action_0();
+            p1_thost_B_action(qArg1.field1);
+            p1_thost_C_action();
         }
         size = 32w5;
-        const default_action = C_action_0(9w5);
+        const default_action = p1_thost_C_action(9w5);
     }
-    apply {
-        T_0.apply();
+    @name("p1.Drop") action p1_Drop() {
+        qArg1.drop = true;
     }
-}
-control P_pipe_0(inout TArg1 pArg1, inout TArg2 pArg2) {
-    @name("thost") T_host_0() thost_0;
-    @name("Drop") action Drop_0() {
-        pArg1.drop = true;
-    }
-    @name("Tinner") table Tinner_0 {
+    @name("p1.Tinner") table p1_Tinner {
         key = {
-            pArg1.field1: ternary @name("pArg1.field1") ;
+            qArg1.field1: ternary @name("pArg1.field1") ;
         }
         actions = {
-            Drop_0();
+            p1_Drop();
             NoAction();
         }
         const default_action = NoAction();
     }
     apply {
-        thost_0.apply(pArg1, pArg2);
-        thost_0.apply(pArg1, pArg2);
-        Tinner_0.apply();
-    }
-}
-control Q_pipe(inout TArg1 qArg1, inout TArg2 qArg2) {
-    @name("p1") P_pipe_0() p1_0;
-    apply {
-        p1_0.apply(qArg1, qArg2);
+        {
+            {
+                p1_thost_T.apply();
+            }
+            {
+                p1_thost_T.apply();
+            }
+            p1_Tinner.apply();
+        }
     }
 }
 parser prs(bs b, out Packet_data p);
