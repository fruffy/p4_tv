--- before_pass
+++ after_pass
@@ -55,7 +55,7 @@ parser IngressParserImpl(packet_in buffe
     bit<16> tmp;
     bool tmp_0;
     bool tmp_1;
-    @name("ck") InternetChecksum() ck_0;
+    @name("IngressParserImpl.ck") InternetChecksum() ck_0;
     state start {
         buffer.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
@@ -86,11 +86,11 @@ control ingress(inout headers hdr, inout
     @name(".ingress_drop") action ingress_drop(inout psa_ingress_output_metadata_t meta_1) {
         meta_1.drop = true;
     }
-    @name("parser_error_counts") DirectCounter<PacketCounter_t>(PSA_CounterType_t.PACKETS) parser_error_counts_0;
-    @name("set_error_idx") action set_error_idx(ErrorIndex_t idx) {
+    @name("ingress.parser_error_counts") DirectCounter<PacketCounter_t>(PSA_CounterType_t.PACKETS) parser_error_counts_0;
+    @name("ingress.set_error_idx") action set_error_idx(ErrorIndex_t idx) {
         parser_error_counts_0.count();
     }
-    @name("parser_error_count_and_convert") table parser_error_count_and_convert_0 {
+    @name("ingress.parser_error_count_and_convert") table parser_error_count_and_convert_0 {
         key = {
             istd.parser_error: exact @name("istd.parser_error") ;
         }
@@ -136,7 +136,7 @@ control IngressDeparserImpl(packet_out p
 }
 control EgressDeparserImpl(packet_out packet, out empty_metadata_t clone_e2e_meta, out empty_metadata_t recirculate_meta, inout headers hdr, in metadata meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd) {
     bit<16> tmp_2;
-    @name("ck") InternetChecksum() ck_1;
+    @name("EgressDeparserImpl.ck") InternetChecksum() ck_1;
     apply {
         ck_1.clear();
         ck_1.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
