--- before_pass
+++ after_pass
@@ -52,7 +52,7 @@ struct headers {
 typedef bit<32> PacketCounter_t;
 typedef bit<8> ErrorIndex_t;
 parser IngressParserImpl(packet_in buffer, out headers hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
-    InternetChecksum() ck;
+    @name("ck") InternetChecksum() ck_0;
     state start {
         buffer.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
@@ -63,9 +63,9 @@ parser IngressParserImpl(packet_in buffe
     state parse_ipv4 {
         buffer.extract<ipv4_t>(hdr.ipv4);
         verify(hdr.ipv4.ihl == 4w5, error.UnhandledIPv4Options);
-        ck.clear();
-        ck.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
-        verify(ck.get() == hdr.ipv4.hdrChecksum, error.BadIPv4HeaderChecksum);
+        ck_0.clear();
+        ck_0.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
+        verify(ck_0.get() == hdr.ipv4.hdrChecksum, error.BadIPv4HeaderChecksum);
         transition select(hdr.ipv4.protocol) {
             8w6: parse_tcp;
             default: accept;
@@ -77,35 +77,35 @@ parser IngressParserImpl(packet_in buffe
     }
 }
 control ingress(inout headers hdr, inout metadata user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
-    DirectCounter<PacketCounter_t>(PSA_CounterType_t.PACKETS) parser_error_counts;
-    ErrorIndex_t error_idx;
-    action set_error_idx(ErrorIndex_t idx) {
-        error_idx = idx;
-        parser_error_counts.count();
+    @name("parser_error_counts") DirectCounter<PacketCounter_t>(PSA_CounterType_t.PACKETS) parser_error_counts_0;
+    ErrorIndex_t error_idx_0;
+    @name("set_error_idx") action set_error_idx_0(ErrorIndex_t idx) {
+        error_idx_0 = idx;
+        parser_error_counts_0.count();
     }
-    table parser_error_count_and_convert {
+    @name("parser_error_count_and_convert") table parser_error_count_and_convert_0 {
         key = {
             istd.parser_error: exact @name("istd.parser_error") ;
         }
         actions = {
-            set_error_idx();
+            set_error_idx_0();
         }
-        default_action = set_error_idx(8w0);
+        default_action = set_error_idx_0(8w0);
         const entries = {
-                        error.NoError : set_error_idx(8w1);
-                        error.PacketTooShort : set_error_idx(8w2);
-                        error.NoMatch : set_error_idx(8w3);
-                        error.StackOutOfBounds : set_error_idx(8w4);
-                        error.HeaderTooShort : set_error_idx(8w5);
-                        error.ParserTimeout : set_error_idx(8w6);
-                        error.BadIPv4HeaderChecksum : set_error_idx(8w7);
-                        error.UnhandledIPv4Options : set_error_idx(8w8);
+                        error.NoError : set_error_idx_0(8w1);
+                        error.PacketTooShort : set_error_idx_0(8w2);
+                        error.NoMatch : set_error_idx_0(8w3);
+                        error.StackOutOfBounds : set_error_idx_0(8w4);
+                        error.HeaderTooShort : set_error_idx_0(8w5);
+                        error.ParserTimeout : set_error_idx_0(8w6);
+                        error.BadIPv4HeaderChecksum : set_error_idx_0(8w7);
+                        error.UnhandledIPv4Options : set_error_idx_0(8w8);
         }
-        psa_direct_counter = parser_error_counts;
+        psa_direct_counter = parser_error_counts_0;
     }
     apply {
         if (istd.parser_error != error.NoError) {
-            parser_error_count_and_convert.apply();
+            parser_error_count_and_convert_0.apply();
             ingress_drop(ostd);
             exit;
         }
@@ -128,11 +128,11 @@ control IngressDeparserImpl(packet_out p
     }
 }
 control EgressDeparserImpl(packet_out packet, out empty_metadata_t clone_e2e_meta, out empty_metadata_t recirculate_meta, inout headers hdr, in metadata meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd) {
-    InternetChecksum() ck;
+    @name("ck") InternetChecksum() ck_1;
     apply {
-        ck.clear();
-        ck.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
-        hdr.ipv4.hdrChecksum = ck.get();
+        ck_1.clear();
+        ck_1.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
+        hdr.ipv4.hdrChecksum = ck_1.get();
         packet.emit<ethernet_t>(hdr.ethernet);
         packet.emit<ipv4_t>(hdr.ipv4);
         packet.emit<tcp_t>(hdr.tcp);
