--- before_pass
+++ after_pass
@@ -53,26 +53,46 @@ typedef bit<32> PacketCounter_t;
 typedef bit<8> ErrorIndex_t;
 parser IngressParserImpl(packet_in buffer, out headers hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
     @name("ck") InternetChecksum() ck_0;
+    bit<16> tmp;
+    bool tmp_0;
+    bool tmp_1;
     state start {
-        buffer.extract<ethernet_t>(hdr.ethernet);
+        {
+            buffer.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        buffer.extract<ipv4_t>(hdr.ipv4);
-        verify(hdr.ipv4.ihl == 4w5, error.UnhandledIPv4Options);
-        ck_0.clear();
-        ck_0.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
-        verify(ck_0.get() == hdr.ipv4.hdrChecksum, error.BadIPv4HeaderChecksum);
+        {
+            buffer.extract<ipv4_t>(hdr.ipv4);
+        }
+        {
+            verify(hdr.ipv4.ihl == 4w5, error.UnhandledIPv4Options);
+        }
+        {
+            ck_0.clear();
+        }
+        {
+            ck_0.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
+        }
+        {
+            tmp = ck_0.get();
+            tmp_0 = tmp == hdr.ipv4.hdrChecksum;
+            tmp_1 = tmp_0;
+            verify(tmp_1, error.BadIPv4HeaderChecksum);
+        }
         transition select(hdr.ipv4.protocol) {
             8w6: parse_tcp;
             default: accept;
         }
     }
     state parse_tcp {
-        buffer.extract<tcp_t>(hdr.tcp);
+        {
+            buffer.extract<tcp_t>(hdr.tcp);
+        }
         transition accept;
     }
 }
@@ -80,8 +100,12 @@ control ingress(inout headers hdr, inout
     ErrorIndex_t error_idx_0;
     @name("parser_error_counts") DirectCounter<PacketCounter_t>(PSA_CounterType_t.PACKETS) parser_error_counts_0;
     @name("set_error_idx") action set_error_idx_0(ErrorIndex_t idx) {
-        error_idx_0 = idx;
-        parser_error_counts_0.count();
+        {
+            error_idx_0 = idx;
+        }
+        {
+            parser_error_counts_0.count();
+        }
     }
     @name("parser_error_count_and_convert") table parser_error_count_and_convert_0 {
         key = {
@@ -105,8 +129,12 @@ control ingress(inout headers hdr, inout
     }
     apply {
         if (istd.parser_error != error.NoError) {
-            parser_error_count_and_convert_0.apply();
-            ingress_drop(ostd);
+            {
+                parser_error_count_and_convert_0.apply();
+            }
+            {
+                ingress_drop(ostd);
+            }
             exit;
         }
     }
@@ -122,20 +150,40 @@ control egress(inout headers hdr, inout
 }
 control IngressDeparserImpl(packet_out packet, out empty_metadata_t clone_i2e_meta, out empty_metadata_t resubmit_meta, out empty_metadata_t normal_meta, inout headers hdr, in metadata meta, in psa_ingress_output_metadata_t istd) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
-        packet.emit<tcp_t>(hdr.tcp);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
+        {
+            packet.emit<tcp_t>(hdr.tcp);
+        }
     }
 }
 control EgressDeparserImpl(packet_out packet, out empty_metadata_t clone_e2e_meta, out empty_metadata_t recirculate_meta, inout headers hdr, in metadata meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd) {
     @name("ck") InternetChecksum() ck_1;
+    bit<16> tmp_2;
     apply {
-        ck_1.clear();
-        ck_1.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
-        hdr.ipv4.hdrChecksum = ck_1.get();
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
-        packet.emit<tcp_t>(hdr.tcp);
+        {
+            ck_1.clear();
+        }
+        {
+            ck_1.add<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>>({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
+        }
+        {
+            tmp_2 = ck_1.get();
+            hdr.ipv4.hdrChecksum = tmp_2;
+        }
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
+        {
+            packet.emit<tcp_t>(hdr.tcp);
+        }
     }
 }
 IngressPipeline<headers, metadata, empty_metadata_t, empty_metadata_t, empty_metadata_t, empty_metadata_t>(IngressParserImpl(), ingress(), IngressDeparserImpl()) ip;
