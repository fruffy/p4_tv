--- before_pass
+++ after_pass
@@ -83,8 +83,11 @@ parser IngressParserImpl(packet_in buffe
     }
 }
 control ingress(inout headers hdr, inout metadata user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
+    @name(".ingress_drop") action ingress_drop_1(inout psa_ingress_output_metadata_t meta_0) {
+        meta_0.drop = true;
+    }
     @name("parser_error_counts") DirectCounter<PacketCounter_t>(PSA_CounterType_t.PACKETS) parser_error_counts;
-    @name("set_error_idx") action set_error_idx(ErrorIndex_t idx) {
+    @name("set_error_idx") action set_error_idx_0(ErrorIndex_t idx) {
         parser_error_counts.count();
     }
     @name("parser_error_count_and_convert") table parser_error_count_and_convert {
@@ -92,25 +95,25 @@ control ingress(inout headers hdr, inout
             istd.parser_error: exact @name("istd.parser_error") ;
         }
         actions = {
-            set_error_idx();
+            set_error_idx_0();
         }
-        default_action = set_error_idx(8w0);
+        default_action = set_error_idx_0(8w0);
         const entries = {
-                        error.NoError : set_error_idx(8w1);
-                        error.PacketTooShort : set_error_idx(8w2);
-                        error.NoMatch : set_error_idx(8w3);
-                        error.StackOutOfBounds : set_error_idx(8w4);
-                        error.HeaderTooShort : set_error_idx(8w5);
-                        error.ParserTimeout : set_error_idx(8w6);
-                        error.BadIPv4HeaderChecksum : set_error_idx(8w7);
-                        error.UnhandledIPv4Options : set_error_idx(8w8);
+                        error.NoError : set_error_idx_0(8w1);
+                        error.PacketTooShort : set_error_idx_0(8w2);
+                        error.NoMatch : set_error_idx_0(8w3);
+                        error.StackOutOfBounds : set_error_idx_0(8w4);
+                        error.HeaderTooShort : set_error_idx_0(8w5);
+                        error.ParserTimeout : set_error_idx_0(8w6);
+                        error.BadIPv4HeaderChecksum : set_error_idx_0(8w7);
+                        error.UnhandledIPv4Options : set_error_idx_0(8w8);
         }
         psa_direct_counter = parser_error_counts;
     }
     apply {
         if (istd.parser_error != error.NoError) {
             parser_error_count_and_convert.apply();
-            ingress_drop(ostd);
+            ingress_drop_1(ostd);
             exit;
         }
     }
