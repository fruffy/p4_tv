--- before_pass
+++ after_pass
@@ -57,18 +57,18 @@ parser IngressParserImpl(packet_in buffe
     state start {
         buffer.extract(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
-            0x800: parse_ipv4;
+            16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
         buffer.extract(hdr.ipv4);
-        verify(hdr.ipv4.ihl == 5, error.UnhandledIPv4Options);
+        verify(hdr.ipv4.ihl == 4w5, error.UnhandledIPv4Options);
         ck.clear();
         ck.add({ hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr });
         verify(ck.get() == hdr.ipv4.hdrChecksum, error.BadIPv4HeaderChecksum);
         transition select(hdr.ipv4.protocol) {
-            6: parse_tcp;
+            8w6: parse_tcp;
             default: accept;
         }
     }
@@ -91,16 +91,16 @@ control ingress(inout headers hdr, inout
         actions = {
             set_error_idx();
         }
-        default_action = set_error_idx(0);
+        default_action = set_error_idx(8w0);
         const entries = {
-                        error.NoError : set_error_idx(1);
-                        error.PacketTooShort : set_error_idx(2);
-                        error.NoMatch : set_error_idx(3);
-                        error.StackOutOfBounds : set_error_idx(4);
-                        error.HeaderTooShort : set_error_idx(5);
-                        error.ParserTimeout : set_error_idx(6);
-                        error.BadIPv4HeaderChecksum : set_error_idx(7);
-                        error.UnhandledIPv4Options : set_error_idx(8);
+                        error.NoError : set_error_idx(8w1);
+                        error.PacketTooShort : set_error_idx(8w2);
+                        error.NoMatch : set_error_idx(8w3);
+                        error.StackOutOfBounds : set_error_idx(8w4);
+                        error.HeaderTooShort : set_error_idx(8w5);
+                        error.ParserTimeout : set_error_idx(8w6);
+                        error.BadIPv4HeaderChecksum : set_error_idx(8w7);
+                        error.UnhandledIPv4Options : set_error_idx(8w8);
         }
         psa_direct_counter = parser_error_counts;
     }
