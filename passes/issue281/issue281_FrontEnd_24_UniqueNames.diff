--- before_pass
+++ after_pass
@@ -39,9 +39,9 @@ parser EthernetParser(packet_in b, out e
     }
 }
 parser L2(packet_in b, out h hdr) {
-    EthernetParser() ep;
+    @name("ep") EthernetParser() ep_0;
     state start {
-        ep.apply(b, hdr.ether);
+        ep_0.apply(b, hdr.ether);
         transition accept;
     }
 }
@@ -58,32 +58,32 @@ parser VlanParser(packet_in b, out vlan_
     }
 }
 parser L3(packet_in b, inout h hdr) {
-    Ipv4Parser() ip;
-    VlanParser() vp;
-    bit<16> etherType = hdr.ether.etherType;
+    @name("ip") Ipv4Parser() ip_0;
+    @name("vp") VlanParser() vp_0;
+    bit<16> etherType_0 = hdr.ether.etherType;
     state start {
-        transition select(etherType) {
+        transition select(etherType_0) {
             16w0x800: ipv4;
             16w0x8100: vlan;
             default: accept;
         }
     }
     state ipv4 {
-        ip.apply(b, hdr.ipv4);
+        ip_0.apply(b, hdr.ipv4);
         transition accept;
     }
     state vlan {
-        vp.apply(b, hdr.vlan);
-        etherType = hdr.vlan.etherType;
+        vp_0.apply(b, hdr.vlan);
+        etherType_0 = hdr.vlan.etherType;
         transition start;
     }
 }
 parser MyParser(packet_in b, out h hdr, inout m meta, inout standard_metadata_t std) {
-    L2() l2;
-    L3() l3;
+    @name("l2") L2() l2_0;
+    @name("l3") L3() l3_0;
     state start {
-        l2.apply(b, hdr);
-        l3.apply(b, hdr);
+        l2_0.apply(b, hdr);
+        l3_0.apply(b, hdr);
         transition accept;
     }
 }
