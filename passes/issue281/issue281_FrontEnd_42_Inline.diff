--- before_pass
+++ after_pass
@@ -32,58 +32,59 @@ struct h {
 }
 struct m {
 }
-parser EthernetParser(packet_in b, out ethernet_t ether) {
+parser MyParser(packet_in b, out h hdr, inout m meta, inout standard_metadata_t std) {
+    bit<16> l3_etherType;
     state start {
-        b.extract<ethernet_t>(ether);
-        transition accept;
+        hdr.ether.setInvalid();
+        hdr.vlan.setInvalid();
+        hdr.ipv4.setInvalid();
+        transition L2_start;
+    }
+    state L2_start {
+        hdr.ether.setInvalid();
+        transition L2_EthernetParser_start;
+    }
+    state L2_EthernetParser_start {
+        b.extract<ethernet_t>(hdr.ether);
+        transition L2_start_0;
+    }
+    state L2_start_0 {
+        transition start_1;
+    }
+    state start_1 {
+        transition L3_start;
+    }
+    state L3_start {
+        l3_etherType = hdr.ether.etherType;
+        transition select(l3_etherType) {
+            16w0x800: L3_ipv4;
+            16w0x8100: L3_vlan;
+            default: start_2;
+        }
     }
-}
-parser L2(packet_in b, out h hdr) {
-    @name("ep") EthernetParser() ep_0;
-    state start {
-        ep_0.apply(b, hdr.ether);
-        transition accept;
+    state L3_ipv4 {
+        hdr.ipv4.setInvalid();
+        transition L3_Ipv4Parser_start;
     }
-}
-parser Ipv4Parser(packet_in b, out ipv4_t ipv4) {
-    state start {
-        b.extract<ipv4_t>(ipv4);
-        transition accept;
+    state L3_Ipv4Parser_start {
+        b.extract<ipv4_t>(hdr.ipv4);
+        transition L3_ipv4_0;
     }
-}
-parser VlanParser(packet_in b, out vlan_t vlan) {
-    state start {
-        b.extract<vlan_t>(vlan);
-        transition accept;
+    state L3_ipv4_0 {
+        transition start_2;
     }
-}
-parser L3(packet_in b, inout h hdr) {
-    bit<16> etherType_0;
-    @name("ip") Ipv4Parser() ip_0;
-    @name("vp") VlanParser() vp_0;
-    state start {
-        etherType_0 = hdr.ether.etherType;
-        transition select(etherType_0) {
-            16w0x800: ipv4;
-            16w0x8100: vlan;
-            default: accept;
-        }
+    state L3_vlan {
+        hdr.vlan.setInvalid();
+        transition L3_VlanParser_start;
     }
-    state ipv4 {
-        ip_0.apply(b, hdr.ipv4);
-        transition accept;
+    state L3_VlanParser_start {
+        b.extract<vlan_t>(hdr.vlan);
+        transition L3_vlan_0;
     }
-    state vlan {
-        vp_0.apply(b, hdr.vlan);
-        transition start;
+    state L3_vlan_0 {
+        transition L3_start;
     }
-}
-parser MyParser(packet_in b, out h hdr, inout m meta, inout standard_metadata_t std) {
-    @name("l2") L2() l2_0;
-    @name("l3") L3() l3_0;
-    state start {
-        l2_0.apply(b, hdr);
-        l3_0.apply(b, hdr);
+    state start_2 {
         transition accept;
     }
 }
