--- before_pass
+++ after_pass
@@ -50,7 +50,7 @@ parser TopParser(packet_in b, out Parsed
     bit<16> tmp;
     bool tmp_0;
     bool tmp_1;
-    @name("ck") Ck16() ck_0;
+    @name("TopParser.ck") Ck16() ck_0;
     state start {
         b.extract<Ethernet_h>(p.ethernet);
         transition select(p.ethernet.etherType) {
@@ -74,24 +74,24 @@ control TopPipe(inout Parsed_packet head
     @name(".NoAction") action NoAction_0() {
     }
     IPv4Address nextHop_0;
-    @name("Drop_action") action Drop_action() {
+    @name("TopPipe.Drop_action") action Drop_action() {
         outCtrl.outputPort = 4w0xf;
     }
-    @name("Drop_action") action Drop_action_4() {
+    @name("TopPipe.Drop_action") action Drop_action_4() {
         outCtrl.outputPort = 4w0xf;
     }
-    @name("Drop_action") action Drop_action_5() {
+    @name("TopPipe.Drop_action") action Drop_action_5() {
         outCtrl.outputPort = 4w0xf;
     }
-    @name("Drop_action") action Drop_action_6() {
+    @name("TopPipe.Drop_action") action Drop_action_6() {
         outCtrl.outputPort = 4w0xf;
     }
-    @name("Set_nhop") action Set_nhop(IPv4Address ipv4_dest, PortId port) {
+    @name("TopPipe.Set_nhop") action Set_nhop(IPv4Address ipv4_dest, PortId port) {
         nextHop_0 = ipv4_dest;
         headers.ip.ttl = headers.ip.ttl + 8w255;
         outCtrl.outputPort = port;
     }
-    @name("ipv4_match") table ipv4_match_0 {
+    @name("TopPipe.ipv4_match") table ipv4_match_0 {
         key = {
             headers.ip.dstAddr: lpm @name("headers.ip.dstAddr") ;
         }
@@ -102,10 +102,10 @@ control TopPipe(inout Parsed_packet head
         size = 1024;
         default_action = Drop_action();
     }
-    @name("Send_to_cpu") action Send_to_cpu() {
+    @name("TopPipe.Send_to_cpu") action Send_to_cpu() {
         outCtrl.outputPort = 4w0xe;
     }
-    @name("check_ttl") table check_ttl_0 {
+    @name("TopPipe.check_ttl") table check_ttl_0 {
         key = {
             headers.ip.ttl: exact @name("headers.ip.ttl") ;
         }
@@ -115,10 +115,10 @@ control TopPipe(inout Parsed_packet head
         }
         const default_action = NoAction_0();
     }
-    @name("Set_dmac") action Set_dmac(EthernetAddress dmac) {
+    @name("TopPipe.Set_dmac") action Set_dmac(EthernetAddress dmac) {
         headers.ethernet.dstAddr = dmac;
     }
-    @name("dmac") table dmac_0 {
+    @name("TopPipe.dmac") table dmac_0 {
         key = {
             nextHop_0: exact @name("nextHop") ;
         }
@@ -129,10 +129,10 @@ control TopPipe(inout Parsed_packet head
         size = 1024;
         default_action = Drop_action_4();
     }
-    @name("Set_smac") action Set_smac(EthernetAddress smac) {
+    @name("TopPipe.Set_smac") action Set_smac(EthernetAddress smac) {
         headers.ethernet.srcAddr = smac;
     }
-    @name("smac") table smac_0 {
+    @name("TopPipe.smac") table smac_0 {
         key = {
             outCtrl.outputPort: exact @name("outCtrl.outputPort") ;
         }
@@ -174,7 +174,7 @@ control TopPipe(inout Parsed_packet head
 }
 control TopDeparser(inout Parsed_packet p, packet_out b) {
     bit<16> tmp_2;
-    @name("ck") Ck16() ck_1;
+    @name("TopDeparser.ck") Ck16() ck_1;
     apply {
         b.emit<Ethernet_h>(p.ethernet);
         if (p.ip.isValid()) {
