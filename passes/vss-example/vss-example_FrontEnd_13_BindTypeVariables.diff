--- before_pass
+++ after_pass
@@ -55,17 +55,17 @@ struct Parsed_packet {
 parser TopParser(packet_in b, out Parsed_packet p) {
     Ck16() ck;
     state start {
-        b.extract(p.ethernet);
+        b.extract<Ethernet_h>(p.ethernet);
         transition select(p.ethernet.etherType) {
             16w0x800: parse_ipv4;
         }
     }
     state parse_ipv4 {
-        b.extract(p.ip);
+        b.extract<Ipv4_h>(p.ip);
         verify(p.ip.version == 4w4, error.IPv4IncorrectVersion);
         verify(p.ip.ihl == 4w5, error.IPv4OptionsNotSupported);
         ck.clear();
-        ck.update(p.ip);
+        ck.update<Ipv4_h>(p.ip);
         verify(ck.get() == 16w0, error.IPv4ChecksumError);
         transition accept;
     }
@@ -155,14 +155,14 @@ control TopPipe(inout Parsed_packet head
 control TopDeparser(inout Parsed_packet p, packet_out b) {
     Ck16() ck;
     apply {
-        b.emit(p.ethernet);
+        b.emit<Ethernet_h>(p.ethernet);
         if (p.ip.isValid()) {
             ck.clear();
             p.ip.hdrChecksum = 16w0;
-            ck.update(p.ip);
+            ck.update<Ipv4_h>(p.ip);
             p.ip.hdrChecksum = ck.get();
         }
-        b.emit(p.ip);
+        b.emit<Ipv4_h>(p.ip);
     }
 }
-VSS(TopParser(), TopPipe(), TopDeparser()) main;
+VSS<Parsed_packet>(TopParser(), TopPipe(), TopDeparser()) main;
