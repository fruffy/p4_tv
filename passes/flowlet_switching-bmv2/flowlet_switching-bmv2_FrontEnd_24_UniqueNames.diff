--- before_pass
+++ after_pass
@@ -76,16 +76,16 @@ parser ParserImpl(packet_in packet, out
     }
 }
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    @name("rewrite_mac") action rewrite_mac(bit<48> smac) {
+    @name("rewrite_mac") action rewrite_mac_0(bit<48> smac) {
         hdr.ethernet.srcAddr = smac;
     }
-    @name("_drop") action _drop() {
+    @name("_drop") action _drop_0() {
         mark_to_drop(standard_metadata);
     }
-    @name("send_frame") table send_frame {
+    @name("send_frame") table send_frame_0 {
         actions = {
-            rewrite_mac();
-            _drop();
+            rewrite_mac_0();
+            _drop_0();
             NoAction();
         }
         key = {
@@ -95,42 +95,42 @@ control egress(inout headers hdr, inout
         default_action = NoAction();
     }
     apply {
-        send_frame.apply();
+        send_frame_0.apply();
     }
 }
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    @name("flowlet_id") register<bit<16>>(32w8192) flowlet_id;
-    @name("flowlet_lasttime") register<bit<32>>(32w8192) flowlet_lasttime;
-    @name("_drop") action _drop() {
+    @name("flowlet_id") register<bit<16>>(32w8192) flowlet_id_0;
+    @name("flowlet_lasttime") register<bit<32>>(32w8192) flowlet_lasttime_0;
+    @name("_drop") action _drop_1() {
         mark_to_drop(standard_metadata);
     }
-    @name("set_ecmp_select") action set_ecmp_select(bit<8> ecmp_base, bit<8> ecmp_count) {
+    @name("set_ecmp_select") action set_ecmp_select_0(bit<8> ecmp_base, bit<8> ecmp_count) {
         hash<bit<14>, bit<10>, tuple<bit<32>, bit<32>, bit<8>, bit<16>, bit<16>, bit<16>>, bit<20>>(meta.ingress_metadata.ecmp_offset, HashAlgorithm.crc16, (bit<10>)ecmp_base, { hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, hdr.tcp.srcPort, hdr.tcp.dstPort, meta.ingress_metadata.flowlet_id }, (bit<20>)ecmp_count);
     }
-    @name("set_nhop") action set_nhop(bit<32> nhop_ipv4, bit<9> port) {
+    @name("set_nhop") action set_nhop_0(bit<32> nhop_ipv4, bit<9> port) {
         meta.ingress_metadata.nhop_ipv4 = nhop_ipv4;
         standard_metadata.egress_spec = port;
         hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
     }
-    @name("lookup_flowlet_map") action lookup_flowlet_map() {
+    @name("lookup_flowlet_map") action lookup_flowlet_map_0() {
         hash<bit<13>, bit<13>, tuple<bit<32>, bit<32>, bit<8>, bit<16>, bit<16>>, bit<26>>(meta.ingress_metadata.flowlet_map_index, HashAlgorithm.crc16, 13w0, { hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, hdr.tcp.srcPort, hdr.tcp.dstPort }, 26w13);
-        flowlet_id.read(meta.ingress_metadata.flowlet_id, (bit<32>)meta.ingress_metadata.flowlet_map_index);
+        flowlet_id_0.read(meta.ingress_metadata.flowlet_id, (bit<32>)meta.ingress_metadata.flowlet_map_index);
         meta.ingress_metadata.flow_ipg = (bit<32>)standard_metadata.ingress_global_timestamp;
-        flowlet_lasttime.read(meta.ingress_metadata.flowlet_lasttime, (bit<32>)meta.ingress_metadata.flowlet_map_index);
+        flowlet_lasttime_0.read(meta.ingress_metadata.flowlet_lasttime, (bit<32>)meta.ingress_metadata.flowlet_map_index);
         meta.ingress_metadata.flow_ipg = meta.ingress_metadata.flow_ipg - meta.ingress_metadata.flowlet_lasttime;
-        flowlet_lasttime.write((bit<32>)meta.ingress_metadata.flowlet_map_index, (bit<32>)standard_metadata.ingress_global_timestamp);
+        flowlet_lasttime_0.write((bit<32>)meta.ingress_metadata.flowlet_map_index, (bit<32>)standard_metadata.ingress_global_timestamp);
     }
-    @name("set_dmac") action set_dmac(bit<48> dmac) {
+    @name("set_dmac") action set_dmac_0(bit<48> dmac) {
         hdr.ethernet.dstAddr = dmac;
     }
-    @name("update_flowlet_id") action update_flowlet_id() {
+    @name("update_flowlet_id") action update_flowlet_id_0() {
         meta.ingress_metadata.flowlet_id = meta.ingress_metadata.flowlet_id + 16w1;
-        flowlet_id.write((bit<32>)meta.ingress_metadata.flowlet_map_index, meta.ingress_metadata.flowlet_id);
+        flowlet_id_0.write((bit<32>)meta.ingress_metadata.flowlet_map_index, meta.ingress_metadata.flowlet_id);
     }
-    @name("ecmp_group") table ecmp_group {
+    @name("ecmp_group") table ecmp_group_0 {
         actions = {
-            _drop();
-            set_ecmp_select();
+            _drop_1();
+            set_ecmp_select_0();
             NoAction();
         }
         key = {
@@ -139,10 +139,10 @@ control ingress(inout headers hdr, inout
         size = 1024;
         default_action = NoAction();
     }
-    @name("ecmp_nhop") table ecmp_nhop {
+    @name("ecmp_nhop") table ecmp_nhop_0 {
         actions = {
-            _drop();
-            set_nhop();
+            _drop_1();
+            set_nhop_0();
             NoAction();
         }
         key = {
@@ -151,17 +151,17 @@ control ingress(inout headers hdr, inout
         size = 16384;
         default_action = NoAction();
     }
-    @name("flowlet") table flowlet {
+    @name("flowlet") table flowlet_0 {
         actions = {
-            lookup_flowlet_map();
+            lookup_flowlet_map_0();
             NoAction();
         }
         default_action = NoAction();
     }
-    @name("forward") table forward {
+    @name("forward") table forward_0 {
         actions = {
-            set_dmac();
-            _drop();
+            set_dmac_0();
+            _drop_1();
             NoAction();
         }
         key = {
@@ -170,23 +170,23 @@ control ingress(inout headers hdr, inout
         size = 512;
         default_action = NoAction();
     }
-    @name("new_flowlet") table new_flowlet {
+    @name("new_flowlet") table new_flowlet_0 {
         actions = {
-            update_flowlet_id();
+            update_flowlet_id_0();
             NoAction();
         }
         default_action = NoAction();
     }
     apply {
         @atomic {
-            flowlet.apply();
+            flowlet_0.apply();
             if (meta.ingress_metadata.flow_ipg > 32w50000) {
-                new_flowlet.apply();
+                new_flowlet_0.apply();
             }
         }
-        ecmp_group.apply();
-        ecmp_nhop.apply();
-        forward.apply();
+        ecmp_group_0.apply();
+        ecmp_nhop_0.apply();
+        forward_0.apply();
     }
 }
 control DeparserImpl(packet_out packet, in headers hdr) {
