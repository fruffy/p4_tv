--- before_pass
+++ after_pass
@@ -53,38 +53,38 @@ struct headers {
     tcp_t      tcp;
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    @name("parse_ethernet") state parse_ethernet {
+    @name("ParserImpl.parse_ethernet") state parse_ethernet {
         packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
-    @name("parse_ipv4") state parse_ipv4 {
+    @name("ParserImpl.parse_ipv4") state parse_ipv4 {
         packet.extract<ipv4_t>(hdr.ipv4);
         transition select(hdr.ipv4.protocol) {
             8w6: parse_tcp;
             default: accept;
         }
     }
-    @name("parse_tcp") state parse_tcp {
+    @name("ParserImpl.parse_tcp") state parse_tcp {
         packet.extract<tcp_t>(hdr.tcp);
         transition accept;
     }
-    @name("start") state start {
+    @name("ParserImpl.start") state start {
         transition parse_ethernet;
     }
 }
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name(".NoAction") action NoAction_0() {
     }
-    @name("rewrite_mac") action rewrite_mac(bit<48> smac) {
+    @name("egress.rewrite_mac") action rewrite_mac(bit<48> smac) {
         hdr.ethernet.srcAddr = smac;
     }
-    @name("_drop") action _drop() {
+    @name("egress._drop") action _drop() {
         mark_to_drop(standard_metadata);
     }
-    @name("send_frame") table send_frame_0 {
+    @name("egress.send_frame") table send_frame_0 {
         actions = {
             rewrite_mac();
             _drop();
@@ -111,26 +111,26 @@ control ingress(inout headers hdr, inout
     }
     @name(".NoAction") action NoAction_11() {
     }
-    @name("flowlet_id") register<bit<16>>(32w8192) flowlet_id_0;
-    @name("flowlet_lasttime") register<bit<32>>(32w8192) flowlet_lasttime_0;
-    @name("_drop") action _drop_2() {
+    @name("ingress.flowlet_id") register<bit<16>>(32w8192) flowlet_id_0;
+    @name("ingress.flowlet_lasttime") register<bit<32>>(32w8192) flowlet_lasttime_0;
+    @name("ingress._drop") action _drop_2() {
         mark_to_drop(standard_metadata);
     }
-    @name("_drop") action _drop_5() {
+    @name("ingress._drop") action _drop_5() {
         mark_to_drop(standard_metadata);
     }
-    @name("_drop") action _drop_6() {
+    @name("ingress._drop") action _drop_6() {
         mark_to_drop(standard_metadata);
     }
-    @name("set_ecmp_select") action set_ecmp_select(bit<8> ecmp_base, bit<8> ecmp_count) {
+    @name("ingress.set_ecmp_select") action set_ecmp_select(bit<8> ecmp_base, bit<8> ecmp_count) {
         hash<bit<14>, bit<10>, tuple<bit<32>, bit<32>, bit<8>, bit<16>, bit<16>, bit<16>>, bit<20>>(meta.ingress_metadata.ecmp_offset, HashAlgorithm.crc16, (bit<10>)ecmp_base, { hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, hdr.tcp.srcPort, hdr.tcp.dstPort, meta.ingress_metadata.flowlet_id }, (bit<20>)ecmp_count);
     }
-    @name("set_nhop") action set_nhop(bit<32> nhop_ipv4, bit<9> port) {
+    @name("ingress.set_nhop") action set_nhop(bit<32> nhop_ipv4, bit<9> port) {
         meta.ingress_metadata.nhop_ipv4 = nhop_ipv4;
         standard_metadata.egress_spec = port;
         hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
     }
-    @name("lookup_flowlet_map") action lookup_flowlet_map() {
+    @name("ingress.lookup_flowlet_map") action lookup_flowlet_map() {
         hash<bit<13>, bit<13>, tuple<bit<32>, bit<32>, bit<8>, bit<16>, bit<16>>, bit<26>>(meta.ingress_metadata.flowlet_map_index, HashAlgorithm.crc16, 13w0, { hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, hdr.tcp.srcPort, hdr.tcp.dstPort }, 26w13);
         flowlet_id_0.read(meta.ingress_metadata.flowlet_id, (bit<32>)meta.ingress_metadata.flowlet_map_index);
         meta.ingress_metadata.flow_ipg = (bit<32>)standard_metadata.ingress_global_timestamp;
@@ -138,14 +138,14 @@ control ingress(inout headers hdr, inout
         meta.ingress_metadata.flow_ipg = meta.ingress_metadata.flow_ipg - meta.ingress_metadata.flowlet_lasttime;
         flowlet_lasttime_0.write((bit<32>)meta.ingress_metadata.flowlet_map_index, (bit<32>)standard_metadata.ingress_global_timestamp);
     }
-    @name("set_dmac") action set_dmac(bit<48> dmac) {
+    @name("ingress.set_dmac") action set_dmac(bit<48> dmac) {
         hdr.ethernet.dstAddr = dmac;
     }
-    @name("update_flowlet_id") action update_flowlet_id() {
+    @name("ingress.update_flowlet_id") action update_flowlet_id() {
         meta.ingress_metadata.flowlet_id = meta.ingress_metadata.flowlet_id + 16w1;
         flowlet_id_0.write((bit<32>)meta.ingress_metadata.flowlet_map_index, meta.ingress_metadata.flowlet_id);
     }
-    @name("ecmp_group") table ecmp_group_0 {
+    @name("ingress.ecmp_group") table ecmp_group_0 {
         actions = {
             _drop_2();
             set_ecmp_select();
@@ -157,7 +157,7 @@ control ingress(inout headers hdr, inout
         size = 1024;
         default_action = NoAction_1();
     }
-    @name("ecmp_nhop") table ecmp_nhop_0 {
+    @name("ingress.ecmp_nhop") table ecmp_nhop_0 {
         actions = {
             _drop_5();
             set_nhop();
@@ -169,14 +169,14 @@ control ingress(inout headers hdr, inout
         size = 16384;
         default_action = NoAction_8();
     }
-    @name("flowlet") table flowlet_0 {
+    @name("ingress.flowlet") table flowlet_0 {
         actions = {
             lookup_flowlet_map();
             NoAction_9();
         }
         default_action = NoAction_9();
     }
-    @name("forward") table forward_0 {
+    @name("ingress.forward") table forward_0 {
         actions = {
             set_dmac();
             _drop_6();
@@ -188,7 +188,7 @@ control ingress(inout headers hdr, inout
         size = 512;
         default_action = NoAction_10();
     }
-    @name("new_flowlet") table new_flowlet_0 {
+    @name("ingress.new_flowlet") table new_flowlet_0 {
         actions = {
             update_flowlet_id();
             NoAction_11();
