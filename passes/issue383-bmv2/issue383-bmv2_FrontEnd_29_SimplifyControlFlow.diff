--- before_pass
+++ after_pass
@@ -34,15 +34,9 @@ struct tst_t {
 }
 parser parse(packet_in pk, out parsed_packet_t h, inout local_metadata_t local_metadata, inout standard_metadata_t standard_metadata) {
     state start {
-        {
-            pk.extract<bitvec_hdr>(h.bvh0);
-        }
-        {
-            pk.extract<bitvec_hdr>(h.bvh1);
-        }
-        {
-            pk.extract<bitvec_hdr>(local_metadata.col.bvh);
-        }
+        pk.extract<bitvec_hdr>(h.bvh0);
+        pk.extract<bitvec_hdr>(h.bvh1);
+        pk.extract<bitvec_hdr>(local_metadata.col.bvh);
         transition accept;
     }
 }
@@ -50,12 +44,8 @@ control ingress(inout parsed_packet_t h,
     tst_t s_0;
     bitvec_hdr bh_0;
     @name("do_act") action do_act_0() {
-        {
-            h.bvh1.row.alt1.valid = 1w0;
-        }
-        {
-            local_metadata.col.bvh.row.alt0.valid = 1w0;
-        }
+        h.bvh1.row.alt1.valid = 1w0;
+        local_metadata.col.bvh.row.alt0.valid = 1w0;
     }
     @name("tns") table tns_0 {
         key = {
@@ -69,39 +59,17 @@ control ingress(inout parsed_packet_t h,
         default_action = NoAction();
     }
     apply {
-        {
-            tns_0.apply();
-        }
-        {
-            bh_0.row.alt0.valid = h.bvh0.row.alt0.valid;
-        }
-        {
-            s_0.row0.alt0 = local_metadata.row1.alt1;
-        }
-        {
-            s_0.row1.alt0.valid = 1w1;
-        }
-        {
-            s_0.row1.alt1.port = local_metadata.row0.alt1.port + 7w1;
-        }
-        {
-            s_0.col.bvh.row.alt0.valid = 1w0;
-        }
-        {
-            local_metadata.col.bvh.row.alt0.valid = 1w0;
-        }
-        {
-            local_metadata.row0.alt0 = local_metadata.row1.alt1;
-        }
-        {
-            local_metadata.row1.alt0.valid = 1w1;
-        }
-        {
-            local_metadata.row1.alt1.port = local_metadata.row0.alt1.port + 7w1;
-        }
-        {
-            clone3<row_t>(CloneType.I2E, 32w0, local_metadata.row0);
-        }
+        tns_0.apply();
+        bh_0.row.alt0.valid = h.bvh0.row.alt0.valid;
+        s_0.row0.alt0 = local_metadata.row1.alt1;
+        s_0.row1.alt0.valid = 1w1;
+        s_0.row1.alt1.port = local_metadata.row0.alt1.port + 7w1;
+        s_0.col.bvh.row.alt0.valid = 1w0;
+        local_metadata.col.bvh.row.alt0.valid = 1w0;
+        local_metadata.row0.alt0 = local_metadata.row1.alt1;
+        local_metadata.row1.alt0.valid = 1w1;
+        local_metadata.row1.alt1.port = local_metadata.row0.alt1.port + 7w1;
+        clone3<row_t>(CloneType.I2E, 32w0, local_metadata.row0);
     }
 }
 control egress(inout parsed_packet_t hdr, inout local_metadata_t local_metadata, inout standard_metadata_t standard_metadata) {
@@ -110,12 +78,8 @@ control egress(inout parsed_packet_t hdr
 }
 control deparser(packet_out b, in parsed_packet_t h) {
     apply {
-        {
-            b.emit<bitvec_hdr>(h.bvh0);
-        }
-        {
-            b.emit<bitvec_hdr>(h.bvh1);
-        }
+        b.emit<bitvec_hdr>(h.bvh0);
+        b.emit<bitvec_hdr>(h.bvh1);
     }
 }
 control verifyChecksum(inout parsed_packet_t hdr, inout local_metadata_t local_metadata) {
