--- before_pass
+++ after_pass
@@ -34,7 +34,7 @@ struct headers {
 const bit<32> NUM_PORTS = 32w512;
 typedef bit<80> PacketByteCountState_t;
 action update_pkt_ip_byte_count(inout PacketByteCountState_t s, in bit<16> ip_length_bytes) {
-    s[79:48] = s[79:48] + 1;
+    s[79:48] = s[79:48] + 32w1;
     s[47:0] = s[47:0] + (bit<48>)ip_length_bytes;
 }
 parser IngressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
@@ -44,7 +44,7 @@ parser IngressParserImpl(packet_in buffe
     state parse_ethernet {
         buffer.extract(parsed_hdr.ethernet);
         transition select(parsed_hdr.ethernet.etherType) {
-            0x800: parse_ipv4;
+            16w0x800: parse_ipv4;
             default: accept;
         }
     }
@@ -56,7 +56,7 @@ parser IngressParserImpl(packet_in buffe
 control ingress(inout headers hdr, inout metadata user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
     Register<PacketByteCountState_t, PortId_t>(32w512) port_pkt_ip_bytes_in;
     apply {
-        ostd.egress_port = (PortId_t)0;
+        ostd.egress_port = (PortId_t)(bit<32>)32w0;
         if (hdr.ipv4.isValid()) {
             @atomic {
                 PacketByteCountState_t tmp;
