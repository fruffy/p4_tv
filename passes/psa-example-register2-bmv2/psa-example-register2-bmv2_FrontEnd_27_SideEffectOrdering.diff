--- before_pass
+++ after_pass
@@ -33,31 +33,49 @@ struct headers {
 }
 typedef bit<80> PacketByteCountState_t;
 action update_pkt_ip_byte_count(inout PacketByteCountState_t s, in bit<16> ip_length_bytes) {
-    s[79:48] = s[79:48] + 32w1;
-    s[47:0] = s[47:0] + (bit<48>)ip_length_bytes;
+    {
+        s[79:48] = s[79:48] + 32w1;
+    }
+    {
+        s[47:0] = s[47:0] + (bit<48>)ip_length_bytes;
+    }
 }
 parser IngressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
     state start {
-        buffer.extract<ethernet_t>(parsed_hdr.ethernet);
+        {
+            buffer.extract<ethernet_t>(parsed_hdr.ethernet);
+        }
         transition select(parsed_hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        buffer.extract<ipv4_t>(parsed_hdr.ipv4);
+        {
+            buffer.extract<ipv4_t>(parsed_hdr.ipv4);
+        }
         transition accept;
     }
 }
 control ingress(inout headers hdr, inout metadata user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
     PacketByteCountState_t tmp_0;
     @name("port_pkt_ip_bytes_in") Register<PacketByteCountState_t, PortId_t>(32w512) port_pkt_ip_bytes_in_0;
+    bit<80> tmp;
     apply {
-        ostd.egress_port = (PortId_t)32w0;
+        {
+            ostd.egress_port = (PortId_t)32w0;
+        }
         if (hdr.ipv4.isValid()) @atomic {
-            tmp_0 = port_pkt_ip_bytes_in_0.read(istd.ingress_port);
-            update_pkt_ip_byte_count(tmp_0, hdr.ipv4.totalLen);
-            port_pkt_ip_bytes_in_0.write(istd.ingress_port, tmp_0);
+            {
+                tmp = port_pkt_ip_bytes_in_0.read(istd.ingress_port);
+                tmp_0 = tmp;
+            }
+            {
+                update_pkt_ip_byte_count(tmp_0, hdr.ipv4.totalLen);
+            }
+            {
+                port_pkt_ip_bytes_in_0.write(istd.ingress_port, tmp_0);
+            }
         }
     }
 }
@@ -72,20 +90,28 @@ control egress(inout headers hdr, inout
 }
 control CommonDeparserImpl(packet_out packet, inout headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
     }
 }
 control IngressDeparserImpl(packet_out buffer, out empty_metadata_t clone_i2e_meta, out empty_metadata_t resubmit_meta, out empty_metadata_t normal_meta, inout headers hdr, in metadata meta, in psa_ingress_output_metadata_t istd) {
     @name("cp") CommonDeparserImpl() cp_0;
     apply {
-        cp_0.apply(buffer, hdr);
+        {
+            cp_0.apply(buffer, hdr);
+        }
     }
 }
 control EgressDeparserImpl(packet_out buffer, out empty_metadata_t clone_e2e_meta, out empty_metadata_t recirculate_meta, inout headers hdr, in metadata meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd) {
     @name("cp") CommonDeparserImpl() cp_1;
     apply {
-        cp_1.apply(buffer, hdr);
+        {
+            cp_1.apply(buffer, hdr);
+        }
     }
 }
 IngressPipeline<headers, metadata, empty_metadata_t, empty_metadata_t, empty_metadata_t, empty_metadata_t>(IngressParserImpl(), ingress(), IngressDeparserImpl()) ip;
