--- before_pass
+++ after_pass
@@ -32,10 +32,6 @@ struct headers {
     ipv4_t     ipv4;
 }
 typedef bit<80> PacketByteCountState_t;
-action update_pkt_ip_byte_count(inout PacketByteCountState_t s_0, in bit<16> ip_length_bytes_0) {
-    s_0[79:48] = s_0[79:48] + 32w1;
-    s_0[47:0] = s_0[47:0] + (bit<48>)ip_length_bytes_0;
-}
 parser IngressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
     state start {
         buffer.extract<ethernet_t>(parsed_hdr.ethernet);
@@ -50,6 +46,10 @@ parser IngressParserImpl(packet_in buffe
     }
 }
 control ingress(inout headers hdr, inout metadata user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
+    @name(".update_pkt_ip_byte_count") action update_pkt_ip_byte_count_1(inout PacketByteCountState_t s_0, in bit<16> ip_length_bytes_0) {
+        s_0[79:48] = s_0[79:48] + 32w1;
+        s_0[47:0] = s_0[47:0] + (bit<48>)ip_length_bytes_0;
+    }
     PacketByteCountState_t tmp_1;
     bit<80> tmp_2;
     @name("port_pkt_ip_bytes_in") Register<PacketByteCountState_t, PortId_t>(32w512) port_pkt_ip_bytes_in;
@@ -58,7 +58,7 @@ control ingress(inout headers hdr, inout
         if (hdr.ipv4.isValid()) @atomic {
             tmp_2 = port_pkt_ip_bytes_in.read(istd.ingress_port);
             tmp_1 = tmp_2;
-            update_pkt_ip_byte_count(tmp_1, hdr.ipv4.totalLen);
+            update_pkt_ip_byte_count_1(tmp_1, hdr.ipv4.totalLen);
             port_pkt_ip_bytes_in.write(istd.ingress_port, tmp_1);
         }
     }
