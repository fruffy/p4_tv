--- before_pass
+++ after_pass
@@ -35,9 +35,9 @@ enum MyPacketTypes {
     Other
 }
 enum bit<8> MySerEnum1 {
-    foo = 28,
-    bar = 17,
-    gah = 42
+    foo = 8w28,
+    bar = 8w17,
+    gah = 8w42
 }
 struct test_digest_t {
     macAddr_t     in_mac_srcAddr;
@@ -118,12 +118,12 @@ control MyIngress(inout headers hdr, ino
         meta.test_digest.in_mac_srcAddr = hdr.ethernet.srcAddr;
         meta.test_digest.my_parser_error = error.PacketTooShort;
         meta.test_digest.pkt_type = MyPacketTypes.IPv4;
-        digest(1, meta.test_digest);
+        digest(32w1, meta.test_digest);
         meta.test_digest2.in_mac_dstAddr = hdr.ethernet.dstAddr;
         meta.test_digest2.my_thing = MySerEnum1.gah;
-        digest(2, meta.test_digest2);
+        digest(32w2, meta.test_digest2);
         meta.test_digest3.in_mac_etherType = hdr.ethernet.etherType;
-        digest(3, meta.test_digest3);
+        digest(32w3, meta.test_digest3);
     }
     apply {
         ipv4_lpm.apply();
@@ -134,7 +134,7 @@ control MyIngress(inout headers hdr, ino
 control MyEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     action rewrite_mac(macAddr_t srcAddr) {
         hdr.ethernet.srcAddr = srcAddr;
-        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
+        hdr.ipv4.ttl = hdr.ipv4.ttl - 8w1;
     }
     table send_frame {
         key = {
