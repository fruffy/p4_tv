--- before_pass
+++ after_pass
@@ -47,52 +47,52 @@ parser CommonParser(packet_in buffer, ou
     }
 }
 parser IngressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
-    CommonParser() p;
+    @name("p") CommonParser() p_0;
     state start {
-        p.apply(buffer, parsed_hdr, user_meta);
+        p_0.apply(buffer, parsed_hdr, user_meta);
         transition accept;
     }
 }
 parser EgressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_egress_parser_input_metadata_t istd, in empty_metadata_t normal_meta, in empty_metadata_t clone_i2e_meta, in empty_metadata_t clone_e2e_meta) {
-    CommonParser() p;
+    @name("p") CommonParser() p_1;
     state start {
-        p.apply(buffer, parsed_hdr, user_meta);
+        p_1.apply(buffer, parsed_hdr, user_meta);
         transition accept;
     }
 }
 control ingress(inout headers hdr, inout metadata user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
-    Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_in;
-    DirectCounter<PacketByteCounter_t>(PSA_CounterType_t.PACKETS_AND_BYTES) per_prefix_pkt_byte_count;
-    action next_hop(PortId_t oport) {
-        per_prefix_pkt_byte_count.count();
+    @name("port_bytes_in") Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_in_0;
+    @name("per_prefix_pkt_byte_count") DirectCounter<PacketByteCounter_t>(PSA_CounterType_t.PACKETS_AND_BYTES) per_prefix_pkt_byte_count_0;
+    @name("next_hop") action next_hop_0(PortId_t oport) {
+        per_prefix_pkt_byte_count_0.count();
         send_to_port(ostd, oport);
     }
-    action default_route_drop() {
-        per_prefix_pkt_byte_count.count();
+    @name("default_route_drop") action default_route_drop_0() {
+        per_prefix_pkt_byte_count_0.count();
         ingress_drop(ostd);
     }
-    table ipv4_da_lpm {
+    @name("ipv4_da_lpm") table ipv4_da_lpm_0 {
         key = {
             hdr.ipv4.dstAddr: lpm @name("hdr.ipv4.dstAddr") ;
         }
         actions = {
-            next_hop();
-            default_route_drop();
+            next_hop_0();
+            default_route_drop_0();
         }
-        default_action = default_route_drop();
-        psa_direct_counter = per_prefix_pkt_byte_count;
+        default_action = default_route_drop_0();
+        psa_direct_counter = per_prefix_pkt_byte_count_0;
     }
     apply {
-        port_bytes_in.count(istd.ingress_port);
+        port_bytes_in_0.count(istd.ingress_port);
         if (hdr.ipv4.isValid()) {
-            ipv4_da_lpm.apply();
+            ipv4_da_lpm_0.apply();
         }
     }
 }
 control egress(inout headers hdr, inout metadata user_meta, in psa_egress_input_metadata_t istd, inout psa_egress_output_metadata_t ostd) {
-    Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_out;
+    @name("port_bytes_out") Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_out_0;
     apply {
-        port_bytes_out.count(istd.egress_port);
+        port_bytes_out_0.count(istd.egress_port);
     }
 }
 control CommonDeparserImpl(packet_out packet, inout headers hdr) {
@@ -102,15 +102,15 @@ control CommonDeparserImpl(packet_out pa
     }
 }
 control IngressDeparserImpl(packet_out buffer, out empty_metadata_t clone_i2e_meta, out empty_metadata_t resubmit_meta, out empty_metadata_t normal_meta, inout headers hdr, in metadata meta, in psa_ingress_output_metadata_t istd) {
-    CommonDeparserImpl() cp;
+    @name("cp") CommonDeparserImpl() cp_0;
     apply {
-        cp.apply(buffer, hdr);
+        cp_0.apply(buffer, hdr);
     }
 }
 control EgressDeparserImpl(packet_out buffer, out empty_metadata_t clone_e2e_meta, out empty_metadata_t recirculate_meta, inout headers hdr, in metadata meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd) {
-    CommonDeparserImpl() cp;
+    @name("cp") CommonDeparserImpl() cp_1;
     apply {
-        cp.apply(buffer, hdr);
+        cp_1.apply(buffer, hdr);
     }
 }
 IngressPipeline<headers, metadata, empty_metadata_t, empty_metadata_t, empty_metadata_t, empty_metadata_t>(IngressParserImpl(), ingress(), IngressDeparserImpl()) ip;
