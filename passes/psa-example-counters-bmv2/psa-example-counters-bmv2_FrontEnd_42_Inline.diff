--- before_pass
+++ after_pass
@@ -33,30 +33,45 @@ struct headers {
     ethernet_t ethernet;
     ipv4_t     ipv4;
 }
-parser CommonParser(packet_in buffer, out headers parsed_hdr, inout metadata user_meta) {
+parser IngressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
     state start {
+        parsed_hdr.ethernet.setInvalid();
+        parsed_hdr.ipv4.setInvalid();
+        transition CommonParser_start;
+    }
+    state CommonParser_start {
         buffer.extract<ethernet_t>(parsed_hdr.ethernet);
         transition select(parsed_hdr.ethernet.etherType) {
-            16w0x800: parse_ipv4;
-            default: accept;
+            16w0x800: CommonParser_parse_ipv4;
+            default: start_0;
         }
     }
-    state parse_ipv4 {
+    state CommonParser_parse_ipv4 {
         buffer.extract<ipv4_t>(parsed_hdr.ipv4);
-        transition accept;
+        transition start_0;
     }
-}
-parser IngressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
-    @name("p") CommonParser() p_0;
-    state start {
-        p_0.apply(buffer, parsed_hdr, user_meta);
+    state start_0 {
         transition accept;
     }
 }
 parser EgressParserImpl(packet_in buffer, out headers parsed_hdr, inout metadata user_meta, in psa_egress_parser_input_metadata_t istd, in empty_metadata_t normal_meta, in empty_metadata_t clone_i2e_meta, in empty_metadata_t clone_e2e_meta) {
-    @name("p") CommonParser() p_1;
     state start {
-        p_1.apply(buffer, parsed_hdr, user_meta);
+        parsed_hdr.ethernet.setInvalid();
+        parsed_hdr.ipv4.setInvalid();
+        transition CommonParser_start_0;
+    }
+    state CommonParser_start_0 {
+        buffer.extract<ethernet_t>(parsed_hdr.ethernet);
+        transition select(parsed_hdr.ethernet.etherType) {
+            16w0x800: CommonParser_parse_ipv4_0;
+            default: start_1;
+        }
+    }
+    state CommonParser_parse_ipv4_0 {
+        buffer.extract<ipv4_t>(parsed_hdr.ipv4);
+        transition start_1;
+    }
+    state start_1 {
         transition accept;
     }
 }
@@ -95,22 +110,20 @@ control egress(inout headers hdr, inout
         port_bytes_out_0.count(istd.egress_port);
     }
 }
-control CommonDeparserImpl(packet_out packet, inout headers hdr) {
-    apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
-    }
-}
 control IngressDeparserImpl(packet_out buffer, out empty_metadata_t clone_i2e_meta, out empty_metadata_t resubmit_meta, out empty_metadata_t normal_meta, inout headers hdr, in metadata meta, in psa_ingress_output_metadata_t istd) {
-    @name("cp") CommonDeparserImpl() cp_0;
     apply {
-        cp_0.apply(buffer, hdr);
+        {
+            buffer.emit<ethernet_t>(hdr.ethernet);
+            buffer.emit<ipv4_t>(hdr.ipv4);
+        }
     }
 }
 control EgressDeparserImpl(packet_out buffer, out empty_metadata_t clone_e2e_meta, out empty_metadata_t recirculate_meta, inout headers hdr, in metadata meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd) {
-    @name("cp") CommonDeparserImpl() cp_1;
     apply {
-        cp_1.apply(buffer, hdr);
+        {
+            buffer.emit<ethernet_t>(hdr.ethernet);
+            buffer.emit<ipv4_t>(hdr.ipv4);
+        }
     }
 }
 IngressPipeline<headers, metadata, empty_metadata_t, empty_metadata_t, empty_metadata_t, empty_metadata_t>(IngressParserImpl(), ingress(), IngressDeparserImpl()) ip;
