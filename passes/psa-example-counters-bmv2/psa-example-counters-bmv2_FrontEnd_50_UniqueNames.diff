--- before_pass
+++ after_pass
@@ -76,49 +76,49 @@ parser EgressParserImpl(packet_in buffer
     }
 }
 control ingress(inout headers hdr, inout metadata user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
-    @name("port_bytes_in") Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_in;
-    @name("per_prefix_pkt_byte_count") DirectCounter<PacketByteCounter_t>(PSA_CounterType_t.PACKETS_AND_BYTES) per_prefix_pkt_byte_count;
-    @name("next_hop") action next_hop_0(PortId_t oport) {
-        per_prefix_pkt_byte_count.count();
+    @name("port_bytes_in") Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_in_0;
+    @name("per_prefix_pkt_byte_count") DirectCounter<PacketByteCounter_t>(PSA_CounterType_t.PACKETS_AND_BYTES) per_prefix_pkt_byte_count_0;
+    @name("next_hop") action next_hop(PortId_t oport) {
+        per_prefix_pkt_byte_count_0.count();
         {
-            psa_ingress_output_metadata_t meta_0 = ostd;
-            PortId_t egress_port_0 = oport;
-            meta_0.drop = false;
-            meta_0.multicast_group = (MulticastGroup_t)32w0;
-            meta_0.egress_port = egress_port_0;
-            ostd = meta_0;
+            psa_ingress_output_metadata_t meta_2 = ostd;
+            PortId_t egress_port_1 = oport;
+            meta_2.drop = false;
+            meta_2.multicast_group = (MulticastGroup_t)32w0;
+            meta_2.egress_port = egress_port_1;
+            ostd = meta_2;
         }
     }
-    @name("default_route_drop") action default_route_drop_0() {
-        per_prefix_pkt_byte_count.count();
+    @name("default_route_drop") action default_route_drop() {
+        per_prefix_pkt_byte_count_0.count();
         {
-            psa_ingress_output_metadata_t meta_1 = ostd;
-            meta_1.drop = true;
-            ostd = meta_1;
+            psa_ingress_output_metadata_t meta_3 = ostd;
+            meta_3.drop = true;
+            ostd = meta_3;
         }
     }
-    @name("ipv4_da_lpm") table ipv4_da_lpm {
+    @name("ipv4_da_lpm") table ipv4_da_lpm_0 {
         key = {
             hdr.ipv4.dstAddr: lpm @name("hdr.ipv4.dstAddr") ;
         }
         actions = {
-            next_hop_0();
-            default_route_drop_0();
+            next_hop();
+            default_route_drop();
         }
-        default_action = default_route_drop_0();
-        psa_direct_counter = per_prefix_pkt_byte_count;
+        default_action = default_route_drop();
+        psa_direct_counter = per_prefix_pkt_byte_count_0;
     }
     apply {
-        port_bytes_in.count(istd.ingress_port);
+        port_bytes_in_0.count(istd.ingress_port);
         if (hdr.ipv4.isValid()) {
-            ipv4_da_lpm.apply();
+            ipv4_da_lpm_0.apply();
         }
     }
 }
 control egress(inout headers hdr, inout metadata user_meta, in psa_egress_input_metadata_t istd, inout psa_egress_output_metadata_t ostd) {
-    @name("port_bytes_out") Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_out;
+    @name("port_bytes_out") Counter<ByteCounter_t, PortId_t>(32w512, PSA_CounterType_t.BYTES) port_bytes_out_0;
     apply {
-        port_bytes_out.count(istd.egress_port);
+        port_bytes_out_0.count(istd.egress_port);
     }
 }
 control IngressDeparserImpl(packet_out buffer, out empty_metadata_t clone_i2e_meta, out empty_metadata_t resubmit_meta, out empty_metadata_t normal_meta, inout headers hdr, in metadata meta, in psa_ingress_output_metadata_t istd) {
