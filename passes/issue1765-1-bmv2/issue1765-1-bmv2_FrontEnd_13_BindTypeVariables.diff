--- before_pass
+++ after_pass
@@ -113,7 +113,7 @@ struct metadata {
 }
 parser MyParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     state start {
-        packet.extract(hdr.ethernet);
+        packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.ethertype) {
             16w0x800: ipv4;
             16w0x86dd: ipv6;
@@ -121,7 +121,7 @@ parser MyParser(packet_in packet, out he
         }
     }
     state ipv4 {
-        packet.extract(hdr.ipv4);
+        packet.extract<ipv4_t>(hdr.ipv4);
         meta.tcp_length = hdr.ipv4.totalLen - 16w20;
         transition select(hdr.ipv4.protocol) {
             8w6: tcp;
@@ -131,7 +131,7 @@ parser MyParser(packet_in packet, out he
         }
     }
     state ipv6 {
-        packet.extract(hdr.ipv6);
+        packet.extract<ipv6_t>(hdr.ipv6);
         meta.tcp_length = hdr.ipv6.payload_length;
         transition select(hdr.ipv6.next_header) {
             8w6: tcp;
@@ -141,32 +141,32 @@ parser MyParser(packet_in packet, out he
         }
     }
     state tcp {
-        packet.extract(hdr.tcp);
+        packet.extract<tcp_t>(hdr.tcp);
         transition accept;
     }
     state udp {
-        packet.extract(hdr.udp);
+        packet.extract<udp_t>(hdr.udp);
         transition accept;
     }
     state icmp6 {
-        packet.extract(hdr.icmp6);
+        packet.extract<icmp6_t>(hdr.icmp6);
         transition accept;
     }
     state icmp {
-        packet.extract(hdr.icmp);
+        packet.extract<icmp_t>(hdr.icmp);
         transition accept;
     }
 }
 control MyDeparser(packet_out packet, in headers hdr) {
     apply {
-        packet.emit(hdr.ethernet);
-        packet.emit(hdr.cpu);
-        packet.emit(hdr.ipv4);
-        packet.emit(hdr.ipv6);
-        packet.emit(hdr.tcp);
-        packet.emit(hdr.udp);
-        packet.emit(hdr.icmp);
-        packet.emit(hdr.icmp6);
+        packet.emit<ethernet_t>(hdr.ethernet);
+        packet.emit<cpu_t>(hdr.cpu);
+        packet.emit<ipv4_t>(hdr.ipv4);
+        packet.emit<ipv6_t>(hdr.ipv6);
+        packet.emit<tcp_t>(hdr.tcp);
+        packet.emit<udp_t>(hdr.udp);
+        packet.emit<icmp_t>(hdr.icmp);
+        packet.emit<icmp6_t>(hdr.icmp6);
     }
 }
 control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
@@ -175,7 +175,7 @@ control MyVerifyChecksum(inout headers h
 }
 control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum_with_payload(meta.do_cksum == 1w1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, 8w58 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
+        update_checksum_with_payload<tuple<bit<128>, bit<128>, bit<32>, bit<24>, bit<8>>, bit<16>>(meta.do_cksum == 1w1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, 8w58 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
     }
 }
 control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
@@ -188,12 +188,12 @@ control MyIngress(inout headers hdr, ino
     action controller_debug() {
         meta.task = TASK_DEBUG;
         meta.ingress_port = standard_metadata.ingress_port;
-        clone3(CloneType.I2E, 32w100, meta);
+        clone3<metadata>(CloneType.I2E, 32w100, meta);
     }
     action controller_reply(task_t task) {
         meta.task = task;
         meta.ingress_port = standard_metadata.ingress_port;
-        clone3(CloneType.I2E, 32w100, meta);
+        clone3<metadata>(CloneType.I2E, 32w100, meta);
     }
     action multicast_pkg(mcast_t mcast_grp) {
         standard_metadata.mcast_grp = mcast_grp;
@@ -332,4 +332,4 @@ control MyEgress(inout headers hdr, inou
         }
     }
 }
-V1Switch(MyParser(), MyVerifyChecksum(), MyIngress(), MyEgress(), MyComputeChecksum(), MyDeparser()) main;
+V1Switch<headers, metadata>(MyParser(), MyVerifyChecksum(), MyIngress(), MyEgress(), MyComputeChecksum(), MyDeparser()) main;
