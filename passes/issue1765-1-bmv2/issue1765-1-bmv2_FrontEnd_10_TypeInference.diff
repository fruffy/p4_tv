--- before_pass
+++ after_pass
@@ -19,10 +19,10 @@ const bit<8> ICMP6_ECHO_REQUEST = 8w128;
 const bit<8> ICMP6_ECHO_REPLY = 8w129;
 const bit<8> ICMP6_NS = 8w135;
 const bit<8> ICMP6_NA = 8w136;
-const task_t TASK_ICMP6_NS = 1;
-const task_t TASK_ICMP6_GENERAL = 2;
-const task_t TASK_DEBUG = 3;
-const task_t TASK_ICMP6_REPLY = 4;
+const task_t TASK_ICMP6_NS = (bit<16>)16w1;
+const task_t TASK_ICMP6_GENERAL = (bit<16>)16w2;
+const task_t TASK_DEBUG = (bit<16>)16w3;
+const task_t TASK_ICMP6_REPLY = (bit<16>)16w4;
 header ethernet_t {
     mac_addr_t dst_addr;
     mac_addr_t src_addr;
@@ -175,7 +175,7 @@ control MyVerifyChecksum(inout headers h
 }
 control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum_with_payload(meta.do_cksum == 1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, 8w58 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
+        update_checksum_with_payload(meta.do_cksum == 1w1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, 8w58 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
     }
 }
 control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
@@ -188,12 +188,12 @@ control MyIngress(inout headers hdr, ino
     action controller_debug() {
         meta.task = TASK_DEBUG;
         meta.ingress_port = standard_metadata.ingress_port;
-        clone3(CloneType.I2E, 100, meta);
+        clone3(CloneType.I2E, 32w100, meta);
     }
     action controller_reply(task_t task) {
         meta.task = task;
         meta.ingress_port = standard_metadata.ingress_port;
-        clone3(CloneType.I2E, 100, meta);
+        clone3(CloneType.I2E, 32w100, meta);
     }
     action multicast_pkg(mcast_t mcast_grp) {
         standard_metadata.mcast_grp = mcast_grp;
@@ -212,7 +212,7 @@ control MyIngress(inout headers hdr, ino
         hdr.ipv6.dst_addr = hdr.ipv6.src_addr;
         hdr.ipv6.src_addr = addr_tmp;
         hdr.icmp6.type = 8w129;
-        meta.do_cksum = 1;
+        meta.do_cksum = (bit<1>)1w1;
     }
     table ndp_answer {
         key = {
@@ -323,7 +323,7 @@ control MyIngress(inout headers hdr, ino
 }
 control MyEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     apply {
-        if (standard_metadata.instance_type == 1) {
+        if (standard_metadata.instance_type == 32w1) {
             hdr.cpu.setValid();
             hdr.cpu.task = meta.task;
             hdr.cpu.ethertype = hdr.ethernet.ethertype;
