--- before_pass
+++ after_pass
@@ -6,19 +6,19 @@ typedef bit<128> ipv6_addr_t;
 typedef bit<9> port_t;
 typedef bit<16> mcast_t;
 typedef bit<16> task_t;
-const bit<16> TYPE_IPV4 = 0x800;
-const bit<16> TYPE_IPV6 = 0x86dd;
-const bit<16> TYPE_CPU = 0x4242;
-const bit<16> TYPE_DEBUG = 0x2323;
-const bit<8> PROTO_ICMP = 1;
-const bit<8> PROTO_TCP = 6;
-const bit<8> PROTO_UDP = 17;
-const bit<8> PROTO_ICMP6 = 58;
-const bit<8> TCP_SEQ_LEN = 4;
-const bit<8> ICMP6_ECHO_REQUEST = 128;
-const bit<8> ICMP6_ECHO_REPLY = 129;
-const bit<8> ICMP6_NS = 135;
-const bit<8> ICMP6_NA = 136;
+const bit<16> TYPE_IPV4 = 16w0x800;
+const bit<16> TYPE_IPV6 = 16w0x86dd;
+const bit<16> TYPE_CPU = 16w0x4242;
+const bit<16> TYPE_DEBUG = 16w0x2323;
+const bit<8> PROTO_ICMP = 8w1;
+const bit<8> PROTO_TCP = 8w6;
+const bit<8> PROTO_UDP = 8w17;
+const bit<8> PROTO_ICMP6 = 8w58;
+const bit<8> TCP_SEQ_LEN = 8w4;
+const bit<8> ICMP6_ECHO_REQUEST = 8w128;
+const bit<8> ICMP6_ECHO_REPLY = 8w129;
+const bit<8> ICMP6_NS = 8w135;
+const bit<8> ICMP6_NA = 8w136;
 const task_t TASK_ICMP6_NS = 1;
 const task_t TASK_ICMP6_GENERAL = 2;
 const task_t TASK_DEBUG = 3;
@@ -115,8 +115,8 @@ parser MyParser(packet_in packet, out he
     state start {
         packet.extract(hdr.ethernet);
         transition select(hdr.ethernet.ethertype) {
-            TYPE_IPV4: ipv4;
-            TYPE_IPV6: ipv6;
+            16w0x800: ipv4;
+            16w0x86dd: ipv6;
             default: accept;
         }
     }
@@ -124,9 +124,9 @@ parser MyParser(packet_in packet, out he
         packet.extract(hdr.ipv4);
         meta.tcp_length = hdr.ipv4.totalLen - 16w20;
         transition select(hdr.ipv4.protocol) {
-            PROTO_TCP: tcp;
-            PROTO_UDP: udp;
-            PROTO_ICMP: icmp;
+            8w6: tcp;
+            8w17: udp;
+            8w1: icmp;
             default: accept;
         }
     }
@@ -134,9 +134,9 @@ parser MyParser(packet_in packet, out he
         packet.extract(hdr.ipv6);
         meta.tcp_length = hdr.ipv6.payload_length;
         transition select(hdr.ipv6.next_header) {
-            PROTO_TCP: tcp;
-            PROTO_UDP: udp;
-            PROTO_ICMP6: icmp6;
+            8w6: tcp;
+            8w17: udp;
+            8w58: icmp6;
             default: accept;
         }
     }
@@ -175,7 +175,7 @@ control MyVerifyChecksum(inout headers h
 }
 control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum_with_payload(meta.do_cksum == 1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, PROTO_ICMP6 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
+        update_checksum_with_payload(meta.do_cksum == 1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, 8w58 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
     }
 }
 control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
@@ -202,7 +202,7 @@ control MyIngress(inout headers hdr, ino
         standard_metadata.egress_spec = standard_metadata.ingress_port;
         hdr.ipv6.dst_addr = hdr.ipv6.src_addr;
         hdr.ipv6.src_addr = addr;
-        hdr.icmp6.type = ICMP6_NA;
+        hdr.icmp6.type = 8w136;
     }
     action icmp6_echo_reply() {
         mac_addr_t mac_tmp = hdr.ethernet.dst_addr;
@@ -211,7 +211,7 @@ control MyIngress(inout headers hdr, ino
         ipv6_addr_t addr_tmp = hdr.ipv6.dst_addr;
         hdr.ipv6.dst_addr = hdr.ipv6.src_addr;
         hdr.ipv6.src_addr = addr_tmp;
-        hdr.icmp6.type = ICMP6_ECHO_REPLY;
+        hdr.icmp6.type = 8w129;
         meta.do_cksum = 1;
     }
     table ndp_answer {
@@ -266,11 +266,11 @@ control MyIngress(inout headers hdr, ino
     }
     action icmp6_answer() {
         if (hdr.icmp6.isValid()) {
-            if (hdr.icmp6.code == ICMP6_ECHO_REQUEST) {
+            if (hdr.icmp6.code == 8w128) {
                 ipv6_addr_t tmp = hdr.ipv6.src_addr;
                 hdr.ipv6.src_addr = hdr.ipv6.dst_addr;
                 hdr.ipv6.dst_addr = tmp;
-                hdr.icmp6.code = ICMP6_ECHO_REPLY;
+                hdr.icmp6.code = 8w129;
             }
         }
     }
@@ -328,7 +328,7 @@ control MyEgress(inout headers hdr, inou
             hdr.cpu.task = meta.task;
             hdr.cpu.ethertype = hdr.ethernet.ethertype;
             hdr.cpu.ingress_port = (bit<16>)meta.ingress_port;
-            hdr.ethernet.ethertype = TYPE_CPU;
+            hdr.ethernet.ethertype = 16w0x4242;
         }
     }
 }
