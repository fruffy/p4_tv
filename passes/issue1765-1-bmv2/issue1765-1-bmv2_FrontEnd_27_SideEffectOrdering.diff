--- before_pass
+++ after_pass
@@ -95,7 +95,9 @@ struct metadata {
 }
 parser MyParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     state start {
-        packet.extract<ethernet_t>(hdr.ethernet);
+        {
+            packet.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.ethertype) {
             16w0x800: ipv4;
             16w0x86dd: ipv6;
@@ -103,8 +105,12 @@ parser MyParser(packet_in packet, out he
         }
     }
     state ipv4 {
-        packet.extract<ipv4_t>(hdr.ipv4);
-        meta.tcp_length = hdr.ipv4.totalLen + 16w65516;
+        {
+            packet.extract<ipv4_t>(hdr.ipv4);
+        }
+        {
+            meta.tcp_length = hdr.ipv4.totalLen + 16w65516;
+        }
         transition select(hdr.ipv4.protocol) {
             8w6: tcp;
             8w17: udp;
@@ -113,8 +119,12 @@ parser MyParser(packet_in packet, out he
         }
     }
     state ipv6 {
-        packet.extract<ipv6_t>(hdr.ipv6);
-        meta.tcp_length = hdr.ipv6.payload_length;
+        {
+            packet.extract<ipv6_t>(hdr.ipv6);
+        }
+        {
+            meta.tcp_length = hdr.ipv6.payload_length;
+        }
         transition select(hdr.ipv6.next_header) {
             8w6: tcp;
             8w17: udp;
@@ -123,32 +133,56 @@ parser MyParser(packet_in packet, out he
         }
     }
     state tcp {
-        packet.extract<tcp_t>(hdr.tcp);
+        {
+            packet.extract<tcp_t>(hdr.tcp);
+        }
         transition accept;
     }
     state udp {
-        packet.extract<udp_t>(hdr.udp);
+        {
+            packet.extract<udp_t>(hdr.udp);
+        }
         transition accept;
     }
     state icmp6 {
-        packet.extract<icmp6_t>(hdr.icmp6);
+        {
+            packet.extract<icmp6_t>(hdr.icmp6);
+        }
         transition accept;
     }
     state icmp {
-        packet.extract<icmp_t>(hdr.icmp);
+        {
+            packet.extract<icmp_t>(hdr.icmp);
+        }
         transition accept;
     }
 }
 control MyDeparser(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<cpu_t>(hdr.cpu);
-        packet.emit<ipv4_t>(hdr.ipv4);
-        packet.emit<ipv6_t>(hdr.ipv6);
-        packet.emit<tcp_t>(hdr.tcp);
-        packet.emit<udp_t>(hdr.udp);
-        packet.emit<icmp_t>(hdr.icmp);
-        packet.emit<icmp6_t>(hdr.icmp6);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<cpu_t>(hdr.cpu);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
+        {
+            packet.emit<ipv6_t>(hdr.ipv6);
+        }
+        {
+            packet.emit<tcp_t>(hdr.tcp);
+        }
+        {
+            packet.emit<udp_t>(hdr.udp);
+        }
+        {
+            packet.emit<icmp_t>(hdr.icmp);
+        }
+        {
+            packet.emit<icmp6_t>(hdr.icmp6);
+        }
     }
 }
 control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
@@ -157,34 +191,66 @@ control MyVerifyChecksum(inout headers h
 }
 control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum_with_payload<tuple<bit<128>, bit<128>, bit<32>, bit<24>, bit<8>>, bit<16>>(meta.do_cksum == 1w1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, 8w58 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
+        {
+            update_checksum_with_payload<tuple<bit<128>, bit<128>, bit<32>, bit<24>, bit<8>>, bit<16>>(meta.do_cksum == 1w1, { hdr.ipv6.src_addr, hdr.ipv6.dst_addr, (bit<32>)hdr.ipv6.payload_length, 24w0, 8w58 }, hdr.icmp6.checksum, HashAlgorithm.csum16);
+        }
     }
 }
 control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     mac_addr_t mac_tmp_0;
     ipv6_addr_t addr_tmp_0;
     @name("set_egress_port") action set_egress_port_0(port_t out_port) {
-        standard_metadata.egress_spec = out_port;
+        {
+            standard_metadata.egress_spec = out_port;
+        }
     }
     @name("controller_debug") action controller_debug_0() {
-        meta.task = 16w3;
-        meta.ingress_port = standard_metadata.ingress_port;
-        clone3<metadata>(CloneType.I2E, 32w100, meta);
+        {
+            meta.task = 16w3;
+        }
+        {
+            meta.ingress_port = standard_metadata.ingress_port;
+        }
+        {
+            clone3<metadata>(CloneType.I2E, 32w100, meta);
+        }
     }
     @name("controller_reply") action controller_reply_0(task_t task) {
-        meta.task = task;
-        meta.ingress_port = standard_metadata.ingress_port;
-        clone3<metadata>(CloneType.I2E, 32w100, meta);
+        {
+            meta.task = task;
+        }
+        {
+            meta.ingress_port = standard_metadata.ingress_port;
+        }
+        {
+            clone3<metadata>(CloneType.I2E, 32w100, meta);
+        }
     }
     @name("icmp6_echo_reply") action icmp6_echo_reply_0() {
-        mac_tmp_0 = hdr.ethernet.dst_addr;
-        hdr.ethernet.dst_addr = hdr.ethernet.src_addr;
-        hdr.ethernet.src_addr = mac_tmp_0;
-        addr_tmp_0 = hdr.ipv6.dst_addr;
-        hdr.ipv6.dst_addr = hdr.ipv6.src_addr;
-        hdr.ipv6.src_addr = addr_tmp_0;
-        hdr.icmp6.type = 8w129;
-        meta.do_cksum = 1w1;
+        {
+            mac_tmp_0 = hdr.ethernet.dst_addr;
+        }
+        {
+            hdr.ethernet.dst_addr = hdr.ethernet.src_addr;
+        }
+        {
+            hdr.ethernet.src_addr = mac_tmp_0;
+        }
+        {
+            addr_tmp_0 = hdr.ipv6.dst_addr;
+        }
+        {
+            hdr.ipv6.dst_addr = hdr.ipv6.src_addr;
+        }
+        {
+            hdr.ipv6.src_addr = addr_tmp_0;
+        }
+        {
+            hdr.icmp6.type = 8w129;
+        }
+        {
+            meta.do_cksum = 1w1;
+        }
     }
     @name("v6_addresses") table v6_addresses_0 {
         key = {
@@ -225,8 +291,12 @@ control MyIngress(inout headers hdr, ino
     }
     apply {
         if (hdr.ipv6.isValid()) {
-            v6_addresses_0.apply();
-            v6_networks_0.apply();
+            {
+                v6_addresses_0.apply();
+            }
+            {
+                v6_networks_0.apply();
+            }
         }
         if (hdr.ipv4.isValid()) {
             v4_networks_0.apply();
@@ -236,11 +306,21 @@ control MyIngress(inout headers hdr, ino
 control MyEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     apply {
         if (standard_metadata.instance_type == 32w1) {
-            hdr.cpu.setValid();
-            hdr.cpu.task = meta.task;
-            hdr.cpu.ethertype = hdr.ethernet.ethertype;
-            hdr.cpu.ingress_port = (bit<16>)meta.ingress_port;
-            hdr.ethernet.ethertype = 16w0x4242;
+            {
+                hdr.cpu.setValid();
+            }
+            {
+                hdr.cpu.task = meta.task;
+            }
+            {
+                hdr.cpu.ethertype = hdr.ethernet.ethertype;
+            }
+            {
+                hdr.cpu.ingress_port = (bit<16>)meta.ingress_port;
+            }
+            {
+                hdr.ethernet.ethertype = 16w0x4242;
+            }
         }
     }
 }
