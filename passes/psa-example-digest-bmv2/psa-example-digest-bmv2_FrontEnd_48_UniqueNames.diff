--- before_pass
+++ after_pass
@@ -87,66 +87,66 @@ parser EgressParserImpl(packet_in buffer
     }
 }
 control ingress(inout headers hdr, inout metadata meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
-    @name("unknown_source") action unknown_source_0() {
+    @name("unknown_source") action unknown_source() {
         meta.send_mac_learn_msg = true;
         meta.mac_learn_msg.srcAddr = hdr.ethernet.srcAddr;
         meta.mac_learn_msg.ingress_port = istd.ingress_port;
     }
-    @name("learned_sources") table learned_sources_0 {
+    @name("learned_sources") table learned_sources {
         key = {
             hdr.ethernet.srcAddr: exact @name("hdr.ethernet.srcAddr") ;
         }
         actions = {
             NoAction();
-            unknown_source_0();
+            unknown_source();
         }
-        default_action = unknown_source_0();
+        default_action = unknown_source();
     }
-    @name("do_L2_forward") action do_L2_forward_0(PortId_t egress_port) {
+    @name("do_L2_forward") action do_L2_forward(PortId_t egress_port) {
         {
-            psa_ingress_output_metadata_t meta_1 = ostd;
-            PortId_t egress_port_1 = egress_port;
-            meta_1.drop = false;
-            meta_1.multicast_group = (MulticastGroup_t)32w0;
-            meta_1.egress_port = egress_port_1;
-            ostd = meta_1;
+            psa_ingress_output_metadata_t meta_0 = ostd;
+            PortId_t egress_port_0 = egress_port;
+            meta_0.drop = false;
+            meta_0.multicast_group = (MulticastGroup_t)32w0;
+            meta_0.egress_port = egress_port_0;
+            ostd = meta_0;
         }
     }
-    @name("do_tst") action do_tst_0(PortId_t egress_port, EthTypes serEnumT) {
+    @name("do_tst") action do_tst(PortId_t egress_port, EthTypes serEnumT) {
         {
-            psa_ingress_output_metadata_t meta_2 = ostd;
-            PortId_t egress_port_2 = egress_port;
-            meta_2.drop = false;
-            meta_2.multicast_group = (MulticastGroup_t)32w0;
-            meta_2.egress_port = egress_port_2;
-            ostd = meta_2;
+            psa_ingress_output_metadata_t meta_3 = ostd;
+            PortId_t egress_port_3 = egress_port;
+            meta_3.drop = false;
+            meta_3.multicast_group = (MulticastGroup_t)32w0;
+            meta_3.egress_port = egress_port_3;
+            ostd = meta_3;
         }
     }
-    @name("l2_tbl") table l2_tbl_0 {
+    @name("l2_tbl") table l2_tbl {
         key = {
             hdr.ethernet.dstAddr: exact @name("hdr.ethernet.dstAddr") ;
         }
         actions = {
-            do_L2_forward_0();
+            do_L2_forward();
             NoAction();
         }
         default_action = NoAction();
     }
-    @name("tst_tbl") table tst_tbl_0 {
+    @name("tst_tbl") table tst_tbl {
         key = {
             meta.mac_learn_msg.ingress_port: exact @name("meta.mac_learn_msg.ingress_port") ;
         }
         actions = {
-            do_tst_0();
+            do_tst();
             NoAction();
         }
         default_action = NoAction();
     }
     apply {
         meta.send_mac_learn_msg = false;
-        learned_sources_0.apply();
-        l2_tbl_0.apply();
-        tst_tbl_0.apply();
+        learned_sources.apply();
+        l2_tbl.apply();
+        tst_tbl.apply();
     }
 }
 control egress(inout headers hdr, inout metadata meta, in psa_egress_input_metadata_t istd, inout psa_egress_output_metadata_t ostd) {
@@ -154,10 +154,10 @@ control egress(inout headers hdr, inout
     }
 }
 control IngressDeparserImpl(packet_out packet, out empty_metadata_t clone_i2e_meta, out empty_metadata_t resubmit_meta, out empty_metadata_t normal_meta, inout headers hdr, in metadata meta, in psa_ingress_output_metadata_t istd) {
-    @name("mac_learn_digest") Digest<mac_learn_digest_t>() mac_learn_digest_0;
+    @name("mac_learn_digest") Digest<mac_learn_digest_t>() mac_learn_digest;
     apply {
         if (meta.send_mac_learn_msg) {
-            mac_learn_digest_0.pack(meta.mac_learn_msg);
+            mac_learn_digest.pack(meta.mac_learn_msg);
         }
         packet.emit<ethernet_t>(hdr.ethernet);
         packet.emit<ipv4_t>(hdr.ipv4);
