--- before_pass
+++ after_pass
@@ -37,14 +37,18 @@ struct headers {
 }
 parser MyParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     state start {
-        packet.extract<ethernet_t>(hdr.ethernet);
+        {
+            packet.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        packet.extract<ipv4_t>(hdr.ipv4);
+        {
+            packet.extract<ipv4_t>(hdr.ipv4);
+        }
         transition accept;
     }
 }
@@ -54,10 +58,14 @@ control MyVerifyChecksum(inout headers h
 }
 control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("drop") action drop_0() {
-        mark_to_drop(standard_metadata);
+        {
+            mark_to_drop(standard_metadata);
+        }
     }
     @name("set_dmac") action set_dmac_0(macAddr_t dstAddr) {
-        hdr.ethernet.dstAddr = dstAddr;
+        {
+            hdr.ethernet.dstAddr = dstAddr;
+        }
     }
     @name("forward") table forward_0 {
         key = {
@@ -72,8 +80,12 @@ control MyIngress(inout headers hdr, ino
         default_action = NoAction();
     }
     @name("set_nhop") action set_nhop_0(ip4Addr_t dstAddr, egressSpec_t port) {
-        hdr.ipv4.dstAddr = dstAddr;
-        standard_metadata.egress_spec = port;
+        {
+            hdr.ipv4.dstAddr = dstAddr;
+        }
+        {
+            standard_metadata.egress_spec = port;
+        }
     }
     @name("ipv4_lpm") table ipv4_lpm_0 {
         key = {
@@ -88,19 +100,33 @@ control MyIngress(inout headers hdr, ino
         default_action = NoAction();
     }
     @name("send_digest") action send_digest_0() {
-        meta.test_digest.in_mac_srcAddr = hdr.ethernet.srcAddr;
-        digest<test_digest_t>(32w1, meta.test_digest);
+        {
+            meta.test_digest.in_mac_srcAddr = hdr.ethernet.srcAddr;
+        }
+        {
+            digest<test_digest_t>(32w1, meta.test_digest);
+        }
     }
     apply {
-        ipv4_lpm_0.apply();
-        forward_0.apply();
-        send_digest_0();
+        {
+            ipv4_lpm_0.apply();
+        }
+        {
+            forward_0.apply();
+        }
+        {
+            send_digest_0();
+        }
     }
 }
 control MyEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("rewrite_mac") action rewrite_mac_0(macAddr_t srcAddr) {
-        hdr.ethernet.srcAddr = srcAddr;
-        hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        {
+            hdr.ethernet.srcAddr = srcAddr;
+        }
+        {
+            hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        }
     }
     @name("send_frame") table send_frame_0 {
         key = {
@@ -114,18 +140,26 @@ control MyEgress(inout headers hdr, inou
         default_action = NoAction();
     }
     apply {
-        send_frame_0.apply();
+        {
+            send_frame_0.apply();
+        }
     }
 }
 control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 control MyDeparser(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
     }
 }
 V1Switch<headers, metadata>(MyParser(), MyVerifyChecksum(), MyIngress(), MyEgress(), MyComputeChecksum(), MyDeparser()) main;
