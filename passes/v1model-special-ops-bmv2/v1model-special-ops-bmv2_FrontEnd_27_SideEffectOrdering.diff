--- before_pass
+++ after_pass
@@ -36,41 +36,61 @@ struct headers_t {
     ipv4_t                 ipv4;
 }
 action my_drop(inout standard_metadata_t smeta) {
-    mark_to_drop(smeta);
+    {
+        mark_to_drop(smeta);
+    }
 }
 parser ParserImpl(packet_in packet, out headers_t hdr, inout meta_t meta, inout standard_metadata_t standard_metadata) {
     state start {
-        packet.extract<ethernet_t>(hdr.ethernet);
+        {
+            packet.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        packet.extract<ipv4_t>(hdr.ipv4);
+        {
+            packet.extract<ipv4_t>(hdr.ipv4);
+        }
         transition accept;
     }
 }
 control fill_ipv4_address(out bit<32> ipv4_address, in bit<8> byte0, in bit<8> byte1, in bit<8> byte2, in bit<8> byte3) {
     apply {
-        ipv4_address = byte0 ++ byte1 ++ byte2 ++ byte3;
+        {
+            ipv4_address = byte0 ++ byte1 ++ byte2 ++ byte3;
+        }
     }
 }
 control ingress(inout headers_t hdr, inout meta_t meta, inout standard_metadata_t standard_metadata) {
     @name("c_fill_ipv4_address") fill_ipv4_address() c_fill_ipv4_address_0;
     @name("set_l2ptr") action set_l2ptr_0(bit<32> l2ptr) {
-        meta.fwd.l2ptr = l2ptr;
+        {
+            meta.fwd.l2ptr = l2ptr;
+        }
     }
     @name("set_mcast_grp") action set_mcast_grp_0(bit<16> mcast_grp) {
-        standard_metadata.mcast_grp = mcast_grp;
+        {
+            standard_metadata.mcast_grp = mcast_grp;
+        }
     }
     @name("do_resubmit") action do_resubmit_0(bit<32> new_ipv4_dstAddr) {
-        hdr.ipv4.dstAddr = new_ipv4_dstAddr;
-        resubmit<tuple<>>({  });
+        {
+            hdr.ipv4.dstAddr = new_ipv4_dstAddr;
+        }
+        {
+            resubmit<tuple<>>({  });
+        }
     }
     @name("do_clone_i2e") action do_clone_i2e_0(bit<32> l2ptr) {
-        clone3<tuple<>>(CloneType.I2E, 32w5, {  });
-        meta.fwd.l2ptr = l2ptr;
+        {
+            clone3<tuple<>>(CloneType.I2E, 32w5, {  });
+        }
+        {
+            meta.fwd.l2ptr = l2ptr;
+        }
     }
     @name("ipv4_da_lpm") table ipv4_da_lpm_0 {
         key = {
@@ -86,10 +106,18 @@ control ingress(inout headers_t hdr, ino
         default_action = my_drop(standard_metadata);
     }
     @name("set_bd_dmac_intf") action set_bd_dmac_intf_0(bit<24> bd, bit<48> dmac, bit<9> intf) {
-        meta.fwd.out_bd = bd;
-        hdr.ethernet.dstAddr = dmac;
-        standard_metadata.egress_spec = intf;
-        hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        {
+            meta.fwd.out_bd = bd;
+        }
+        {
+            hdr.ethernet.dstAddr = dmac;
+        }
+        {
+            standard_metadata.egress_spec = intf;
+        }
+        {
+            hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        }
     }
     @name("mac_da") table mac_da_0 {
         key = {
@@ -103,11 +131,19 @@ control ingress(inout headers_t hdr, ino
     }
     apply {
         if (standard_metadata.instance_type == 32w6) {
-            c_fill_ipv4_address_0.apply(hdr.ipv4.srcAddr, 8w10, 8w252, 8w129, 8w2);
-            meta.fwd.l2ptr = 32w0xe50b;
+            {
+                c_fill_ipv4_address_0.apply(hdr.ipv4.srcAddr, 8w10, 8w252, 8w129, 8w2);
+            }
+            {
+                meta.fwd.l2ptr = 32w0xe50b;
+            }
         } else if (standard_metadata.instance_type == 32w4) {
-            c_fill_ipv4_address_0.apply(hdr.ipv4.srcAddr, 8w10, 8w199, 8w86, 8w99);
-            meta.fwd.l2ptr = 32w0xec1c;
+            {
+                c_fill_ipv4_address_0.apply(hdr.ipv4.srcAddr, 8w10, 8w199, 8w86, 8w99);
+            }
+            {
+                meta.fwd.l2ptr = 32w0xec1c;
+            }
         } else {
             ipv4_da_lpm_0.apply();
         }
@@ -118,7 +154,9 @@ control ingress(inout headers_t hdr, ino
 }
 control egress(inout headers_t hdr, inout meta_t meta, inout standard_metadata_t standard_metadata) {
     @name("set_out_bd") action set_out_bd_0(bit<24> bd) {
-        meta.fwd.out_bd = bd;
+        {
+            meta.fwd.out_bd = bd;
+        }
     }
     @name("get_multicast_copy_out_bd") table get_multicast_copy_out_bd_0 {
         key = {
@@ -132,15 +170,25 @@ control egress(inout headers_t hdr, inou
         default_action = NoAction();
     }
     @name("rewrite_mac") action rewrite_mac_0(bit<48> smac) {
-        hdr.ethernet.srcAddr = smac;
+        {
+            hdr.ethernet.srcAddr = smac;
+        }
     }
     @name("do_recirculate") action do_recirculate_0(bit<32> new_ipv4_dstAddr) {
-        hdr.ipv4.dstAddr = new_ipv4_dstAddr;
-        recirculate<tuple<>>({  });
+        {
+            hdr.ipv4.dstAddr = new_ipv4_dstAddr;
+        }
+        {
+            recirculate<tuple<>>({  });
+        }
     }
     @name("do_clone_e2e") action do_clone_e2e_0(bit<48> smac) {
-        hdr.ethernet.srcAddr = smac;
-        clone3<tuple<>>(CloneType.E2E, 32w11, {  });
+        {
+            hdr.ethernet.srcAddr = smac;
+        }
+        {
+            clone3<tuple<>>(CloneType.E2E, 32w11, {  });
+        }
     }
     @name("send_frame") table send_frame_0 {
         key = {
@@ -156,36 +204,60 @@ control egress(inout headers_t hdr, inou
     }
     apply {
         if (standard_metadata.instance_type == 32w1) {
-            hdr.switch_to_cpu.setValid();
-            hdr.switch_to_cpu.word0 = 32w0x12e012e;
-            hdr.switch_to_cpu.word1 = 32w0x5a5a5a5a;
+            {
+                hdr.switch_to_cpu.setValid();
+            }
+            {
+                hdr.switch_to_cpu.word0 = 32w0x12e012e;
+            }
+            {
+                hdr.switch_to_cpu.word1 = 32w0x5a5a5a5a;
+            }
         } else if (standard_metadata.instance_type == 32w2) {
-            hdr.switch_to_cpu.setValid();
-            hdr.switch_to_cpu.word0 = 32w0xe2e0e2e;
-            hdr.switch_to_cpu.word1 = 32w0x5a5a5a5a;
+            {
+                hdr.switch_to_cpu.setValid();
+            }
+            {
+                hdr.switch_to_cpu.word0 = 32w0xe2e0e2e;
+            }
+            {
+                hdr.switch_to_cpu.word1 = 32w0x5a5a5a5a;
+            }
         } else {
             if (standard_metadata.instance_type == 32w5) {
                 get_multicast_copy_out_bd_0.apply();
             }
-            send_frame_0.apply();
+            {
+                send_frame_0.apply();
+            }
         }
     }
 }
 control DeparserImpl(packet_out packet, in headers_t hdr) {
     apply {
-        packet.emit<switch_to_cpu_header_t>(hdr.switch_to_cpu);
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
+        {
+            packet.emit<switch_to_cpu_header_t>(hdr.switch_to_cpu);
+        }
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
     }
 }
 control verifyChecksum(inout headers_t hdr, inout meta_t meta) {
     apply {
-        verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid() && hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid() && hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 control computeChecksum(inout headers_t hdr, inout meta_t meta) {
     apply {
-        update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid() && hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid() && hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 V1Switch<headers_t, meta_t>(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
