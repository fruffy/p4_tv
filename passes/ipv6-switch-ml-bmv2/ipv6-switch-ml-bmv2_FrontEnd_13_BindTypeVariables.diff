--- before_pass
+++ after_pass
@@ -165,14 +165,14 @@ struct metadata_t {
 const bit<32> BMV2_V1MODEL_INSTANCE_TYPE_REPLICATION = 32w5;
 parser MyParser(packet_in packet, out headers hdr, inout metadata_t meta, inout standard_metadata_t standard_metadata) {
     state start {
-        packet.extract(hdr.ethernet);
+        packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             16w0x86dd: ipv6;
             default: accept;
         }
     }
     state ipv6 {
-        packet.extract(hdr.ipv6);
+        packet.extract<ipv6_t>(hdr.ipv6);
         transition select(hdr.ipv6.nextHdr) {
             8w17: parse_udp;
             8w58: icmp6;
@@ -180,11 +180,11 @@ parser MyParser(packet_in packet, out he
         }
     }
     state icmp6 {
-        packet.extract(hdr.icmp6);
+        packet.extract<icmp6_t>(hdr.icmp6);
         transition accept;
     }
     state parse_udp {
-        packet.extract(hdr.udp);
+        packet.extract<udp_t>(hdr.udp);
         transition accept;
     }
 }
@@ -249,10 +249,10 @@ control egress(inout headers hdr, inout
 }
 control MyDeparser(packet_out packet, in headers hdr) {
     apply {
-        packet.emit(hdr.ethernet);
-        packet.emit(hdr.ipv6);
-        packet.emit(hdr.icmp6);
-        packet.emit(hdr.udp);
+        packet.emit<ethernet_t>(hdr.ethernet);
+        packet.emit<ipv6_t>(hdr.ipv6);
+        packet.emit<icmp6_t>(hdr.icmp6);
+        packet.emit<udp_t>(hdr.udp);
     }
 }
 control MyVerifyChecksum(inout headers hdr, inout metadata_t meta) {
@@ -263,4 +263,4 @@ control MyComputeChecksum(inout headers
     apply {
     }
 }
-V1Switch(MyParser(), MyVerifyChecksum(), ingress(), egress(), MyComputeChecksum(), MyDeparser()) main;
+V1Switch<headers, metadata_t>(MyParser(), MyVerifyChecksum(), ingress(), egress(), MyComputeChecksum(), MyDeparser()) main;
