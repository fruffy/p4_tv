--- before_pass
+++ after_pass
@@ -143,16 +143,76 @@ struct fwd_meta_t {
     bit<24> out_bd;
 }
 struct metadata_t {
-    port_t            ingress_port;
-    port_t            egress_port;
-    bit<16>           tcp_length;
-    bit<32>           cast_length;
-    bit<1>            do_cksum;
-    l2_metadata_t     l2_metadata;
-    l3_metadata_t     l3_metadata;
-    ipv6_metadata_t   ipv6_metadata;
-    tunnel_metadata_t tunnel_metadata;
-    fwd_meta_t        fwd;
+    bit<9>   _ingress_port0;
+    bit<9>   _egress_port1;
+    bit<16>  _tcp_length2;
+    bit<32>  _cast_length3;
+    bit<1>   _do_cksum4;
+    bit<48>  _l2_metadata_lkp_mac_sa5;
+    bit<48>  _l2_metadata_lkp_mac_da6;
+    bit<3>   _l2_metadata_lkp_pkt_type7;
+    bit<16>  _l2_metadata_lkp_mac_type8;
+    bit<3>   _l2_metadata_lkp_pcp9;
+    bit<16>  _l2_metadata_l2_nexthop10;
+    bit<2>   _l2_metadata_l2_nexthop_type11;
+    bit<1>   _l2_metadata_l2_redirect12;
+    bit<1>   _l2_metadata_l2_src_miss13;
+    bit<16>  _l2_metadata_l2_src_move14;
+    bit<10>  _l2_metadata_stp_group15;
+    bit<3>   _l2_metadata_stp_state16;
+    bit<16>  _l2_metadata_bd_stats_idx17;
+    bit<1>   _l2_metadata_learning_enabled18;
+    bit<1>   _l2_metadata_port_vlan_mapping_miss19;
+    bit<16>  _l2_metadata_same_if_check20;
+    bit<2>   _l3_metadata_lkp_ip_type21;
+    bit<4>   _l3_metadata_lkp_ip_version22;
+    bit<8>   _l3_metadata_lkp_ip_proto23;
+    bit<8>   _l3_metadata_lkp_dscp24;
+    bit<8>   _l3_metadata_lkp_ip_ttl25;
+    bit<16>  _l3_metadata_lkp_l4_sport26;
+    bit<16>  _l3_metadata_lkp_l4_dport27;
+    bit<16>  _l3_metadata_lkp_outer_l4_sport28;
+    bit<16>  _l3_metadata_lkp_outer_l4_dport29;
+    bit<16>  _l3_metadata_vrf30;
+    bit<10>  _l3_metadata_rmac_group31;
+    bit<1>   _l3_metadata_rmac_hit32;
+    bit<2>   _l3_metadata_urpf_mode33;
+    bit<1>   _l3_metadata_urpf_hit34;
+    bit<1>   _l3_metadata_urpf_check_fail35;
+    bit<16>  _l3_metadata_urpf_bd_group36;
+    bit<1>   _l3_metadata_fib_hit37;
+    bit<16>  _l3_metadata_fib_nexthop38;
+    bit<2>   _l3_metadata_fib_nexthop_type39;
+    bit<16>  _l3_metadata_same_bd_check40;
+    bit<16>  _l3_metadata_nexthop_index41;
+    bit<1>   _l3_metadata_routed42;
+    bit<1>   _l3_metadata_outer_routed43;
+    bit<8>   _l3_metadata_mtu_index44;
+    bit<1>   _l3_metadata_l3_copy45;
+    bit<16>  _l3_metadata_l3_mtu_check46;
+    bit<16>  _l3_metadata_egress_l4_sport47;
+    bit<16>  _l3_metadata_egress_l4_dport48;
+    bit<128> _ipv6_metadata_lkp_ipv6_sa49;
+    bit<128> _ipv6_metadata_lkp_ipv6_da50;
+    bit<1>   _ipv6_metadata_ipv6_unicast_enabled51;
+    bit<1>   _ipv6_metadata_ipv6_src_is_link_local52;
+    bit<2>   _ipv6_metadata_ipv6_urpf_mode53;
+    bit<5>   _tunnel_metadata_ingress_tunnel_type54;
+    bit<24>  _tunnel_metadata_tunnel_vni55;
+    bit<5>   _tunnel_metadata_egress_tunnel_type56;
+    bit<14>  _tunnel_metadata_tunnel_index57;
+    bit<9>   _tunnel_metadata_tunnel_src_index58;
+    bit<9>   _tunnel_metadata_tunnel_smac_index59;
+    bit<14>  _tunnel_metadata_tunnel_dst_index60;
+    bit<14>  _tunnel_metadata_tunnel_dmac_index61;
+    bit<24>  _tunnel_metadata_vnid62;
+    bit<1>   _tunnel_metadata_tunnel_terminate63;
+    bit<1>   _tunnel_metadata_tunnel_if_check64;
+    bit<4>   _tunnel_metadata_egress_header_count65;
+    bit<8>   _tunnel_metadata_inner_ip_proto66;
+    bit<1>   _tunnel_metadata_skip_encap_inner67;
+    bit<32>  _fwd_l2ptr68;
+    bit<24>  _fwd_out_bd69;
 }
 parser MyParser(packet_in packet, out headers hdr, inout metadata_t meta, inout standard_metadata_t standard_metadata) {
     state start {
@@ -184,7 +244,7 @@ control ingress(inout headers hdr, inout
     }
     @name("ingress.set_mcast_grp") action set_mcast_grp(bit<16> mcast_grp, bit<9> port) {
         standard_metadata.mcast_grp = mcast_grp;
-        meta.egress_port = port;
+        meta._egress_port1 = port;
     }
     bool key_0;
     @name("ingress.ipv6_tbl") table ipv6_tbl_0 {
@@ -208,7 +268,7 @@ control egress(inout headers hdr, inout
     @name(".NoAction") action NoAction_1() {
     }
     @name("egress.set_out_bd") action set_out_bd(bit<24> bd) {
-        meta.fwd.out_bd = bd;
+        meta._fwd_out_bd69 = bd;
     }
     @name("egress.get_multicast_copy_out_bd") table get_multicast_copy_out_bd_0 {
         key = {
@@ -229,7 +289,7 @@ control egress(inout headers hdr, inout
     }
     @name("egress.send_frame") table send_frame_0 {
         key = {
-            meta.fwd.out_bd: exact @name("meta.fwd.out_bd") ;
+            meta._fwd_out_bd69: exact @name("meta.fwd.out_bd") ;
         }
         actions = {
             rewrite_mac();
