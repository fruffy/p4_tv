--- before_pass
+++ after_pass
@@ -56,11 +56,11 @@ struct metadata {
     mystruct1_t mystruct1;
 }
 parser parserI(packet_in pkt, out headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
-    IPv4_up_to_ihl_only_h tmp_4;
-    bit<9> tmp_5;
-    bit<9> tmp_6;
-    bit<9> tmp_7;
-    bit<32> tmp_8;
+    IPv4_up_to_ihl_only_h tmp;
+    bit<9> tmp_0;
+    bit<9> tmp_1;
+    bit<9> tmp_2;
+    bit<32> tmp_3;
     state start {
         pkt.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
@@ -69,12 +69,12 @@ parser parserI(packet_in pkt, out header
         }
     }
     state parse_ipv4 {
-        tmp_4 = pkt.lookahead<IPv4_up_to_ihl_only_h>();
-        tmp_5 = (bit<9>)tmp_4.ihl << 2;
-        tmp_6 = tmp_5 + 9w492;
-        tmp_7 = tmp_6 << 3;
-        tmp_8 = (bit<32>)tmp_7;
-        pkt.extract<ipv4_t>(hdr.ipv4, tmp_8);
+        tmp = pkt.lookahead<IPv4_up_to_ihl_only_h>();
+        tmp_0 = (bit<9>)tmp.ihl << 2;
+        tmp_1 = tmp_0 + 9w492;
+        tmp_2 = tmp_1 << 3;
+        tmp_3 = (bit<32>)tmp_2;
+        pkt.extract<ipv4_t>(hdr.ipv4, tmp_3);
         verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
         verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
         transition select(hdr.ipv4.protocol) {
@@ -88,22 +88,22 @@ parser parserI(packet_in pkt, out header
     }
 }
 control cIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
-    @name("foo") action foo_0() {
+    @name("foo") action foo() {
         hdr.tcp.srcPort = hdr.tcp.srcPort + 16w1;
         hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
         hdr.ipv4.dstAddr = hdr.ipv4.dstAddr + 32w4;
     }
-    @name("guh") table guh {
+    @name("guh") table guh_0 {
         key = {
             hdr.tcp.dstPort: exact @name("hdr.tcp.dstPort") ;
         }
         actions = {
-            foo_0();
+            foo();
         }
-        default_action = foo_0();
+        default_action = foo();
     }
     apply {
-        guh.apply();
+        guh_0.apply();
     }
 }
 control cEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
