--- before_pass
+++ after_pass
@@ -61,16 +61,16 @@ parser parserI(packet_in pkt, out header
     state start {
         pkt.extract(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
-            0x800: parse_ipv4;
+            16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        pkt.extract(hdr.ipv4, (bit<32>)(8 * (4 * (bit<9>)(pkt.lookahead<IPv4_up_to_ihl_only_h>()).ihl - 20)));
+        pkt.extract(hdr.ipv4, (bit<32>)(9w8 * (9w4 * (bit<9>)(pkt.lookahead<IPv4_up_to_ihl_only_h>()).ihl - 9w20)));
         verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
         verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
         transition select(hdr.ipv4.protocol) {
-            6: parse_tcp;
+            8w6: parse_tcp;
             default: accept;
         }
     }
@@ -81,9 +81,9 @@ parser parserI(packet_in pkt, out header
 }
 control cIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
     action foo() {
-        hdr.tcp.srcPort = hdr.tcp.srcPort + 1;
-        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
-        hdr.ipv4.dstAddr = hdr.ipv4.dstAddr + 4;
+        hdr.tcp.srcPort = hdr.tcp.srcPort + 16w1;
+        hdr.ipv4.ttl = hdr.ipv4.ttl - 8w1;
+        hdr.ipv4.dstAddr = hdr.ipv4.dstAddr + 32w4;
     }
     table guh {
         key = {
