--- before_pass
+++ after_pass
@@ -12,13 +12,13 @@ parser p1(packet_in p, out Header h) {
     bool c;
     bool d;
     state start {
-        h.data1 = 0;
+        h.data1 = (bit<32>)32w0;
         func(h);
         g(h.data2, g(h.data2, h.data2));
         transition next;
     }
     state next {
-        h.data2 = h.data3 + 1;
+        h.data2 = h.data3 + 32w1;
         stack[0] = stack[1];
         b = stack[1].isValid();
         transition select(h.isValid()) {
@@ -43,13 +43,13 @@ parser p1(packet_in p, out Header h) {
 }
 control c(out bit<32> v) {
     bit<32> b;
-    bit<32> d = 1;
+    bit<32> d = (bit<32>)32w1;
     bit<32> setByAction;
     action a1() {
-        setByAction = 1;
+        setByAction = (bit<32>)32w1;
     }
     action a2() {
-        setByAction = 1;
+        setByAction = (bit<32>)32w1;
     }
     table t {
         actions = {
@@ -59,17 +59,17 @@ control c(out bit<32> v) {
         default_action = a1();
     }
     apply {
-        b = b + 1;
-        d = d + 1;
+        b = b + 32w1;
+        d = d + 32w1;
         bit<32> e;
         bit<32> f;
-        if (e > 0) {
-            e = 1;
-            f = 2;
+        if (e > 32w0) {
+            e = (bit<32>)32w1;
+            f = (bit<32>)32w2;
         } else {
-            f = 3;
+            f = (bit<32>)32w3;
         }
-        e = e + 1;
+        e = e + 32w1;
         bool touched;
         switch (t.apply().action_run) {
             a1: {
@@ -77,12 +77,12 @@ control c(out bit<32> v) {
             }
         }
         touched = !touched;
-        if (e > 0) {
+        if (e > 32w0) {
             t.apply();
         } else {
             a1();
         }
-        setByAction = setByAction + 1;
+        setByAction = setByAction + 32w1;
     }
 }
 parser proto(packet_in p, out Header h);
