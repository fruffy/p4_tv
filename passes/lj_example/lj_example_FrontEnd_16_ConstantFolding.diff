--- before_pass
+++ after_pass
@@ -4,14 +4,14 @@ const PortId REAL_PORT_COUNT = 4w8;
 struct InControl {
     PortId inputPort;
 }
-const PortId RECIRCULATE_IN_PORT = (bit<4>)4w0xd;
-const PortId CPU_IN_PORT = (bit<4>)4w0xe;
+const PortId RECIRCULATE_IN_PORT = 4w0xd;
+const PortId CPU_IN_PORT = 4w0xe;
 struct OutControl {
     PortId outputPort;
 }
-const PortId DROP_PORT = (bit<4>)4w0xf;
-const PortId CPU_OUT_PORT = (bit<4>)4w0xe;
-const PortId RECIRCULATE_OUT_PORT = (bit<4>)4w0xd;
+const PortId DROP_PORT = 4w0xf;
+const PortId CPU_OUT_PORT = 4w0xe;
+const PortId RECIRCULATE_OUT_PORT = 4w0xd;
 parser Parser<H>(packet_in b, out H parsedHeaders);
 control Pipe<H>(inout H headers, in error parseError, in InControl inCtrl, out OutControl outCtrl);
 control Deparser<H>(inout H outputHeaders, packet_out b);
@@ -38,10 +38,10 @@ parser LJparse(packet_in b, out Parsed_r
 }
 control LjPipe(inout Parsed_rep p, in error parseError, in InControl inCtrl, out OutControl outCtrl) {
     action Drop_action(out PortId port) {
-        port = DROP_PORT;
+        port = 4w0xf;
     }
     action Drop_1() {
-        outCtrl.outputPort = DROP_PORT;
+        outCtrl.outputPort = 4w0xf;
     }
     action Forward(PortId outPort) {
         outCtrl.outputPort = outPort;
@@ -58,7 +58,7 @@ control LjPipe(inout Parsed_rep p, in er
         default_action = Drop_1();
     }
     apply {
-        outCtrl.outputPort = DROP_PORT;
+        outCtrl.outputPort = 4w0xf;
         if (p.arpa_pak.isValid()) {
             Enet_lkup.apply();
         }
