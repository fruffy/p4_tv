--- before_pass
+++ after_pass
@@ -32,26 +32,38 @@ extern E {
     E();
     void g();
 }
-parser subParser(packet_in packet, inout ethernet_t eth, inout ipv4_t ipv4) {
-    @name("ipv4_ethertypes") value_set<bit<16>>(8) ipv4_ethertypes_0;
+parser parserImpl(packet_in packet, out headers_t hdr, inout metadata_t meta, inout standard_metadata_t stdmeta) {
+    @name("p1.ipv4_ethertypes") value_set<bit<16>>(8) p1_ipv4_ethertypes;
+    @name("p2.ipv4_ethertypes") value_set<bit<16>>(8) p2_ipv4_ethertypes;
     state start {
-        packet.extract<ethernet_t>(eth);
-        transition select(eth.etherType) {
-            ipv4_ethertypes_0: parse_ipv4;
-            default: accept;
+        transition subParser_start;
+    }
+    state subParser_start {
+        packet.extract<ethernet_t>(hdr.ethernet_1);
+        transition select(hdr.ethernet_1.etherType) {
+            p1_ipv4_ethertypes: subParser_parse_ipv4;
+            default: start_0;
         }
     }
-    state parse_ipv4 {
-        packet.extract<ipv4_t>(ipv4);
-        transition accept;
+    state subParser_parse_ipv4 {
+        packet.extract<ipv4_t>(hdr.ipv4_1);
+        transition start_0;
     }
-}
-parser parserImpl(packet_in packet, out headers_t hdr, inout metadata_t meta, inout standard_metadata_t stdmeta) {
-    @name("p1") subParser() p1_0;
-    @name("p2") subParser() p2_0;
-    state start {
-        p1_0.apply(packet, hdr.ethernet_1, hdr.ipv4_1);
-        p2_0.apply(packet, hdr.ethernet_2, hdr.ipv4_2);
+    state start_0 {
+        transition subParser_start_0;
+    }
+    state subParser_start_0 {
+        packet.extract<ethernet_t>(hdr.ethernet_2);
+        transition select(hdr.ethernet_2.etherType) {
+            p2_ipv4_ethertypes: subParser_parse_ipv4_0;
+            default: start_1;
+        }
+    }
+    state subParser_parse_ipv4_0 {
+        packet.extract<ipv4_t>(hdr.ipv4_2);
+        transition start_1;
+    }
+    state start_1 {
         transition accept;
     }
 }
