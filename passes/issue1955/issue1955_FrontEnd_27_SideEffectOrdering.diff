--- before_pass
+++ after_pass
@@ -35,14 +35,18 @@ extern E {
 parser subParser(packet_in packet, inout ethernet_t eth, inout ipv4_t ipv4) {
     @name("ipv4_ethertypes") value_set<bit<16>>(8) ipv4_ethertypes_0;
     state start {
-        packet.extract<ethernet_t>(eth);
+        {
+            packet.extract<ethernet_t>(eth);
+        }
         transition select(eth.etherType) {
             ipv4_ethertypes_0: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        packet.extract<ipv4_t>(ipv4);
+        {
+            packet.extract<ipv4_t>(ipv4);
+        }
         transition accept;
     }
 }
@@ -50,8 +54,12 @@ parser parserImpl(packet_in packet, out
     @name("p1") subParser() p1_0;
     @name("p2") subParser() p2_0;
     state start {
-        p1_0.apply(packet, hdr.ethernet_1, hdr.ipv4_1);
-        p2_0.apply(packet, hdr.ethernet_2, hdr.ipv4_2);
+        {
+            p1_0.apply(packet, hdr.ethernet_1, hdr.ipv4_1);
+        }
+        {
+            p2_0.apply(packet, hdr.ethernet_2, hdr.ipv4_2);
+        }
         transition accept;
     }
 }
@@ -73,10 +81,18 @@ control updateChecksum(inout headers_t h
 }
 control deparserImpl(packet_out packet, in headers_t hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet_1);
-        packet.emit<ipv4_t>(hdr.ipv4_1);
-        packet.emit<ethernet_t>(hdr.ethernet_2);
-        packet.emit<ipv4_t>(hdr.ipv4_2);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet_1);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4_1);
+        }
+        {
+            packet.emit<ethernet_t>(hdr.ethernet_2);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4_2);
+        }
     }
 }
 V1Switch<headers_t, metadata_t>(parserImpl(), verifyChecksum(), ingressImpl(), egressImpl(), updateChecksum(), deparserImpl()) main;
