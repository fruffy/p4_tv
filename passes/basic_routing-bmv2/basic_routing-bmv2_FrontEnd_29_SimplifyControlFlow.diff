--- before_pass
+++ after_pass
@@ -33,15 +33,11 @@ struct headers {
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     state parse_ipv4 {
-        {
-            packet.extract<ipv4_t>(hdr = hdr.ipv4);
-        }
+        packet.extract<ipv4_t>(hdr = hdr.ipv4);
         transition accept;
     }
     state start {
-        {
-            packet.extract<ethernet_t>(hdr = hdr.ethernet);
-        }
+        packet.extract<ethernet_t>(hdr = hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
@@ -52,12 +48,8 @@ control egress(inout headers hdr, inout
     @name("on_miss") action on_miss_0() {
     }
     @name("rewrite_src_dst_mac") action rewrite_src_dst_mac_0(bit<48> smac, bit<48> dmac) {
-        {
-            hdr.ethernet.srcAddr = smac;
-        }
-        {
-            hdr.ethernet.dstAddr = dmac;
-        }
+        hdr.ethernet.srcAddr = smac;
+        hdr.ethernet.dstAddr = dmac;
     }
     @name("rewrite_mac") table rewrite_mac_0 {
         actions = {
@@ -72,36 +64,24 @@ control egress(inout headers hdr, inout
         default_action = NoAction();
     }
     apply {
-        {
-            rewrite_mac_0.apply();
-        }
+        rewrite_mac_0.apply();
     }
 }
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("set_vrf") action set_vrf_0(bit<12> vrf) {
-        {
-            meta.ingress_metadata.vrf = vrf;
-        }
+        meta.ingress_metadata.vrf = vrf;
     }
     @name("on_miss") action on_miss_1() {
     }
     @name("fib_hit_nexthop") action fib_hit_nexthop_0(bit<16> nexthop_index) {
-        {
-            meta.ingress_metadata.nexthop_index = nexthop_index;
-        }
-        {
-            hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
-        }
+        meta.ingress_metadata.nexthop_index = nexthop_index;
+        hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
     }
     @name("set_egress_details") action set_egress_details_0(bit<9> egress_spec) {
-        {
-            standard_metadata.egress_spec = egress_spec;
-        }
+        standard_metadata.egress_spec = egress_spec;
     }
     @name("set_bd") action set_bd_0(bit<16> bd) {
-        {
-            meta.ingress_metadata.bd = bd;
-        }
+        meta.ingress_metadata.bd = bd;
     }
     @name("bd") table bd_0 {
         actions = {
@@ -165,47 +145,31 @@ control ingress(inout headers hdr, inout
     }
     apply {
         if (hdr.ipv4.isValid()) {
-            {
-                port_mapping_0.apply();
-            }
-            {
-                bd_0.apply();
-            }
+            port_mapping_0.apply();
+            bd_0.apply();
             switch (ipv4_fib_0.apply().action_run) {
                 on_miss_1: {
-                    {
-                        ipv4_fib_lpm_0.apply();
-                    }
+                    ipv4_fib_lpm_0.apply();
                 }
             }
-            {
-                nexthop_0.apply();
-            }
+            nexthop_0.apply();
         }
     }
 }
 control DeparserImpl(packet_out packet, in headers hdr) {
     apply {
-        {
-            packet.emit<ethernet_t>(hdr = hdr.ethernet);
-        }
-        {
-            packet.emit<ipv4_t>(hdr = hdr.ipv4);
-        }
+        packet.emit<ethernet_t>(hdr = hdr.ethernet);
+        packet.emit<ipv4_t>(hdr = hdr.ipv4);
     }
 }
 control verifyChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        {
-            verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(data = { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, checksum = hdr.ipv4.hdrChecksum, condition = true, algo = HashAlgorithm.csum16);
-        }
+        verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(data = { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, checksum = hdr.ipv4.hdrChecksum, condition = true, algo = HashAlgorithm.csum16);
     }
 }
 control computeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        {
-            update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(condition = true, data = { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, algo = HashAlgorithm.csum16, checksum = hdr.ipv4.hdrChecksum);
-        }
+        update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(condition = true, data = { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, algo = HashAlgorithm.csum16, checksum = hdr.ipv4.hdrChecksum);
     }
 }
 V1Switch<headers, metadata>(p = ParserImpl(), ig = ingress(), vr = verifyChecksum(), eg = egress(), ck = computeChecksum(), dep = DeparserImpl()) main;
