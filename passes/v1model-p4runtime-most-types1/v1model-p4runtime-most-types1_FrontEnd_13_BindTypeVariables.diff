--- before_pass
+++ after_pass
@@ -126,21 +126,21 @@ parser ParserImpl(packet_in packet, out
         }
     }
     state parse_packet_out_header {
-        packet.extract(hdr.packet_out);
+        packet.extract<packet_out_header_t>(hdr.packet_out);
         transition select(hdr.packet_out.addr0, hdr.packet_out.e, hdr.packet_out.e0, hdr.packet_out.e00) {
             valueset1: accept;
             default: parse_ethernet;
         }
     }
     state parse_ethernet {
-        packet.extract(hdr.ethernet);
+        packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             16w0xdead: parse_custom;
             default: accept;
         }
     }
     state parse_custom {
-        packet.extract(hdr.custom);
+        packet.extract<custom_t>(hdr.custom);
         transition accept;
     }
 }
@@ -226,18 +226,18 @@ control egress(inout headers_t hdr, inou
 }
 control DeparserImpl(packet_out packet, in headers_t hdr) {
     apply {
-        packet.emit(hdr.ethernet);
-        packet.emit(hdr.custom);
+        packet.emit<ethernet_t>(hdr.ethernet);
+        packet.emit<custom_t>(hdr.custom);
     }
 }
 control verifyChecksum(inout headers_t hdr, inout metadata_t meta) {
     apply {
-        verify_checksum(hdr.custom.isValid(), { hdr.custom.addr0, hdr.custom.addr1, hdr.custom.addr2, hdr.custom.e, hdr.custom.e0, hdr.custom.e1, hdr.custom.e2, hdr.custom.e00, hdr.custom.e01, hdr.custom.e02, hdr.custom.e10, hdr.custom.e11, hdr.custom.e12, hdr.custom.e20, hdr.custom.e21, hdr.custom.e22, hdr.custom.e001, hdr.custom.e002, hdr.custom.e101, hdr.custom.e102, hdr.custom.e201, hdr.custom.e202, hdr.custom.e220, hdr.custom.e0020010, hdr.custom.e0020020, hdr.custom.s0 }, hdr.custom.checksum, HashAlgorithm.csum16);
+        verify_checksum<tuple<bit<48>, Eth1_t, Eth2_t, bit<8>, bit<8>, Custom1_t, Custom2_t, bit<8>, Custom01_t, Custom02_t, Custom1_t, Custom11_t, Custom12_t, Custom2_t, Custom21_t, Custom22_t, Custom001_t, Custom002_t, Custom101_t, Custom102_t, Custom201_t, Custom202_t, Custom22_t, Custom002001_t, Custom002002_t, serenum_t>, bit<16>>(hdr.custom.isValid(), { hdr.custom.addr0, hdr.custom.addr1, hdr.custom.addr2, hdr.custom.e, hdr.custom.e0, hdr.custom.e1, hdr.custom.e2, hdr.custom.e00, hdr.custom.e01, hdr.custom.e02, hdr.custom.e10, hdr.custom.e11, hdr.custom.e12, hdr.custom.e20, hdr.custom.e21, hdr.custom.e22, hdr.custom.e001, hdr.custom.e002, hdr.custom.e101, hdr.custom.e102, hdr.custom.e201, hdr.custom.e202, hdr.custom.e220, hdr.custom.e0020010, hdr.custom.e0020020, hdr.custom.s0 }, hdr.custom.checksum, HashAlgorithm.csum16);
     }
 }
 control computeChecksum(inout headers_t hdr, inout metadata_t meta) {
     apply {
-        update_checksum(hdr.custom.isValid(), { hdr.custom.addr0, hdr.custom.addr1, hdr.custom.addr2, hdr.custom.e, hdr.custom.e0, hdr.custom.e1, hdr.custom.e2, hdr.custom.e00, hdr.custom.e01, hdr.custom.e02, hdr.custom.e10, hdr.custom.e11, hdr.custom.e12, hdr.custom.e20, hdr.custom.e21, hdr.custom.e22, hdr.custom.e001, hdr.custom.e002, hdr.custom.e101, hdr.custom.e102, hdr.custom.e201, hdr.custom.e202, hdr.custom.e220, hdr.custom.e0020010, hdr.custom.e0020020, hdr.custom.s0 }, hdr.custom.checksum, HashAlgorithm.csum16);
+        update_checksum<tuple<bit<48>, Eth1_t, Eth2_t, bit<8>, bit<8>, Custom1_t, Custom2_t, bit<8>, Custom01_t, Custom02_t, Custom1_t, Custom11_t, Custom12_t, Custom2_t, Custom21_t, Custom22_t, Custom001_t, Custom002_t, Custom101_t, Custom102_t, Custom201_t, Custom202_t, Custom22_t, Custom002001_t, Custom002002_t, serenum_t>, bit<16>>(hdr.custom.isValid(), { hdr.custom.addr0, hdr.custom.addr1, hdr.custom.addr2, hdr.custom.e, hdr.custom.e0, hdr.custom.e1, hdr.custom.e2, hdr.custom.e00, hdr.custom.e01, hdr.custom.e02, hdr.custom.e10, hdr.custom.e11, hdr.custom.e12, hdr.custom.e20, hdr.custom.e21, hdr.custom.e22, hdr.custom.e001, hdr.custom.e002, hdr.custom.e101, hdr.custom.e102, hdr.custom.e201, hdr.custom.e202, hdr.custom.e220, hdr.custom.e0020010, hdr.custom.e0020020, hdr.custom.s0 }, hdr.custom.checksum, HashAlgorithm.csum16);
     }
 }
-V1Switch(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
+V1Switch<headers_t, metadata_t>(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
