--- before_pass
+++ after_pass
@@ -1,13 +1,13 @@
 #include <core.p4>
 #include <v1model.p4>
 enum bit<16> EthTypes {
-    IPv4 = 0x800,
-    ARP = 0x806,
-    RARP = 0x8035,
-    EtherTalk = 0x809b,
-    VLAN = 0x8100,
-    IPX = 0x8137,
-    IPv6 = 0x86dd
+    IPv4 = 16w0x800,
+    ARP = 16w0x806,
+    RARP = 16w0x8035,
+    EtherTalk = 16w0x809b,
+    VLAN = 16w0x8100,
+    IPX = 16w0x8137,
+    IPv6 = 16w0x86dd
 }
 struct alt_t {
     bit<1>   valid;
@@ -44,8 +44,8 @@ parser parse(packet_in pk, out parsed_pa
 control ingress(inout parsed_packet_t h, inout local_metadata_t local_metadata, inout standard_metadata_t standard_metadata) {
     bitvec_hdr bh;
     action do_act() {
-        h.bvh1.row.alt1.valid = 0;
-        local_metadata.row0.alt0.valid = 0;
+        h.bvh1.row.alt1.valid = (bit<1>)1w0;
+        local_metadata.row0.alt0.valid = (bit<1>)1w0;
     }
     table tns {
         key = {
@@ -64,7 +64,7 @@ control ingress(inout parsed_packet_t h,
         bh.row.alt1.type = EthTypes.IPv4;
         h.bvh0.row.alt1.type = bh.row.alt1.type;
         local_metadata.row0.alt0.useHash = true;
-        clone3(CloneType.I2E, 0, local_metadata.row0);
+        clone3(CloneType.I2E, 32w0, local_metadata.row0);
     }
 }
 control egress(inout parsed_packet_t hdr, inout local_metadata_t local_metadata, inout standard_metadata_t standard_metadata) {
