--- before_pass
+++ after_pass
@@ -36,16 +36,24 @@ struct parsed_packet_t {
 }
 parser parse(packet_in pk, out parsed_packet_t h, inout local_metadata_t local_metadata, inout standard_metadata_t standard_metadata) {
     state start {
-        pk.extract<bitvec_hdr>(h.bvh0);
-        pk.extract<bitvec_hdr>(h.bvh1);
+        {
+            pk.extract<bitvec_hdr>(h.bvh0);
+        }
+        {
+            pk.extract<bitvec_hdr>(h.bvh1);
+        }
         transition accept;
     }
 }
 control ingress(inout parsed_packet_t h, inout local_metadata_t local_metadata, inout standard_metadata_t standard_metadata) {
     bitvec_hdr bh_0;
     @name("do_act") action do_act_0() {
-        h.bvh1.row.alt1.valid = 1w0;
-        local_metadata.row0.alt0.valid = 1w0;
+        {
+            h.bvh1.row.alt1.valid = 1w0;
+        }
+        {
+            local_metadata.row0.alt0.valid = 1w0;
+        }
     }
     @name("tns") table tns_0 {
         key = {
@@ -59,12 +67,24 @@ control ingress(inout parsed_packet_t h,
         default_action = NoAction();
     }
     apply {
-        tns_0.apply();
-        bh_0.row.alt0.useHash = h.bvh0.row.alt0.useHash;
-        bh_0.row.alt1.type = EthTypes.IPv4;
-        h.bvh0.row.alt1.type = bh_0.row.alt1.type;
-        local_metadata.row0.alt0.useHash = true;
-        clone3<row_t>(CloneType.I2E, 32w0, local_metadata.row0);
+        {
+            tns_0.apply();
+        }
+        {
+            bh_0.row.alt0.useHash = h.bvh0.row.alt0.useHash;
+        }
+        {
+            bh_0.row.alt1.type = EthTypes.IPv4;
+        }
+        {
+            h.bvh0.row.alt1.type = bh_0.row.alt1.type;
+        }
+        {
+            local_metadata.row0.alt0.useHash = true;
+        }
+        {
+            clone3<row_t>(CloneType.I2E, 32w0, local_metadata.row0);
+        }
     }
 }
 control egress(inout parsed_packet_t hdr, inout local_metadata_t local_metadata, inout standard_metadata_t standard_metadata) {
@@ -73,8 +93,12 @@ control egress(inout parsed_packet_t hdr
 }
 control deparser(packet_out b, in parsed_packet_t h) {
     apply {
-        b.emit<bitvec_hdr>(h.bvh0);
-        b.emit<bitvec_hdr>(h.bvh1);
+        {
+            b.emit<bitvec_hdr>(h.bvh0);
+        }
+        {
+            b.emit<bitvec_hdr>(h.bvh1);
+        }
     }
 }
 control verifyChecksum(inout parsed_packet_t hdr, inout local_metadata_t local_metadata) {
