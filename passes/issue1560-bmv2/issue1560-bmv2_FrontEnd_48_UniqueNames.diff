--- before_pass
+++ after_pass
@@ -57,11 +57,11 @@ struct metadata {
     bit<16>     hash1;
 }
 parser parserI(packet_in pkt, out headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
-    IPv4_up_to_ihl_only_h tmp;
-    bit<9> tmp_0;
-    bit<9> tmp_1;
-    bit<9> tmp_2;
-    bit<32> tmp_3;
+    IPv4_up_to_ihl_only_h tmp_4;
+    bit<9> tmp_5;
+    bit<9> tmp_6;
+    bit<9> tmp_7;
+    bit<32> tmp_8;
     state start {
         pkt.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
@@ -70,12 +70,12 @@ parser parserI(packet_in pkt, out header
         }
     }
     state parse_ipv4 {
-        tmp = pkt.lookahead<IPv4_up_to_ihl_only_h>();
-        tmp_0 = (bit<9>)tmp.ihl << 2;
-        tmp_1 = tmp_0 + 9w492;
-        tmp_2 = tmp_1 << 3;
-        tmp_3 = (bit<32>)tmp_2;
-        pkt.extract<ipv4_t>(hdr.ipv4, tmp_3);
+        tmp_4 = pkt.lookahead<IPv4_up_to_ihl_only_h>();
+        tmp_5 = (bit<9>)tmp_4.ihl << 2;
+        tmp_6 = tmp_5 + 9w492;
+        tmp_7 = tmp_6 << 3;
+        tmp_8 = (bit<32>)tmp_7;
+        pkt.extract<ipv4_t>(hdr.ipv4, tmp_8);
         verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
         verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
         transition select(hdr.ipv4.protocol) {
@@ -89,40 +89,40 @@ parser parserI(packet_in pkt, out header
     }
 }
 control cIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
-    @name("foo1") action foo1_0(IPv4Address dstAddr) {
+    @name("foo1") action foo1(IPv4Address dstAddr) {
         hdr.ipv4.dstAddr = dstAddr;
     }
-    @name("foo2") action foo2_0(IPv4Address srcAddr) {
+    @name("foo2") action foo2(IPv4Address srcAddr) {
         hdr.ipv4.srcAddr = srcAddr;
     }
-    @name("t0") table t0_0 {
+    @name("t0") table t0 {
         key = {
             hdr.tcp.dstPort: exact @name("hdr.tcp.dstPort") ;
         }
         actions = {
-            foo1_0();
-            foo2_0();
+            foo1();
+            foo2();
             @defaultonly NoAction();
         }
         size = 8;
         default_action = NoAction();
     }
-    @name("t1") table t1_0 {
+    @name("t1") table t1 {
         key = {
             hdr.tcp.dstPort: exact @name("hdr.tcp.dstPort") ;
         }
         actions = {
-            foo1_0();
-            foo2_0();
+            foo1();
+            foo2();
             @defaultonly NoAction();
         }
         size = 8;
         default_action = NoAction();
     }
-    @name("t2") table t2_0 {
+    @name("t2") table t2 {
         actions = {
-            foo1_0();
-            foo2_0();
+            foo1();
+            foo2();
             @defaultonly NoAction();
         }
         key = {
@@ -133,10 +133,10 @@ control cIngress(inout headers hdr, inou
         default_action = NoAction();
     }
     apply {
-        t0_0.apply();
-        t1_0.apply();
+        t0.apply();
+        t1.apply();
         meta.hash1 = hdr.ipv4.dstAddr[15:0];
-        t2_0.apply();
+        t2.apply();
     }
 }
 control cEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
