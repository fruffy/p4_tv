--- before_pass
+++ after_pass
@@ -57,33 +57,57 @@ struct metadata {
     bit<16>     hash1;
 }
 parser parserI(packet_in pkt, out headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
+    IPv4_up_to_ihl_only_h tmp;
+    bit<9> tmp_0;
+    bit<9> tmp_1;
+    bit<9> tmp_2;
+    bit<32> tmp_3;
     state start {
-        pkt.extract<ethernet_t>(hdr.ethernet);
+        {
+            pkt.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        pkt.extract<ipv4_t>(hdr.ipv4, (bit<32>)(((bit<9>)(pkt.lookahead<IPv4_up_to_ihl_only_h>()).ihl << 2) + 9w492 << 3));
-        verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
-        verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
+        {
+            tmp = pkt.lookahead<IPv4_up_to_ihl_only_h>();
+            tmp_0 = (bit<9>)tmp.ihl << 2;
+            tmp_1 = tmp_0 + 9w492;
+            tmp_2 = tmp_1 << 3;
+            tmp_3 = (bit<32>)tmp_2;
+            pkt.extract<ipv4_t>(hdr.ipv4, tmp_3);
+        }
+        {
+            verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
+        }
+        {
+            verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
+        }
         transition select(hdr.ipv4.protocol) {
             8w6: parse_tcp;
             default: accept;
         }
     }
     state parse_tcp {
-        pkt.extract<tcp_t>(hdr.tcp);
+        {
+            pkt.extract<tcp_t>(hdr.tcp);
+        }
         transition accept;
     }
 }
 control cIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
     @name("foo1") action foo1_0(IPv4Address dstAddr) {
-        hdr.ipv4.dstAddr = dstAddr;
+        {
+            hdr.ipv4.dstAddr = dstAddr;
+        }
     }
     @name("foo2") action foo2_0(IPv4Address srcAddr) {
-        hdr.ipv4.srcAddr = srcAddr;
+        {
+            hdr.ipv4.srcAddr = srcAddr;
+        }
     }
     @name("t0") table t0_0 {
         key = {
@@ -123,10 +147,18 @@ control cIngress(inout headers hdr, inou
         default_action = NoAction();
     }
     apply {
-        t0_0.apply();
-        t1_0.apply();
-        meta.hash1 = hdr.ipv4.dstAddr[15:0];
-        t2_0.apply();
+        {
+            t0_0.apply();
+        }
+        {
+            t1_0.apply();
+        }
+        {
+            meta.hash1 = hdr.ipv4.dstAddr[15:0];
+        }
+        {
+            t2_0.apply();
+        }
     }
 }
 control cEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
@@ -143,9 +175,15 @@ control uc(inout headers hdr, inout meta
 }
 control DeparserI(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
-        packet.emit<tcp_t>(hdr.tcp);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
+        {
+            packet.emit<tcp_t>(hdr.tcp);
+        }
     }
 }
 V1Switch<headers, metadata>(parserI(), vc(), cIngress(), cEgress(), uc(), DeparserI()) main;
