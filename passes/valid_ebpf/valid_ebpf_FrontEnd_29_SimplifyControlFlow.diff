--- before_pass
+++ after_pass
@@ -27,30 +27,22 @@ struct Headers_t {
 }
 parser prs(packet_in p, out Headers_t headers) {
     state start {
-        {
-            p.extract<Ethernet_h>(headers.ethernet);
-        }
+        p.extract<Ethernet_h>(headers.ethernet);
         transition select(headers.ethernet.etherType) {
             16w0x800: ip;
             default: reject;
         }
     }
     state ip {
-        {
-            p.extract<IPv4_h>(headers.ipv4);
-        }
+        p.extract<IPv4_h>(headers.ipv4);
         transition accept;
     }
 }
 control pipe(inout Headers_t headers, out bool pass) {
     @name("counters") CounterArray(32w10, true) counters_0;
     @name("invalidate") action invalidate_0() {
-        {
-            headers.ipv4.setInvalid();
-        }
-        {
-            headers.ethernet.setInvalid();
-        }
+        headers.ipv4.setInvalid();
+        headers.ethernet.setInvalid();
     }
     @name("t") table t_0 {
         actions = {
@@ -62,19 +54,11 @@ control pipe(inout Headers_t headers, ou
     }
     apply {
         if (headers.ipv4.isValid()) {
-            {
-                counters_0.increment(headers.ipv4.dstAddr);
-            }
-            {
-                pass = true;
-            }
+            counters_0.increment(headers.ipv4.dstAddr);
+            pass = true;
         } else {
-            {
-                t_0.apply();
-            }
-            {
-                pass = false;
-            }
+            t_0.apply();
+            pass = false;
         }
     }
 }
