--- before_pass
+++ after_pass
@@ -30,8 +30,12 @@ struct metadata {
 }
 parser parserI(packet_in pkt, out headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
     state start {
-        pkt.extract<h1_t>(hdr.h1);
-        verify(hdr.h1.hdr_type == 8w1, error.BadHeaderType);
+        {
+            pkt.extract<h1_t>(hdr.h1);
+        }
+        {
+            verify(hdr.h1.hdr_type == 8w1, error.BadHeaderType);
+        }
         transition select(hdr.h1.next_hdr_type) {
             8w2: parse_h2;
             8w3: parse_h3;
@@ -39,8 +43,12 @@ parser parserI(packet_in pkt, out header
         }
     }
     state parse_h2 {
-        pkt.extract<h2_t>(hdr.h2.next);
-        verify(hdr.h2.last.hdr_type == 8w2, error.BadHeaderType);
+        {
+            pkt.extract<h2_t>(hdr.h2.next);
+        }
+        {
+            verify(hdr.h2.last.hdr_type == 8w2, error.BadHeaderType);
+        }
         transition select(hdr.h2.last.next_hdr_type) {
             8w2: parse_h2;
             8w3: parse_h3;
@@ -48,8 +56,12 @@ parser parserI(packet_in pkt, out header
         }
     }
     state parse_h3 {
-        pkt.extract<h3_t>(hdr.h3);
-        verify(hdr.h3.hdr_type == 8w3, error.BadHeaderType);
+        {
+            pkt.extract<h3_t>(hdr.h3);
+        }
+        {
+            verify(hdr.h3.hdr_type == 8w3, error.BadHeaderType);
+        }
         transition accept;
     }
 }
@@ -87,35 +99,85 @@ control cDoOneOp(inout headers hdr, in b
             }
         } else if (op[7:4] == 4w3) {
             if (op[3:0] == 4w0) {
-                hdr.h2[0].setValid();
-                hdr.h2[0].hdr_type = 8w2;
-                hdr.h2[0].f1 = 8w0xa0;
-                hdr.h2[0].f2 = 8w0xa;
-                hdr.h2[0].next_hdr_type = 8w9;
+                {
+                    hdr.h2[0].setValid();
+                }
+                {
+                    hdr.h2[0].hdr_type = 8w2;
+                }
+                {
+                    hdr.h2[0].f1 = 8w0xa0;
+                }
+                {
+                    hdr.h2[0].f2 = 8w0xa;
+                }
+                {
+                    hdr.h2[0].next_hdr_type = 8w9;
+                }
             } else if (op[3:0] == 4w1) {
-                hdr.h2[1].setValid();
-                hdr.h2[1].hdr_type = 8w2;
-                hdr.h2[1].f1 = 8w0xa1;
-                hdr.h2[1].f2 = 8w0x1a;
-                hdr.h2[1].next_hdr_type = 8w9;
+                {
+                    hdr.h2[1].setValid();
+                }
+                {
+                    hdr.h2[1].hdr_type = 8w2;
+                }
+                {
+                    hdr.h2[1].f1 = 8w0xa1;
+                }
+                {
+                    hdr.h2[1].f2 = 8w0x1a;
+                }
+                {
+                    hdr.h2[1].next_hdr_type = 8w9;
+                }
             } else if (op[3:0] == 4w2) {
-                hdr.h2[2].setValid();
-                hdr.h2[2].hdr_type = 8w2;
-                hdr.h2[2].f1 = 8w0xa2;
-                hdr.h2[2].f2 = 8w0x2a;
-                hdr.h2[2].next_hdr_type = 8w9;
+                {
+                    hdr.h2[2].setValid();
+                }
+                {
+                    hdr.h2[2].hdr_type = 8w2;
+                }
+                {
+                    hdr.h2[2].f1 = 8w0xa2;
+                }
+                {
+                    hdr.h2[2].f2 = 8w0x2a;
+                }
+                {
+                    hdr.h2[2].next_hdr_type = 8w9;
+                }
             } else if (op[3:0] == 4w3) {
-                hdr.h2[3].setValid();
-                hdr.h2[3].hdr_type = 8w2;
-                hdr.h2[3].f1 = 8w0xa3;
-                hdr.h2[3].f2 = 8w0x3a;
-                hdr.h2[3].next_hdr_type = 8w9;
+                {
+                    hdr.h2[3].setValid();
+                }
+                {
+                    hdr.h2[3].hdr_type = 8w2;
+                }
+                {
+                    hdr.h2[3].f1 = 8w0xa3;
+                }
+                {
+                    hdr.h2[3].f2 = 8w0x3a;
+                }
+                {
+                    hdr.h2[3].next_hdr_type = 8w9;
+                }
             } else if (op[3:0] == 4w4) {
-                hdr.h2[4].setValid();
-                hdr.h2[4].hdr_type = 8w2;
-                hdr.h2[4].f1 = 8w0xa4;
-                hdr.h2[4].f2 = 8w0x4a;
-                hdr.h2[4].next_hdr_type = 8w9;
+                {
+                    hdr.h2[4].setValid();
+                }
+                {
+                    hdr.h2[4].hdr_type = 8w2;
+                }
+                {
+                    hdr.h2[4].f1 = 8w0xa4;
+                }
+                {
+                    hdr.h2[4].f2 = 8w0x4a;
+                }
+                {
+                    hdr.h2[4].next_hdr_type = 8w9;
+                }
             }
         } else if (op[7:4] == 4w4) {
             if (op[3:0] == 4w0) {
@@ -134,11 +196,34 @@ control cDoOneOp(inout headers hdr, in b
 }
 control cIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t stdmeta) {
     @name("do_one_op") cDoOneOp() do_one_op_0;
-    apply {
-        do_one_op_0.apply(hdr, hdr.h1.op1);
-        do_one_op_0.apply(hdr, hdr.h1.op2);
-        do_one_op_0.apply(hdr, hdr.h1.op3);
-        hdr.h1.h2_valid_bits = 8w0;
+    headers tmp;
+    bit<8> tmp_0;
+    headers tmp_1;
+    bit<8> tmp_2;
+    headers tmp_3;
+    bit<8> tmp_4;
+    apply {
+        {
+            tmp = hdr;
+            tmp_0 = hdr.h1.op1;
+            do_one_op_0.apply(tmp, tmp_0);
+            hdr = tmp;
+        }
+        {
+            tmp_1 = hdr;
+            tmp_2 = hdr.h1.op2;
+            do_one_op_0.apply(tmp_1, tmp_2);
+            hdr = tmp_1;
+        }
+        {
+            tmp_3 = hdr;
+            tmp_4 = hdr.h1.op3;
+            do_one_op_0.apply(tmp_3, tmp_4);
+            hdr = tmp_3;
+        }
+        {
+            hdr.h1.h2_valid_bits = 8w0;
+        }
         if (hdr.h2[0].isValid()) {
             hdr.h1.h2_valid_bits[0:0] = 1w1;
         }
@@ -170,9 +255,15 @@ control uc(inout headers hdr, inout meta
 }
 control DeparserI(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<h1_t>(hdr.h1);
-        packet.emit<h2_t[5]>(hdr.h2);
-        packet.emit<h3_t>(hdr.h3);
+        {
+            packet.emit<h1_t>(hdr.h1);
+        }
+        {
+            packet.emit<h2_t[5]>(hdr.h2);
+        }
+        {
+            packet.emit<h3_t>(hdr.h3);
+        }
     }
 }
 V1Switch<headers, metadata>(parserI(), vc(), cIngress(), cEgress(), uc(), DeparserI()) main;
