--- before_pass
+++ after_pass
@@ -34,19 +34,25 @@ struct Metadata {
 }
 parser P(packet_in b, out Headers p, inout Metadata meta, inout standard_metadata_t standard_meta) {
     state start {
-        b.extract<ethernet_t>(p.ethernet);
+        {
+            b.extract<ethernet_t>(p.ethernet);
+        }
         transition select(p.ethernet.etherType) {
             16w0x800: parse_ipv4;
         }
     }
     state parse_ipv4 {
-        b.extract<ipv4_t>(p.ip);
+        {
+            b.extract<ipv4_t>(p.ip);
+        }
         transition accept;
     }
 }
 control Ing(inout Headers headers, inout Metadata meta, inout standard_metadata_t standard_meta) {
     apply {
-        standard_meta.egress_spec = 9w1;
+        {
+            standard_meta.egress_spec = 9w1;
+        }
     }
 }
 control Eg(inout Headers hdrs, inout Metadata meta, inout standard_metadata_t standard_meta) {
@@ -54,23 +60,57 @@ control Eg(inout Headers hdrs, inout Met
     bool _pred_0;
     bit<32> inc_0;
     @name("test") action test_0() {
-        val_0 = { 32w0 };
-        _pred_0 = val_0.field1 != 32w0;
-        inc_0 = (_pred_0 ? 32w1 : 32w0);
-        debug.write(32w0, (_pred_0 ? 32w1 : 32w0));
-        debug.write(32w1, inc_0);
-        val_0.field1 = 32w1;
-        debug.write(32w2, inc_0);
-        reg.write(32w0, val_0.field1);
+        bit<32> tmp;
+        bit<32> tmp_0;
+        {
+            val_0 = { 32w0 };
+        }
+        {
+            _pred_0 = val_0.field1 != 32w0;
+        }
+        {
+            if (_pred_0) {
+                tmp = 32w1;
+            } else {
+                tmp = 32w0;
+            }
+            inc_0 = tmp;
+        }
+        {
+            if (_pred_0) {
+                tmp_0 = 32w1;
+            } else {
+                tmp_0 = 32w0;
+            }
+            debug.write(32w0, tmp_0);
+        }
+        {
+            debug.write(32w1, inc_0);
+        }
+        {
+            val_0.field1 = 32w1;
+        }
+        {
+            debug.write(32w2, inc_0);
+        }
+        {
+            reg.write(32w0, val_0.field1);
+        }
     }
     apply {
-        test_0();
+        {
+            test_0();
+        }
     }
 }
 control DP(packet_out b, in Headers p) {
     apply {
-        b.emit<ethernet_t>(p.ethernet);
-        b.emit<ipv4_t>(p.ip);
+        {
+            b.emit<ethernet_t>(p.ethernet);
+        }
+        {
+            b.emit<ipv4_t>(p.ip);
+        }
     }
 }
 control Verify(inout Headers hdrs, inout Metadata meta) {
