--- before_pass
+++ after_pass
@@ -1,44 +1,55 @@
 #include <core.p4>
-parser adder_0(in bit<32> y, out bit<32> x) {
-    state start {
-        x = y + 32w6;
-        transition accept;
-    }
-}
 parser par(out bool b) {
     bit<32> x_0;
-    @name("p") adder_0() p_0;
     state start {
-        p_0.apply(x = x_0, y = 32w0);
-        b = x_0 == 32w0;
-        transition accept;
+        transition adder_0_start;
     }
-}
-control comp_0(inout bit<16> x, out bool b) {
-    apply {
-        b = x == 16w0;
+    state adder_0_start {
+        x_0 = 32w0 + 32w6;
+        transition start_0;
     }
-}
-control comp_1(inout bit<16> x, out bool b) {
-    apply {
-        b = x == 16w1;
+    state start_0 {
+        b = x_0 == 32w0;
+        transition accept;
     }
 }
 control c(out bool b) {
     bit<16> xv_0;
-    @name("c0") comp_0() c0_0;
-    @name("c1") comp_1() c1_0;
+    bit<16> x_1;
+    bool b_0;
+    bit<16> x_2;
+    bool b_1;
     @name("a") action a_0(in bit<16> bi_0, out bit<16> mb_0) {
         mb_0 = -bi_0;
     }
     apply {
         a_0(bi_0 = 16w3, mb_0 = xv_0);
         a_0(mb_0 = xv_0, bi_0 = 16w0);
-        c0_0.apply(b = b, x = xv_0);
-        c1_0.apply(xv_0, b);
+        {
+            x_1 = xv_0;
+            b_0 = x_1 == 16w0;
+            b = b_0;
+            xv_0 = x_1;
+        }
+        {
+            x_2 = xv_0;
+            b_1 = x_2 == 16w1;
+            xv_0 = x_2;
+            b = b_1;
+        }
         xv_0 = 16w1;
-        c0_0.apply(x = xv_0, b = b);
-        c1_0.apply(b = b, x = xv_0);
+        {
+            x_1 = xv_0;
+            b_0 = x_1 == 16w0;
+            xv_0 = x_1;
+            b = b_0;
+        }
+        {
+            x_2 = xv_0;
+            b_1 = x_2 == 16w1;
+            b = b_1;
+            xv_0 = x_2;
+        }
     }
 }
 control ce(out bool b);
