--- before_pass
+++ after_pass
@@ -21,30 +21,30 @@ action my_drop(inout standard_metadata_t
     mark_to_drop(smeta);
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    bit<16> tmp_port = incr((bit<16>)standard_metadata.ingress_port);
+    bit<16> tmp_port_0 = incr((bit<16>)standard_metadata.ingress_port);
     state start {
         packet.extract<ethernet_t>(hdr.ethernet);
         hdr.ethernet.etherType = incr(hdr.ethernet.etherType);
-        meta.tmp_port = tmp_port;
+        meta.tmp_port = tmp_port_0;
         transition accept;
     }
 }
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    action set_port(bit<9> output_port) {
+    @name("set_port") action set_port_0(bit<9> output_port) {
         standard_metadata.egress_spec = output_port;
     }
-    table mac_da {
+    @name("mac_da") table mac_da_0 {
         key = {
             hdr.ethernet.dstAddr: exact @name("hdr.ethernet.dstAddr") ;
         }
         actions = {
-            set_port();
+            set_port_0();
             my_drop(standard_metadata);
         }
         default_action = my_drop(standard_metadata);
     }
     apply {
-        mac_da.apply();
+        mac_da_0.apply();
         hdr.ethernet.srcAddr[15:0] = twoxplus1(hdr.ethernet.srcAddr[15:0]);
         hdr.ethernet.srcAddr[15:0] = incr(hdr.ethernet.srcAddr[15:0]);
         hdr.ethernet.etherType = incr(hdr.ethernet.etherType);
