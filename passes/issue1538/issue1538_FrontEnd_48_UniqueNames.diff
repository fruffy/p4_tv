--- before_pass
+++ after_pass
@@ -15,90 +15,90 @@ action my_drop(inout standard_metadata_t
     mark_to_drop(smeta_0);
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    bit<16> tmp_port_0;
-    bit<16> tmp_1;
-    bit<16> tmp_2;
+    bit<16> tmp_port_1;
+    bit<16> tmp_6;
+    bit<16> tmp_7;
     state start {
         {
-            bit<16> x_1 = (bit<16>)standard_metadata.ingress_port;
-            bool hasReturned = false;
-            bit<16> retval;
-            hasReturned = true;
-            retval = x_1 + 16w1;
-            tmp_1 = retval;
+            bit<16> x = (bit<16>)standard_metadata.ingress_port;
+            bool hasReturned_1 = false;
+            bit<16> retval_1;
+            hasReturned_1 = true;
+            retval_1 = x + 16w1;
+            tmp_6 = retval_1;
         }
-        tmp_port_0 = tmp_1;
+        tmp_port_1 = tmp_6;
         packet.extract<ethernet_t>(hdr.ethernet);
         {
-            bit<16> x_2 = hdr.ethernet.etherType;
-            bool hasReturned = false;
-            bit<16> retval;
-            hasReturned = true;
-            retval = x_2 + 16w1;
-            tmp_2 = retval;
+            bit<16> x_6 = hdr.ethernet.etherType;
+            bool hasReturned_1 = false;
+            bit<16> retval_1;
+            hasReturned_1 = true;
+            retval_1 = x_6 + 16w1;
+            tmp_7 = retval_1;
         }
-        hdr.ethernet.etherType = tmp_2;
-        meta.tmp_port = tmp_port_0;
+        hdr.ethernet.etherType = tmp_7;
+        meta.tmp_port = tmp_port_1;
         transition accept;
     }
 }
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    bit<16> tmp_3;
-    bit<16> tmp_4;
-    bit<16> tmp_5;
-    @name("set_port") action set_port_0(bit<9> output_port) {
+    bit<16> tmp_8;
+    bit<16> tmp_9;
+    bit<16> tmp_10;
+    @name("set_port") action set_port(bit<9> output_port) {
         standard_metadata.egress_spec = output_port;
     }
-    @name("mac_da") table mac_da_0 {
+    @name("mac_da") table mac_da {
         key = {
             hdr.ethernet.dstAddr: exact @name("hdr.ethernet.dstAddr") ;
         }
         actions = {
-            set_port_0();
+            set_port();
             my_drop(standard_metadata);
         }
         default_action = my_drop(standard_metadata);
     }
     apply {
-        mac_da_0.apply();
+        mac_da.apply();
         {
-            bit<16> x_3 = hdr.ethernet.srcAddr[15:0];
-            bool hasReturned_0 = false;
-            bit<16> retval_0;
-            bit<16> tmp;
-            bit<16> tmp_0;
+            bit<16> x_7 = hdr.ethernet.srcAddr[15:0];
+            bool hasReturned_2 = false;
+            bit<16> retval_2;
+            bit<16> tmp_11;
+            bit<16> tmp_12;
             {
-                bit<16> x_0 = x_3;
-                bool hasReturned = false;
-                bit<16> retval;
-                hasReturned = true;
-                retval = x_0 + 16w1;
-                tmp = retval;
+                bit<16> x_8 = x_7;
+                bool hasReturned_1 = false;
+                bit<16> retval_1;
+                hasReturned_1 = true;
+                retval_1 = x_8 + 16w1;
+                tmp_11 = retval_1;
             }
-            tmp_0 = x_3 + tmp;
-            hasReturned_0 = true;
-            retval_0 = tmp_0;
-            tmp_3 = retval_0;
+            tmp_12 = x_7 + tmp_11;
+            hasReturned_2 = true;
+            retval_2 = tmp_12;
+            tmp_8 = retval_2;
         }
-        hdr.ethernet.srcAddr[15:0] = tmp_3;
+        hdr.ethernet.srcAddr[15:0] = tmp_8;
         {
-            bit<16> x_4 = hdr.ethernet.srcAddr[15:0];
-            bool hasReturned = false;
-            bit<16> retval;
-            hasReturned = true;
-            retval = x_4 + 16w1;
-            tmp_4 = retval;
+            bit<16> x_9 = hdr.ethernet.srcAddr[15:0];
+            bool hasReturned_1 = false;
+            bit<16> retval_1;
+            hasReturned_1 = true;
+            retval_1 = x_9 + 16w1;
+            tmp_9 = retval_1;
         }
-        hdr.ethernet.srcAddr[15:0] = tmp_4;
+        hdr.ethernet.srcAddr[15:0] = tmp_9;
         {
-            bit<16> x_5 = hdr.ethernet.etherType;
-            bool hasReturned = false;
-            bit<16> retval;
-            hasReturned = true;
-            retval = x_5 + 16w1;
-            tmp_5 = retval;
+            bit<16> x_10 = hdr.ethernet.etherType;
+            bool hasReturned_1 = false;
+            bit<16> retval_1;
+            hasReturned_1 = true;
+            retval_1 = x_10 + 16w1;
+            tmp_10 = retval_1;
         }
-        hdr.ethernet.etherType = tmp_5;
+        hdr.ethernet.etherType = tmp_10;
     }
 }
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
