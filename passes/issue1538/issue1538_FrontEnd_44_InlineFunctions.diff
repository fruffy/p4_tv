--- before_pass
+++ after_pass
@@ -1,27 +1,5 @@
 #include <core.p4>
 #include <v1model.p4>
-bit<16> incr(in bit<16> x) {
-    bool hasReturned = false;
-    bit<16> retval;
-    {
-        hasReturned = true;
-        retval = x + 16w1;
-    }
-    return retval;
-}
-bit<16> twoxplus1(in bit<16> x) {
-    bool hasReturned_0 = false;
-    bit<16> retval_0;
-    bit<16> tmp;
-    bit<16> tmp_0;
-    tmp = incr(x);
-    tmp_0 = x + tmp;
-    {
-        hasReturned_0 = true;
-        retval_0 = tmp_0;
-    }
-    return retval_0;
-}
 struct metadata {
     bit<16> tmp_port;
 }
@@ -41,10 +19,28 @@ parser ParserImpl(packet_in packet, out
     bit<16> tmp_1;
     bit<16> tmp_2;
     state start {
-        tmp_1 = incr((bit<16>)standard_metadata.ingress_port);
+        {
+            bit<16> x_1 = (bit<16>)standard_metadata.ingress_port;
+            bool hasReturned = false;
+            bit<16> retval;
+            {
+                hasReturned = true;
+                retval = x_1 + 16w1;
+            }
+            tmp_1 = retval;
+        }
         tmp_port_0 = tmp_1;
         packet.extract<ethernet_t>(hdr.ethernet);
-        tmp_2 = incr(hdr.ethernet.etherType);
+        {
+            bit<16> x_2 = hdr.ethernet.etherType;
+            bool hasReturned = false;
+            bit<16> retval;
+            {
+                hasReturned = true;
+                retval = x_2 + 16w1;
+            }
+            tmp_2 = retval;
+        }
         hdr.ethernet.etherType = tmp_2;
         meta.tmp_port = tmp_port_0;
         transition accept;
@@ -69,11 +65,51 @@ control ingress(inout headers hdr, inout
     }
     apply {
         mac_da_0.apply();
-        tmp_3 = twoxplus1(hdr.ethernet.srcAddr[15:0]);
+        {
+            bit<16> x_3 = hdr.ethernet.srcAddr[15:0];
+            bool hasReturned_0 = false;
+            bit<16> retval_0;
+            bit<16> tmp;
+            bit<16> tmp_0;
+            {
+                bit<16> x_0 = x_3;
+                bool hasReturned = false;
+                bit<16> retval;
+                {
+                    hasReturned = true;
+                    retval = x_0 + 16w1;
+                }
+                tmp = retval;
+            }
+            tmp_0 = x_3 + tmp;
+            {
+                hasReturned_0 = true;
+                retval_0 = tmp_0;
+            }
+            tmp_3 = retval_0;
+        }
         hdr.ethernet.srcAddr[15:0] = tmp_3;
-        tmp_4 = incr(hdr.ethernet.srcAddr[15:0]);
+        {
+            bit<16> x_4 = hdr.ethernet.srcAddr[15:0];
+            bool hasReturned = false;
+            bit<16> retval;
+            {
+                hasReturned = true;
+                retval = x_4 + 16w1;
+            }
+            tmp_4 = retval;
+        }
         hdr.ethernet.srcAddr[15:0] = tmp_4;
-        tmp_5 = incr(hdr.ethernet.etherType);
+        {
+            bit<16> x_5 = hdr.ethernet.etherType;
+            bool hasReturned = false;
+            bit<16> retval;
+            {
+                hasReturned = true;
+                retval = x_5 + 16w1;
+            }
+            tmp_5 = retval;
+        }
         hdr.ethernet.etherType = tmp_5;
     }
 }
