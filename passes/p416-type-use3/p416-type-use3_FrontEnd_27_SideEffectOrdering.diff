--- before_pass
+++ after_pass
@@ -47,37 +47,73 @@ struct headers_t {
 }
 parser ParserImpl(packet_in packet, out headers_t hdr, inout meta_t meta, inout standard_metadata_t standard_metadata) {
     state start {
-        packet.extract<ethernet_t>(hdr.ethernet);
+        {
+            packet.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.etherType) {
             16w0xdead: parse_custom;
             default: accept;
         }
     }
     state parse_custom {
-        packet.extract<custom_t>(hdr.custom);
+        {
+            packet.extract<custom_t>(hdr.custom);
+        }
         transition accept;
     }
 }
 control ingress(inout headers_t hdr, inout meta_t meta, inout standard_metadata_t standard_metadata) {
     @name("set_output") action set_output_0(bit<9> out_port) {
-        standard_metadata.egress_spec = out_port;
+        {
+            standard_metadata.egress_spec = out_port;
+        }
     }
     @name("set_headers") action set_headers_0(bit<8> e, CustomD_t ed, CustomT_t et, CustomDD_t edd, CustomDT_t edt, CustomTD_t etd, CustomTT_t ett, CustomDDD_t eddd, CustomDDT_t eddt, CustomDTD_t edtd, CustomDTT_t edtt, CustomTDD_t etdd, CustomTDT_t etdt, CustomTTD_t ettd, CustomTTT_t ettt) {
-        hdr.custom.e = e;
-        hdr.custom.ed = ed;
-        hdr.custom.et = et;
-        hdr.custom.edd = edd;
-        hdr.custom.edt = edt;
-        hdr.custom.etd = etd;
-        hdr.custom.ett = ett;
-        hdr.custom.eddd = eddd;
-        hdr.custom.eddt = eddt;
-        hdr.custom.edtd = edtd;
-        hdr.custom.edtt = edtt;
-        hdr.custom.etdd = etdd;
-        hdr.custom.etdt = etdt;
-        hdr.custom.ettd = ettd;
-        hdr.custom.ettt = ettt;
+        {
+            hdr.custom.e = e;
+        }
+        {
+            hdr.custom.ed = ed;
+        }
+        {
+            hdr.custom.et = et;
+        }
+        {
+            hdr.custom.edd = edd;
+        }
+        {
+            hdr.custom.edt = edt;
+        }
+        {
+            hdr.custom.etd = etd;
+        }
+        {
+            hdr.custom.ett = ett;
+        }
+        {
+            hdr.custom.eddd = eddd;
+        }
+        {
+            hdr.custom.eddt = eddt;
+        }
+        {
+            hdr.custom.edtd = edtd;
+        }
+        {
+            hdr.custom.edtt = edtt;
+        }
+        {
+            hdr.custom.etdd = etdd;
+        }
+        {
+            hdr.custom.etdt = etdt;
+        }
+        {
+            hdr.custom.ettd = ettd;
+        }
+        {
+            hdr.custom.ettt = ettt;
+        }
     }
     @name("my_drop") action my_drop_0() {
     }
@@ -116,18 +152,26 @@ control egress(inout headers_t hdr, inou
 }
 control DeparserImpl(packet_out packet, in headers_t hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<custom_t>(hdr.custom);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<custom_t>(hdr.custom);
+        }
     }
 }
 control verifyChecksum(inout headers_t hdr, inout meta_t meta) {
     apply {
-        verify_checksum<tuple<bit<8>, bit<8>, CustomT_t, bit<8>, CustomDT_t, CustomT_t, CustomTT_t, bit<8>, CustomDDT_t, CustomDT_t, CustomDTT_t, CustomT_t, CustomTDT_t, CustomTT_t, CustomTTT_t>, bit<16>>(hdr.custom.isValid(), { hdr.custom.e, hdr.custom.ed, hdr.custom.et, hdr.custom.edd, hdr.custom.edt, hdr.custom.etd, hdr.custom.ett, hdr.custom.eddd, hdr.custom.eddt, hdr.custom.edtd, hdr.custom.edtt, hdr.custom.etdd, hdr.custom.etdt, hdr.custom.ettd, hdr.custom.ettt }, hdr.custom.checksum, HashAlgorithm.csum16);
+        {
+            verify_checksum<tuple<bit<8>, bit<8>, CustomT_t, bit<8>, CustomDT_t, CustomT_t, CustomTT_t, bit<8>, CustomDDT_t, CustomDT_t, CustomDTT_t, CustomT_t, CustomTDT_t, CustomTT_t, CustomTTT_t>, bit<16>>(hdr.custom.isValid(), { hdr.custom.e, hdr.custom.ed, hdr.custom.et, hdr.custom.edd, hdr.custom.edt, hdr.custom.etd, hdr.custom.ett, hdr.custom.eddd, hdr.custom.eddt, hdr.custom.edtd, hdr.custom.edtt, hdr.custom.etdd, hdr.custom.etdt, hdr.custom.ettd, hdr.custom.ettt }, hdr.custom.checksum, HashAlgorithm.csum16);
+        }
     }
 }
 control computeChecksum(inout headers_t hdr, inout meta_t meta) {
     apply {
-        update_checksum<tuple<bit<8>, bit<8>, CustomT_t, bit<8>, CustomDT_t, CustomT_t, CustomTT_t, bit<8>, CustomDDT_t, CustomDT_t, CustomDTT_t, CustomT_t, CustomTDT_t, CustomTT_t, CustomTTT_t>, bit<16>>(hdr.custom.isValid(), { hdr.custom.e, hdr.custom.ed, hdr.custom.et, hdr.custom.edd, hdr.custom.edt, hdr.custom.etd, hdr.custom.ett, hdr.custom.eddd, hdr.custom.eddt, hdr.custom.edtd, hdr.custom.edtt, hdr.custom.etdd, hdr.custom.etdt, hdr.custom.ettd, hdr.custom.ettt }, hdr.custom.checksum, HashAlgorithm.csum16);
+        {
+            update_checksum<tuple<bit<8>, bit<8>, CustomT_t, bit<8>, CustomDT_t, CustomT_t, CustomTT_t, bit<8>, CustomDDT_t, CustomDT_t, CustomDTT_t, CustomT_t, CustomTDT_t, CustomTT_t, CustomTTT_t>, bit<16>>(hdr.custom.isValid(), { hdr.custom.e, hdr.custom.ed, hdr.custom.et, hdr.custom.edd, hdr.custom.edt, hdr.custom.etd, hdr.custom.ett, hdr.custom.eddd, hdr.custom.eddt, hdr.custom.edtd, hdr.custom.edtt, hdr.custom.etdd, hdr.custom.etdt, hdr.custom.ettd, hdr.custom.ettt }, hdr.custom.checksum, HashAlgorithm.csum16);
+        }
     }
 }
 V1Switch<headers_t, meta_t>(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
