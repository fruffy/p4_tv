--- before_pass
+++ after_pass
@@ -20,24 +20,24 @@ parser IngressParserImpl(packet_in pkt,
     }
 }
 control cIngress(inout headers_t hdr, inout metadata_t user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
-    @name(".send_to_port") action send_to_port_1(inout psa_ingress_output_metadata_t meta_0, in PortId_t egress_port_0) {
+    @name(".send_to_port") action send_to_port(inout psa_ingress_output_metadata_t meta_0, in PortId_t egress_port_0) {
         meta_0.drop = false;
         meta_0.multicast_group = (MulticastGroup_t)32w0;
         meta_0.egress_port = egress_port_0;
     }
-    @name("counter") Counter<bit<10>, bit<12>>(32w1024, PSA_CounterType_t.PACKETS) counter;
-    @name("execute") action execute_0() {
-        counter.count(12w256);
+    @name("counter") Counter<bit<10>, bit<12>>(32w1024, PSA_CounterType_t.PACKETS) counter_0;
+    @name("execute") action execute_1() {
+        counter_0.count(12w256);
     }
-    @name("tbl") table tbl {
+    @name("tbl") table tbl_0 {
         actions = {
-            execute_0();
+            execute_1();
         }
-        default_action = execute_0();
+        default_action = execute_1();
     }
     apply {
-        send_to_port_1(ostd, (PortId_t)(PortIdUint_t)hdr.ethernet.dstAddr);
-        tbl.apply();
+        send_to_port(ostd, (PortId_t)(PortIdUint_t)hdr.ethernet.dstAddr);
+        tbl_0.apply();
     }
 }
 parser EgressParserImpl(packet_in buffer, out headers_t hdr, inout metadata_t user_meta, in psa_egress_parser_input_metadata_t istd, in empty_metadata_t normal_meta, in empty_metadata_t clone_i2e_meta, in empty_metadata_t clone_e2e_meta) {
