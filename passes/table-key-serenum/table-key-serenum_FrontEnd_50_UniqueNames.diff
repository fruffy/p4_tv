--- before_pass
+++ after_pass
@@ -18,10 +18,10 @@ struct Headers {
     Ethernet eth;
 }
 parser prs(packet_in p, out Headers h) {
-    Ethernet e;
+    Ethernet e_0;
     state start {
-        p.extract<Ethernet>(e);
-        transition select(e.type) {
+        p.extract<Ethernet>(e_0);
+        transition select(e_0.type) {
             EthTypes.IPv4: accept;
             EthTypes.ARP: accept;
             default: reject;
@@ -29,27 +29,27 @@ parser prs(packet_in p, out Headers h) {
     }
 }
 control c(inout Headers h, inout standard_metadata_t sm) {
-    @name(".NoAction") action NoAction_1() {
+    @name(".NoAction") action NoAction_0() {
     }
-    @name("do_act") action do_act_0(bit<32> type) {
+    @name("do_act") action do_act(bit<32> type) {
         sm.instance_type = type;
     }
-    @name("tns") table tns {
+    @name("tns") table tns_0 {
         key = {
             h.eth.type: exact @name("h.eth.type") ;
         }
         actions = {
-            do_act_0();
-            @defaultonly NoAction_1();
+            do_act();
+            @defaultonly NoAction_0();
         }
         const entries = {
-                        EthTypes.IPv4 : do_act_0(32w0x800);
-                        EthTypes.VLAN : do_act_0(32w0x8100);
+                        EthTypes.IPv4 : do_act(32w0x800);
+                        EthTypes.VLAN : do_act(32w0x8100);
         }
-        default_action = NoAction_1();
+        default_action = NoAction_0();
     }
     apply {
-        tns.apply();
+        tns_0.apply();
     }
 }
 parser p<H>(packet_in _p, out H h);
