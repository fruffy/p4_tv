--- before_pass
+++ after_pass
@@ -15,24 +15,18 @@ struct headers_t {
 }
 parser IngressParserImpl(packet_in pkt, out headers_t hdr, inout metadata_t user_meta, in psa_ingress_parser_input_metadata_t istd, in empty_metadata_t resubmit_meta, in empty_metadata_t recirculate_meta) {
     state start {
-        {
-            pkt.extract<ethernet_t>(hdr.ethernet);
-        }
+        pkt.extract<ethernet_t>(hdr.ethernet);
         transition accept;
     }
 }
 control cIngress(inout headers_t hdr, inout metadata_t user_meta, in psa_ingress_input_metadata_t istd, inout psa_ingress_output_metadata_t ostd) {
     apply {
-        {
-            multicast(ostd, (MulticastGroup_t)(MulticastGroupUint_t)hdr.ethernet.dstAddr);
-        }
+        multicast(ostd, (MulticastGroup_t)(MulticastGroupUint_t)hdr.ethernet.dstAddr);
     }
 }
 parser EgressParserImpl(packet_in buffer, out headers_t hdr, inout metadata_t user_meta, in psa_egress_parser_input_metadata_t istd, in empty_metadata_t normal_meta, in empty_metadata_t clone_i2e_meta, in empty_metadata_t clone_e2e_meta) {
     state start {
-        {
-            buffer.extract<ethernet_t>(hdr.ethernet);
-        }
+        buffer.extract<ethernet_t>(hdr.ethernet);
         transition accept;
     }
 }
@@ -42,25 +36,19 @@ control cEgress(inout headers_t hdr, ino
 }
 control CommonDeparserImpl(packet_out packet, inout headers_t hdr) {
     apply {
-        {
-            packet.emit<ethernet_t>(hdr.ethernet);
-        }
+        packet.emit<ethernet_t>(hdr.ethernet);
     }
 }
 control IngressDeparserImpl(packet_out buffer, out empty_metadata_t clone_i2e_meta, out empty_metadata_t resubmit_meta, out empty_metadata_t normal_meta, inout headers_t hdr, in metadata_t meta, in psa_ingress_output_metadata_t istd) {
     @name("cp") CommonDeparserImpl() cp_0;
     apply {
-        {
-            cp_0.apply(buffer, hdr);
-        }
+        cp_0.apply(buffer, hdr);
     }
 }
 control EgressDeparserImpl(packet_out buffer, out empty_metadata_t clone_e2e_meta, out empty_metadata_t recirculate_meta, inout headers_t hdr, in metadata_t meta, in psa_egress_output_metadata_t istd, in psa_egress_deparser_input_metadata_t edstd) {
     @name("cp") CommonDeparserImpl() cp_1;
     apply {
-        {
-            cp_1.apply(buffer, hdr);
-        }
+        cp_1.apply(buffer, hdr);
     }
 }
 IngressPipeline<headers_t, metadata_t, empty_metadata_t, empty_metadata_t, empty_metadata_t, empty_metadata_t>(IngressParserImpl(), cIngress(), IngressDeparserImpl()) ip;
