--- before_pass
+++ after_pass
@@ -5,9 +5,7 @@ header hdr {
 }
 control compute(inout hdr h) {
     apply {
-        {
-            hash<bit<16>, bit<10>, tuple<bit<16>>, bit<10>>(h.a, HashAlgorithm.crc16, 10w0, { 16w1 }, 10w4);
-        }
+        hash<bit<16>, bit<10>, tuple<bit<16>>, bit<10>>(h.a, HashAlgorithm.crc16, 10w0, { 16w1 }, 10w4);
     }
 }
 struct Headers {
@@ -17,9 +15,7 @@ struct Meta {
 }
 parser p(packet_in b, out Headers h, inout Meta m, inout standard_metadata_t sm) {
     state start {
-        {
-            b.extract<hdr>(h.h);
-        }
+        b.extract<hdr>(h.h);
         transition accept;
     }
 }
@@ -37,20 +33,14 @@ control egress(inout Headers h, inout Me
 }
 control deparser(packet_out b, in Headers h) {
     apply {
-        {
-            b.emit<hdr>(h.h);
-        }
+        b.emit<hdr>(h.h);
     }
 }
 control ingress(inout Headers h, inout Meta m, inout standard_metadata_t sm) {
     @name("c") compute() c_0;
     apply {
-        {
-            c_0.apply(h.h);
-        }
-        {
-            sm.egress_spec = 9w0;
-        }
+        c_0.apply(h.h);
+        sm.egress_spec = 9w0;
     }
 }
 V1Switch<Headers, Meta>(p(), vrfy(), ingress(), egress(), update(), deparser()) main;
