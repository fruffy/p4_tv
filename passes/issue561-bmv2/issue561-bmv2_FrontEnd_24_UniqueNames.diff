--- before_pass
+++ after_pass
@@ -87,14 +87,14 @@ struct Tcp_option_sack_top {
     bit<8> length;
 }
 parser Tcp_option_parser(packet_in b, in bit<4> tcp_hdr_data_offset, out Tcp_option_stack vec, out Tcp_option_padding_h padding) {
-    bit<7> tcp_hdr_bytes_left;
+    bit<7> tcp_hdr_bytes_left_0;
     state start {
         verify(tcp_hdr_data_offset >= 4w5, error.TcpDataOffsetTooSmall);
-        tcp_hdr_bytes_left = (bit<7>)(tcp_hdr_data_offset + 4w11) << 2;
+        tcp_hdr_bytes_left_0 = (bit<7>)(tcp_hdr_data_offset + 4w11) << 2;
         transition next_option;
     }
     state next_option {
-        transition select(tcp_hdr_bytes_left) {
+        transition select(tcp_hdr_bytes_left_0) {
             7w0: accept;
             default: next_option_part2;
         }
@@ -110,38 +110,38 @@ parser Tcp_option_parser(packet_in b, in
     }
     state parse_tcp_option_end {
         b.extract<Tcp_option_end_h>(vec.next.end);
-        tcp_hdr_bytes_left = tcp_hdr_bytes_left + 7w127;
-        b.extract<Tcp_option_padding_h>(padding, (bit<32>)((bit<9>)tcp_hdr_bytes_left << 3));
+        tcp_hdr_bytes_left_0 = tcp_hdr_bytes_left_0 + 7w127;
+        b.extract<Tcp_option_padding_h>(padding, (bit<32>)((bit<9>)tcp_hdr_bytes_left_0 << 3));
         transition accept;
     }
     state parse_tcp_option_nop {
         b.extract<Tcp_option_nop_h>(vec.next.nop);
-        tcp_hdr_bytes_left = tcp_hdr_bytes_left + 7w127;
+        tcp_hdr_bytes_left_0 = tcp_hdr_bytes_left_0 + 7w127;
         transition next_option;
     }
     state parse_tcp_option_ss {
-        verify(tcp_hdr_bytes_left >= 7w5, error.TcpOptionTooLongForHeader);
-        tcp_hdr_bytes_left = tcp_hdr_bytes_left + 7w123;
+        verify(tcp_hdr_bytes_left_0 >= 7w5, error.TcpOptionTooLongForHeader);
+        tcp_hdr_bytes_left_0 = tcp_hdr_bytes_left_0 + 7w123;
         b.extract<Tcp_option_ss_h>(vec.next.ss);
         transition next_option;
     }
     state parse_tcp_option_s {
-        verify(tcp_hdr_bytes_left >= 7w4, error.TcpOptionTooLongForHeader);
-        tcp_hdr_bytes_left = tcp_hdr_bytes_left + 7w124;
+        verify(tcp_hdr_bytes_left_0 >= 7w4, error.TcpOptionTooLongForHeader);
+        tcp_hdr_bytes_left_0 = tcp_hdr_bytes_left_0 + 7w124;
         b.extract<Tcp_option_s_h>(vec.next.s);
         transition next_option;
     }
     state parse_tcp_option_sack {
-        bit<8> n_sack_bytes = (b.lookahead<Tcp_option_sack_top>()).length;
-        verify(n_sack_bytes == 8w10 || n_sack_bytes == 8w18 || n_sack_bytes == 8w26 || n_sack_bytes == 8w34, error.TcpBadSackOptionLength);
-        verify(tcp_hdr_bytes_left >= (bit<7>)n_sack_bytes, error.TcpOptionTooLongForHeader);
-        tcp_hdr_bytes_left = tcp_hdr_bytes_left - (bit<7>)n_sack_bytes;
-        b.extract<Tcp_option_sack_h>(vec.next.sack, (bit<32>)((n_sack_bytes << 3) + 8w240));
+        bit<8> n_sack_bytes_0 = (b.lookahead<Tcp_option_sack_top>()).length;
+        verify(n_sack_bytes_0 == 8w10 || n_sack_bytes_0 == 8w18 || n_sack_bytes_0 == 8w26 || n_sack_bytes_0 == 8w34, error.TcpBadSackOptionLength);
+        verify(tcp_hdr_bytes_left_0 >= (bit<7>)n_sack_bytes_0, error.TcpOptionTooLongForHeader);
+        tcp_hdr_bytes_left_0 = tcp_hdr_bytes_left_0 - (bit<7>)n_sack_bytes_0;
+        b.extract<Tcp_option_sack_h>(vec.next.sack, (bit<32>)((n_sack_bytes_0 << 3) + 8w240));
         transition next_option;
     }
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    @name("Tcp_option_parser") Tcp_option_parser() Tcp_option_parser_inst;
+    @name("Tcp_option_parser") Tcp_option_parser() Tcp_option_parser_inst_0;
     state start {
         packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
@@ -158,7 +158,7 @@ parser ParserImpl(packet_in packet, out
     }
     state parse_tcp {
         packet.extract<tcp_t>(hdr.tcp);
-        Tcp_option_parser_inst.apply(packet, hdr.tcp.dataOffset, hdr.tcp_options_vec, hdr.tcp_options_padding);
+        Tcp_option_parser_inst_0.apply(packet, hdr.tcp.dataOffset, hdr.tcp_options_vec, hdr.tcp_options_padding);
         transition accept;
     }
 }
@@ -166,56 +166,56 @@ action my_drop(inout standard_metadata_t
     mark_to_drop(smeta);
 }
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    action set_l2ptr(bit<32> l2ptr) {
+    @name("set_l2ptr") action set_l2ptr_0(bit<32> l2ptr) {
         meta.fwd_metadata.l2ptr = l2ptr;
     }
-    table ipv4_da_lpm {
+    @name("ipv4_da_lpm") table ipv4_da_lpm_0 {
         key = {
             hdr.ipv4.dstAddr: lpm @name("hdr.ipv4.dstAddr") ;
         }
         actions = {
-            set_l2ptr();
+            set_l2ptr_0();
             my_drop(standard_metadata);
         }
         default_action = my_drop(standard_metadata);
     }
-    action set_bd_dmac_intf(bit<24> bd, bit<48> dmac, bit<9> intf) {
+    @name("set_bd_dmac_intf") action set_bd_dmac_intf_0(bit<24> bd, bit<48> dmac, bit<9> intf) {
         meta.fwd_metadata.out_bd = bd;
         hdr.ethernet.dstAddr = dmac;
         standard_metadata.egress_spec = intf;
         hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
     }
-    table mac_da {
+    @name("mac_da") table mac_da_0 {
         key = {
             meta.fwd_metadata.l2ptr: exact @name("meta.fwd_metadata.l2ptr") ;
         }
         actions = {
-            set_bd_dmac_intf();
+            set_bd_dmac_intf_0();
             my_drop(standard_metadata);
         }
         default_action = my_drop(standard_metadata);
     }
     apply {
-        ipv4_da_lpm.apply();
-        mac_da.apply();
+        ipv4_da_lpm_0.apply();
+        mac_da_0.apply();
     }
 }
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    action rewrite_mac(bit<48> smac) {
+    @name("rewrite_mac") action rewrite_mac_0(bit<48> smac) {
         hdr.ethernet.srcAddr = smac;
     }
-    table send_frame {
+    @name("send_frame") table send_frame_0 {
         key = {
             meta.fwd_metadata.out_bd: exact @name("meta.fwd_metadata.out_bd") ;
         }
         actions = {
-            rewrite_mac();
+            rewrite_mac_0();
             my_drop(standard_metadata);
         }
         default_action = my_drop(standard_metadata);
     }
     apply {
-        send_frame.apply();
+        send_frame_0.apply();
     }
 }
 control DeparserImpl(packet_out packet, in headers hdr) {
