--- before_pass
+++ after_pass
@@ -202,9 +202,7 @@ parser ParserImpl(packet_in packet, out
         transition Tcp_option_parser_next_option;
     }
     state Tcp_option_parser_parse_tcp_option_sack {
-        {
-            tmp = packet.lookahead<bit<16>>();
-        }
+        tmp = packet.lookahead<bit<16>>();
         verify(tmp[7:0] == 8w10 || tmp[7:0] == 8w18 || tmp[7:0] == 8w26 || tmp[7:0] == 8w34, error.TcpBadSackOptionLength);
         verify(Tcp_option_parser_tcp_hdr_bytes_left >= (bit<7>)tmp[7:0], error.TcpOptionTooLongForHeader);
         Tcp_option_parser_tcp_hdr_bytes_left = Tcp_option_parser_tcp_hdr_bytes_left - (bit<7>)tmp[7:0];
@@ -219,82 +217,74 @@ control ingress(inout headers hdr, inout
     standard_metadata_t smeta;
     standard_metadata_t smeta_1;
     @name(".my_drop") action my_drop() {
-        {
-            smeta.ingress_port = standard_metadata.ingress_port;
-            smeta.egress_spec = standard_metadata.egress_spec;
-            smeta.egress_port = standard_metadata.egress_port;
-            smeta.instance_type = standard_metadata.instance_type;
-            smeta.packet_length = standard_metadata.packet_length;
-            smeta.enq_timestamp = standard_metadata.enq_timestamp;
-            smeta.enq_qdepth = standard_metadata.enq_qdepth;
-            smeta.deq_timedelta = standard_metadata.deq_timedelta;
-            smeta.deq_qdepth = standard_metadata.deq_qdepth;
-            smeta.ingress_global_timestamp = standard_metadata.ingress_global_timestamp;
-            smeta.egress_global_timestamp = standard_metadata.egress_global_timestamp;
-            smeta.mcast_grp = standard_metadata.mcast_grp;
-            smeta.egress_rid = standard_metadata.egress_rid;
-            smeta.checksum_error = standard_metadata.checksum_error;
-            smeta.parser_error = standard_metadata.parser_error;
-            smeta.priority = standard_metadata.priority;
-        }
+        smeta.ingress_port = standard_metadata.ingress_port;
+        smeta.egress_spec = standard_metadata.egress_spec;
+        smeta.egress_port = standard_metadata.egress_port;
+        smeta.instance_type = standard_metadata.instance_type;
+        smeta.packet_length = standard_metadata.packet_length;
+        smeta.enq_timestamp = standard_metadata.enq_timestamp;
+        smeta.enq_qdepth = standard_metadata.enq_qdepth;
+        smeta.deq_timedelta = standard_metadata.deq_timedelta;
+        smeta.deq_qdepth = standard_metadata.deq_qdepth;
+        smeta.ingress_global_timestamp = standard_metadata.ingress_global_timestamp;
+        smeta.egress_global_timestamp = standard_metadata.egress_global_timestamp;
+        smeta.mcast_grp = standard_metadata.mcast_grp;
+        smeta.egress_rid = standard_metadata.egress_rid;
+        smeta.checksum_error = standard_metadata.checksum_error;
+        smeta.parser_error = standard_metadata.parser_error;
+        smeta.priority = standard_metadata.priority;
         mark_to_drop(smeta);
-        {
-            standard_metadata.ingress_port = smeta.ingress_port;
-            standard_metadata.egress_spec = smeta.egress_spec;
-            standard_metadata.egress_port = smeta.egress_port;
-            standard_metadata.instance_type = smeta.instance_type;
-            standard_metadata.packet_length = smeta.packet_length;
-            standard_metadata.enq_timestamp = smeta.enq_timestamp;
-            standard_metadata.enq_qdepth = smeta.enq_qdepth;
-            standard_metadata.deq_timedelta = smeta.deq_timedelta;
-            standard_metadata.deq_qdepth = smeta.deq_qdepth;
-            standard_metadata.ingress_global_timestamp = smeta.ingress_global_timestamp;
-            standard_metadata.egress_global_timestamp = smeta.egress_global_timestamp;
-            standard_metadata.mcast_grp = smeta.mcast_grp;
-            standard_metadata.egress_rid = smeta.egress_rid;
-            standard_metadata.checksum_error = smeta.checksum_error;
-            standard_metadata.parser_error = smeta.parser_error;
-            standard_metadata.priority = smeta.priority;
-        }
+        standard_metadata.ingress_port = smeta.ingress_port;
+        standard_metadata.egress_spec = smeta.egress_spec;
+        standard_metadata.egress_port = smeta.egress_port;
+        standard_metadata.instance_type = smeta.instance_type;
+        standard_metadata.packet_length = smeta.packet_length;
+        standard_metadata.enq_timestamp = smeta.enq_timestamp;
+        standard_metadata.enq_qdepth = smeta.enq_qdepth;
+        standard_metadata.deq_timedelta = smeta.deq_timedelta;
+        standard_metadata.deq_qdepth = smeta.deq_qdepth;
+        standard_metadata.ingress_global_timestamp = smeta.ingress_global_timestamp;
+        standard_metadata.egress_global_timestamp = smeta.egress_global_timestamp;
+        standard_metadata.mcast_grp = smeta.mcast_grp;
+        standard_metadata.egress_rid = smeta.egress_rid;
+        standard_metadata.checksum_error = smeta.checksum_error;
+        standard_metadata.parser_error = smeta.parser_error;
+        standard_metadata.priority = smeta.priority;
     }
     @name(".my_drop") action my_drop_0() {
-        {
-            smeta_1.ingress_port = standard_metadata.ingress_port;
-            smeta_1.egress_spec = standard_metadata.egress_spec;
-            smeta_1.egress_port = standard_metadata.egress_port;
-            smeta_1.instance_type = standard_metadata.instance_type;
-            smeta_1.packet_length = standard_metadata.packet_length;
-            smeta_1.enq_timestamp = standard_metadata.enq_timestamp;
-            smeta_1.enq_qdepth = standard_metadata.enq_qdepth;
-            smeta_1.deq_timedelta = standard_metadata.deq_timedelta;
-            smeta_1.deq_qdepth = standard_metadata.deq_qdepth;
-            smeta_1.ingress_global_timestamp = standard_metadata.ingress_global_timestamp;
-            smeta_1.egress_global_timestamp = standard_metadata.egress_global_timestamp;
-            smeta_1.mcast_grp = standard_metadata.mcast_grp;
-            smeta_1.egress_rid = standard_metadata.egress_rid;
-            smeta_1.checksum_error = standard_metadata.checksum_error;
-            smeta_1.parser_error = standard_metadata.parser_error;
-            smeta_1.priority = standard_metadata.priority;
-        }
+        smeta_1.ingress_port = standard_metadata.ingress_port;
+        smeta_1.egress_spec = standard_metadata.egress_spec;
+        smeta_1.egress_port = standard_metadata.egress_port;
+        smeta_1.instance_type = standard_metadata.instance_type;
+        smeta_1.packet_length = standard_metadata.packet_length;
+        smeta_1.enq_timestamp = standard_metadata.enq_timestamp;
+        smeta_1.enq_qdepth = standard_metadata.enq_qdepth;
+        smeta_1.deq_timedelta = standard_metadata.deq_timedelta;
+        smeta_1.deq_qdepth = standard_metadata.deq_qdepth;
+        smeta_1.ingress_global_timestamp = standard_metadata.ingress_global_timestamp;
+        smeta_1.egress_global_timestamp = standard_metadata.egress_global_timestamp;
+        smeta_1.mcast_grp = standard_metadata.mcast_grp;
+        smeta_1.egress_rid = standard_metadata.egress_rid;
+        smeta_1.checksum_error = standard_metadata.checksum_error;
+        smeta_1.parser_error = standard_metadata.parser_error;
+        smeta_1.priority = standard_metadata.priority;
         mark_to_drop(smeta_1);
-        {
-            standard_metadata.ingress_port = smeta_1.ingress_port;
-            standard_metadata.egress_spec = smeta_1.egress_spec;
-            standard_metadata.egress_port = smeta_1.egress_port;
-            standard_metadata.instance_type = smeta_1.instance_type;
-            standard_metadata.packet_length = smeta_1.packet_length;
-            standard_metadata.enq_timestamp = smeta_1.enq_timestamp;
-            standard_metadata.enq_qdepth = smeta_1.enq_qdepth;
-            standard_metadata.deq_timedelta = smeta_1.deq_timedelta;
-            standard_metadata.deq_qdepth = smeta_1.deq_qdepth;
-            standard_metadata.ingress_global_timestamp = smeta_1.ingress_global_timestamp;
-            standard_metadata.egress_global_timestamp = smeta_1.egress_global_timestamp;
-            standard_metadata.mcast_grp = smeta_1.mcast_grp;
-            standard_metadata.egress_rid = smeta_1.egress_rid;
-            standard_metadata.checksum_error = smeta_1.checksum_error;
-            standard_metadata.parser_error = smeta_1.parser_error;
-            standard_metadata.priority = smeta_1.priority;
-        }
+        standard_metadata.ingress_port = smeta_1.ingress_port;
+        standard_metadata.egress_spec = smeta_1.egress_spec;
+        standard_metadata.egress_port = smeta_1.egress_port;
+        standard_metadata.instance_type = smeta_1.instance_type;
+        standard_metadata.packet_length = smeta_1.packet_length;
+        standard_metadata.enq_timestamp = smeta_1.enq_timestamp;
+        standard_metadata.enq_qdepth = smeta_1.enq_qdepth;
+        standard_metadata.deq_timedelta = smeta_1.deq_timedelta;
+        standard_metadata.deq_qdepth = smeta_1.deq_qdepth;
+        standard_metadata.ingress_global_timestamp = smeta_1.ingress_global_timestamp;
+        standard_metadata.egress_global_timestamp = smeta_1.egress_global_timestamp;
+        standard_metadata.mcast_grp = smeta_1.mcast_grp;
+        standard_metadata.egress_rid = smeta_1.egress_rid;
+        standard_metadata.checksum_error = smeta_1.checksum_error;
+        standard_metadata.parser_error = smeta_1.parser_error;
+        standard_metadata.priority = smeta_1.priority;
     }
     @name("ingress.set_l2ptr") action set_l2ptr(bit<32> l2ptr) {
         meta._fwd_metadata_l2ptr0 = l2ptr;
@@ -333,43 +323,39 @@ control ingress(inout headers hdr, inout
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     standard_metadata_t smeta_2;
     @name(".my_drop") action my_drop_1() {
-        {
-            smeta_2.ingress_port = standard_metadata.ingress_port;
-            smeta_2.egress_spec = standard_metadata.egress_spec;
-            smeta_2.egress_port = standard_metadata.egress_port;
-            smeta_2.instance_type = standard_metadata.instance_type;
-            smeta_2.packet_length = standard_metadata.packet_length;
-            smeta_2.enq_timestamp = standard_metadata.enq_timestamp;
-            smeta_2.enq_qdepth = standard_metadata.enq_qdepth;
-            smeta_2.deq_timedelta = standard_metadata.deq_timedelta;
-            smeta_2.deq_qdepth = standard_metadata.deq_qdepth;
-            smeta_2.ingress_global_timestamp = standard_metadata.ingress_global_timestamp;
-            smeta_2.egress_global_timestamp = standard_metadata.egress_global_timestamp;
-            smeta_2.mcast_grp = standard_metadata.mcast_grp;
-            smeta_2.egress_rid = standard_metadata.egress_rid;
-            smeta_2.checksum_error = standard_metadata.checksum_error;
-            smeta_2.parser_error = standard_metadata.parser_error;
-            smeta_2.priority = standard_metadata.priority;
-        }
+        smeta_2.ingress_port = standard_metadata.ingress_port;
+        smeta_2.egress_spec = standard_metadata.egress_spec;
+        smeta_2.egress_port = standard_metadata.egress_port;
+        smeta_2.instance_type = standard_metadata.instance_type;
+        smeta_2.packet_length = standard_metadata.packet_length;
+        smeta_2.enq_timestamp = standard_metadata.enq_timestamp;
+        smeta_2.enq_qdepth = standard_metadata.enq_qdepth;
+        smeta_2.deq_timedelta = standard_metadata.deq_timedelta;
+        smeta_2.deq_qdepth = standard_metadata.deq_qdepth;
+        smeta_2.ingress_global_timestamp = standard_metadata.ingress_global_timestamp;
+        smeta_2.egress_global_timestamp = standard_metadata.egress_global_timestamp;
+        smeta_2.mcast_grp = standard_metadata.mcast_grp;
+        smeta_2.egress_rid = standard_metadata.egress_rid;
+        smeta_2.checksum_error = standard_metadata.checksum_error;
+        smeta_2.parser_error = standard_metadata.parser_error;
+        smeta_2.priority = standard_metadata.priority;
         mark_to_drop(smeta_2);
-        {
-            standard_metadata.ingress_port = smeta_2.ingress_port;
-            standard_metadata.egress_spec = smeta_2.egress_spec;
-            standard_metadata.egress_port = smeta_2.egress_port;
-            standard_metadata.instance_type = smeta_2.instance_type;
-            standard_metadata.packet_length = smeta_2.packet_length;
-            standard_metadata.enq_timestamp = smeta_2.enq_timestamp;
-            standard_metadata.enq_qdepth = smeta_2.enq_qdepth;
-            standard_metadata.deq_timedelta = smeta_2.deq_timedelta;
-            standard_metadata.deq_qdepth = smeta_2.deq_qdepth;
-            standard_metadata.ingress_global_timestamp = smeta_2.ingress_global_timestamp;
-            standard_metadata.egress_global_timestamp = smeta_2.egress_global_timestamp;
-            standard_metadata.mcast_grp = smeta_2.mcast_grp;
-            standard_metadata.egress_rid = smeta_2.egress_rid;
-            standard_metadata.checksum_error = smeta_2.checksum_error;
-            standard_metadata.parser_error = smeta_2.parser_error;
-            standard_metadata.priority = smeta_2.priority;
-        }
+        standard_metadata.ingress_port = smeta_2.ingress_port;
+        standard_metadata.egress_spec = smeta_2.egress_spec;
+        standard_metadata.egress_port = smeta_2.egress_port;
+        standard_metadata.instance_type = smeta_2.instance_type;
+        standard_metadata.packet_length = smeta_2.packet_length;
+        standard_metadata.enq_timestamp = smeta_2.enq_timestamp;
+        standard_metadata.enq_qdepth = smeta_2.enq_qdepth;
+        standard_metadata.deq_timedelta = smeta_2.deq_timedelta;
+        standard_metadata.deq_qdepth = smeta_2.deq_qdepth;
+        standard_metadata.ingress_global_timestamp = smeta_2.ingress_global_timestamp;
+        standard_metadata.egress_global_timestamp = smeta_2.egress_global_timestamp;
+        standard_metadata.mcast_grp = smeta_2.mcast_grp;
+        standard_metadata.egress_rid = smeta_2.egress_rid;
+        standard_metadata.checksum_error = smeta_2.checksum_error;
+        standard_metadata.parser_error = smeta_2.parser_error;
+        standard_metadata.priority = smeta_2.priority;
     }
     @name("egress.rewrite_mac") action rewrite_mac(bit<48> smac) {
         hdr.ethernet.srcAddr = smac;
@@ -393,58 +379,56 @@ control DeparserImpl(packet_out packet,
         packet.emit<ethernet_t>(hdr.ethernet);
         packet.emit<ipv4_t>(hdr.ipv4);
         packet.emit<tcp_t>(hdr.tcp);
-        {
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[0].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[0].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[0].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[0].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[0].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[1].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[1].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[1].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[1].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[1].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[2].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[2].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[2].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[2].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[2].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[3].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[3].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[3].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[3].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[3].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[4].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[4].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[4].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[4].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[4].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[5].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[5].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[5].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[5].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[5].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[6].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[6].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[6].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[6].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[6].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[7].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[7].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[7].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[7].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[7].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[8].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[8].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[8].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[8].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[8].sack);
-            packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[9].end);
-            packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[9].nop);
-            packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[9].ss);
-            packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[9].s);
-            packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[9].sack);
-        }
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[0].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[0].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[0].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[0].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[0].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[1].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[1].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[1].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[1].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[1].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[2].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[2].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[2].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[2].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[2].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[3].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[3].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[3].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[3].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[3].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[4].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[4].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[4].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[4].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[4].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[5].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[5].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[5].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[5].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[5].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[6].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[6].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[6].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[6].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[6].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[7].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[7].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[7].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[7].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[7].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[8].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[8].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[8].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[8].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[8].sack);
+        packet.emit<Tcp_option_end_h>(hdr.tcp_options_vec[9].end);
+        packet.emit<Tcp_option_nop_h>(hdr.tcp_options_vec[9].nop);
+        packet.emit<Tcp_option_ss_h>(hdr.tcp_options_vec[9].ss);
+        packet.emit<Tcp_option_s_h>(hdr.tcp_options_vec[9].s);
+        packet.emit<Tcp_option_sack_h>(hdr.tcp_options_vec[9].sack);
         packet.emit<Tcp_option_padding_h>(hdr.tcp_options_padding);
     }
 }
