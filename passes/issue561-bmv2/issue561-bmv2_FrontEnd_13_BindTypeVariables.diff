--- before_pass
+++ after_pass
@@ -109,29 +109,29 @@ parser Tcp_option_parser(packet_in b, in
         }
     }
     state parse_tcp_option_end {
-        b.extract(vec.next.end);
+        b.extract<Tcp_option_end_h>(vec.next.end);
         tcp_hdr_bytes_left = tcp_hdr_bytes_left - 7w1;
         transition consume_remaining_tcp_hdr_and_accept;
     }
     state consume_remaining_tcp_hdr_and_accept {
-        b.extract(padding, (bit<32>)(9w8 * (bit<9>)tcp_hdr_bytes_left));
+        b.extract<Tcp_option_padding_h>(padding, (bit<32>)(9w8 * (bit<9>)tcp_hdr_bytes_left));
         transition accept;
     }
     state parse_tcp_option_nop {
-        b.extract(vec.next.nop);
+        b.extract<Tcp_option_nop_h>(vec.next.nop);
         tcp_hdr_bytes_left = tcp_hdr_bytes_left - 7w1;
         transition next_option;
     }
     state parse_tcp_option_ss {
         verify(tcp_hdr_bytes_left >= 7w5, error.TcpOptionTooLongForHeader);
         tcp_hdr_bytes_left = tcp_hdr_bytes_left - 7w5;
-        b.extract(vec.next.ss);
+        b.extract<Tcp_option_ss_h>(vec.next.ss);
         transition next_option;
     }
     state parse_tcp_option_s {
         verify(tcp_hdr_bytes_left >= 7w4, error.TcpOptionTooLongForHeader);
         tcp_hdr_bytes_left = tcp_hdr_bytes_left - 7w4;
-        b.extract(vec.next.s);
+        b.extract<Tcp_option_s_h>(vec.next.s);
         transition next_option;
     }
     state parse_tcp_option_sack {
@@ -139,7 +139,7 @@ parser Tcp_option_parser(packet_in b, in
         verify(n_sack_bytes == 8w10 || n_sack_bytes == 8w18 || n_sack_bytes == 8w26 || n_sack_bytes == 8w34, error.TcpBadSackOptionLength);
         verify(tcp_hdr_bytes_left >= (bit<7>)n_sack_bytes, error.TcpOptionTooLongForHeader);
         tcp_hdr_bytes_left = tcp_hdr_bytes_left - (bit<7>)n_sack_bytes;
-        b.extract(vec.next.sack, (bit<32>)(8w8 * n_sack_bytes - 8w16));
+        b.extract<Tcp_option_sack_h>(vec.next.sack, (bit<32>)(8w8 * n_sack_bytes - 8w16));
         transition next_option;
     }
 }
@@ -150,21 +150,21 @@ parser ParserImpl(packet_in packet, out
         transition parse_ethernet;
     }
     state parse_ethernet {
-        packet.extract(hdr.ethernet);
+        packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
         }
     }
     state parse_ipv4 {
-        packet.extract(hdr.ipv4);
+        packet.extract<ipv4_t>(hdr.ipv4);
         transition select(hdr.ipv4.protocol) {
             8w6: parse_tcp;
             default: accept;
         }
     }
     state parse_tcp {
-        packet.extract(hdr.tcp);
+        packet.extract<tcp_t>(hdr.tcp);
         Tcp_option_parser_inst.apply(packet, hdr.tcp.dataOffset, hdr.tcp_options_vec, hdr.tcp_options_padding);
         transition accept;
     }
@@ -227,11 +227,11 @@ control egress(inout headers hdr, inout
 }
 control DeparserImpl(packet_out packet, in headers hdr) {
     apply {
-        packet.emit(hdr.ethernet);
-        packet.emit(hdr.ipv4);
-        packet.emit(hdr.tcp);
-        packet.emit(hdr.tcp_options_vec);
-        packet.emit(hdr.tcp_options_padding);
+        packet.emit<ethernet_t>(hdr.ethernet);
+        packet.emit<ipv4_t>(hdr.ipv4);
+        packet.emit<tcp_t>(hdr.tcp);
+        packet.emit<Tcp_option_h[10]>(hdr.tcp_options_vec);
+        packet.emit<Tcp_option_padding_h>(hdr.tcp_options_padding);
     }
 }
 control verifyChecksum(inout headers hdr, inout metadata meta) {
@@ -242,4 +242,4 @@ control computeChecksum(inout headers hd
     apply {
     }
 }
-V1Switch(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
+V1Switch<headers, metadata>(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
