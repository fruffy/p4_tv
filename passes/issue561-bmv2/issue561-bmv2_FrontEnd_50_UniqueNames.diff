--- before_pass
+++ after_pass
@@ -87,10 +87,10 @@ struct Tcp_option_sack_top {
     bit<8> length;
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    bit<7> Tcp_option_parser_tcp_hdr_bytes_left_0;
-    bit<8> Tcp_option_parser_n_sack_bytes_0;
-    bit<8> Tcp_option_parser_tmp_1;
-    Tcp_option_sack_top Tcp_option_parser_tmp_2;
+    bit<7> Tcp_option_parser_tcp_hdr_bytes_left;
+    bit<8> Tcp_option_parser_n_sack_bytes;
+    bit<8> Tcp_option_parser_tmp;
+    Tcp_option_sack_top Tcp_option_parser_tmp_0;
     state start {
         packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
@@ -162,18 +162,18 @@ parser ParserImpl(packet_in packet, out
     }
     state Tcp_option_parser_start {
         verify(hdr.tcp.dataOffset >= 4w5, error.TcpDataOffsetTooSmall);
-        Tcp_option_parser_tcp_hdr_bytes_left_0 = (bit<7>)(hdr.tcp.dataOffset + 4w11) << 2;
+        Tcp_option_parser_tcp_hdr_bytes_left = (bit<7>)(hdr.tcp.dataOffset + 4w11) << 2;
         transition Tcp_option_parser_next_option;
     }
     state Tcp_option_parser_next_option {
-        transition select(Tcp_option_parser_tcp_hdr_bytes_left_0) {
+        transition select(Tcp_option_parser_tcp_hdr_bytes_left) {
             7w0: parse_tcp_0;
             default: Tcp_option_parser_next_option_part2;
         }
     }
     state Tcp_option_parser_next_option_part2 {
-        Tcp_option_parser_tmp_1 = packet.lookahead<bit<8>>();
-        transition select(Tcp_option_parser_tmp_1) {
+        Tcp_option_parser_tmp = packet.lookahead<bit<8>>();
+        transition select(Tcp_option_parser_tmp) {
             8w0: Tcp_option_parser_parse_tcp_option_end;
             8w1: Tcp_option_parser_parse_tcp_option_nop;
             8w2: Tcp_option_parser_parse_tcp_option_ss;
@@ -183,34 +183,34 @@ parser ParserImpl(packet_in packet, out
     }
     state Tcp_option_parser_parse_tcp_option_end {
         packet.extract<Tcp_option_end_h>(hdr.tcp_options_vec.next.end);
-        Tcp_option_parser_tcp_hdr_bytes_left_0 = Tcp_option_parser_tcp_hdr_bytes_left_0 + 7w127;
-        packet.extract<Tcp_option_padding_h>(hdr.tcp_options_padding, (bit<32>)((bit<9>)Tcp_option_parser_tcp_hdr_bytes_left_0 << 3));
+        Tcp_option_parser_tcp_hdr_bytes_left = Tcp_option_parser_tcp_hdr_bytes_left + 7w127;
+        packet.extract<Tcp_option_padding_h>(hdr.tcp_options_padding, (bit<32>)((bit<9>)Tcp_option_parser_tcp_hdr_bytes_left << 3));
         transition parse_tcp_0;
     }
     state Tcp_option_parser_parse_tcp_option_nop {
         packet.extract<Tcp_option_nop_h>(hdr.tcp_options_vec.next.nop);
-        Tcp_option_parser_tcp_hdr_bytes_left_0 = Tcp_option_parser_tcp_hdr_bytes_left_0 + 7w127;
+        Tcp_option_parser_tcp_hdr_bytes_left = Tcp_option_parser_tcp_hdr_bytes_left + 7w127;
         transition Tcp_option_parser_next_option;
     }
     state Tcp_option_parser_parse_tcp_option_ss {
-        verify(Tcp_option_parser_tcp_hdr_bytes_left_0 >= 7w5, error.TcpOptionTooLongForHeader);
-        Tcp_option_parser_tcp_hdr_bytes_left_0 = Tcp_option_parser_tcp_hdr_bytes_left_0 + 7w123;
+        verify(Tcp_option_parser_tcp_hdr_bytes_left >= 7w5, error.TcpOptionTooLongForHeader);
+        Tcp_option_parser_tcp_hdr_bytes_left = Tcp_option_parser_tcp_hdr_bytes_left + 7w123;
         packet.extract<Tcp_option_ss_h>(hdr.tcp_options_vec.next.ss);
         transition Tcp_option_parser_next_option;
     }
     state Tcp_option_parser_parse_tcp_option_s {
-        verify(Tcp_option_parser_tcp_hdr_bytes_left_0 >= 7w4, error.TcpOptionTooLongForHeader);
-        Tcp_option_parser_tcp_hdr_bytes_left_0 = Tcp_option_parser_tcp_hdr_bytes_left_0 + 7w124;
+        verify(Tcp_option_parser_tcp_hdr_bytes_left >= 7w4, error.TcpOptionTooLongForHeader);
+        Tcp_option_parser_tcp_hdr_bytes_left = Tcp_option_parser_tcp_hdr_bytes_left + 7w124;
         packet.extract<Tcp_option_s_h>(hdr.tcp_options_vec.next.s);
         transition Tcp_option_parser_next_option;
     }
     state Tcp_option_parser_parse_tcp_option_sack {
-        Tcp_option_parser_tmp_2 = packet.lookahead<Tcp_option_sack_top>();
-        Tcp_option_parser_n_sack_bytes_0 = Tcp_option_parser_tmp_2.length;
-        verify(Tcp_option_parser_n_sack_bytes_0 == 8w10 || Tcp_option_parser_n_sack_bytes_0 == 8w18 || Tcp_option_parser_n_sack_bytes_0 == 8w26 || Tcp_option_parser_n_sack_bytes_0 == 8w34, error.TcpBadSackOptionLength);
-        verify(Tcp_option_parser_tcp_hdr_bytes_left_0 >= (bit<7>)Tcp_option_parser_n_sack_bytes_0, error.TcpOptionTooLongForHeader);
-        Tcp_option_parser_tcp_hdr_bytes_left_0 = Tcp_option_parser_tcp_hdr_bytes_left_0 - (bit<7>)Tcp_option_parser_n_sack_bytes_0;
-        packet.extract<Tcp_option_sack_h>(hdr.tcp_options_vec.next.sack, (bit<32>)((Tcp_option_parser_n_sack_bytes_0 << 3) + 8w240));
+        Tcp_option_parser_tmp_0 = packet.lookahead<Tcp_option_sack_top>();
+        Tcp_option_parser_n_sack_bytes = Tcp_option_parser_tmp_0.length;
+        verify(Tcp_option_parser_n_sack_bytes == 8w10 || Tcp_option_parser_n_sack_bytes == 8w18 || Tcp_option_parser_n_sack_bytes == 8w26 || Tcp_option_parser_n_sack_bytes == 8w34, error.TcpBadSackOptionLength);
+        verify(Tcp_option_parser_tcp_hdr_bytes_left >= (bit<7>)Tcp_option_parser_n_sack_bytes, error.TcpOptionTooLongForHeader);
+        Tcp_option_parser_tcp_hdr_bytes_left = Tcp_option_parser_tcp_hdr_bytes_left - (bit<7>)Tcp_option_parser_n_sack_bytes;
+        packet.extract<Tcp_option_sack_h>(hdr.tcp_options_vec.next.sack, (bit<32>)((Tcp_option_parser_n_sack_bytes << 3) + 8w240));
         transition Tcp_option_parser_next_option;
     }
     state parse_tcp_0 {
@@ -218,65 +218,65 @@ parser ParserImpl(packet_in packet, out
     }
 }
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    @name(".my_drop") action my_drop_2(inout standard_metadata_t smeta_0) {
+    @name(".my_drop") action my_drop(inout standard_metadata_t smeta_0) {
         mark_to_drop(smeta_0);
     }
-    @name(".my_drop") action my_drop_3(inout standard_metadata_t smeta_0) {
+    @name(".my_drop") action my_drop_0(inout standard_metadata_t smeta_0) {
         mark_to_drop(smeta_0);
     }
-    @name("set_l2ptr") action set_l2ptr_0(bit<32> l2ptr) {
+    @name("set_l2ptr") action set_l2ptr(bit<32> l2ptr) {
         meta.fwd_metadata.l2ptr = l2ptr;
     }
-    @name("ipv4_da_lpm") table ipv4_da_lpm {
+    @name("ipv4_da_lpm") table ipv4_da_lpm_0 {
         key = {
             hdr.ipv4.dstAddr: lpm @name("hdr.ipv4.dstAddr") ;
         }
         actions = {
-            set_l2ptr_0();
-            my_drop_2(standard_metadata);
+            set_l2ptr();
+            my_drop(standard_metadata);
         }
-        default_action = my_drop_2(standard_metadata);
+        default_action = my_drop(standard_metadata);
     }
-    @name("set_bd_dmac_intf") action set_bd_dmac_intf_0(bit<24> bd, bit<48> dmac, bit<9> intf) {
+    @name("set_bd_dmac_intf") action set_bd_dmac_intf(bit<24> bd, bit<48> dmac, bit<9> intf) {
         meta.fwd_metadata.out_bd = bd;
         hdr.ethernet.dstAddr = dmac;
         standard_metadata.egress_spec = intf;
         hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
     }
-    @name("mac_da") table mac_da {
+    @name("mac_da") table mac_da_0 {
         key = {
             meta.fwd_metadata.l2ptr: exact @name("meta.fwd_metadata.l2ptr") ;
         }
         actions = {
-            set_bd_dmac_intf_0();
-            my_drop_3(standard_metadata);
+            set_bd_dmac_intf();
+            my_drop_0(standard_metadata);
         }
-        default_action = my_drop_3(standard_metadata);
+        default_action = my_drop_0(standard_metadata);
     }
     apply {
-        ipv4_da_lpm.apply();
-        mac_da.apply();
+        ipv4_da_lpm_0.apply();
+        mac_da_0.apply();
     }
 }
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
-    @name(".my_drop") action my_drop_4(inout standard_metadata_t smeta_0) {
+    @name(".my_drop") action my_drop_1(inout standard_metadata_t smeta_0) {
         mark_to_drop(smeta_0);
     }
-    @name("rewrite_mac") action rewrite_mac_0(bit<48> smac) {
+    @name("rewrite_mac") action rewrite_mac(bit<48> smac) {
         hdr.ethernet.srcAddr = smac;
     }
-    @name("send_frame") table send_frame {
+    @name("send_frame") table send_frame_0 {
         key = {
             meta.fwd_metadata.out_bd: exact @name("meta.fwd_metadata.out_bd") ;
         }
         actions = {
-            rewrite_mac_0();
-            my_drop_4(standard_metadata);
+            rewrite_mac();
+            my_drop_1(standard_metadata);
         }
-        default_action = my_drop_4(standard_metadata);
+        default_action = my_drop_1(standard_metadata);
     }
     apply {
-        send_frame.apply();
+        send_frame_0.apply();
     }
 }
 control DeparserImpl(packet_out packet, in headers hdr) {
