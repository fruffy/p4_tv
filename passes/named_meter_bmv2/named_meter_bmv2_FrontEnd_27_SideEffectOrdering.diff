--- before_pass
+++ after_pass
@@ -18,7 +18,9 @@ struct headers {
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("parse_ethernet") state parse_ethernet {
-        packet.extract<ethernet_t>(hdr.ethernet);
+        {
+            packet.extract<ethernet_t>(hdr.ethernet);
+        }
         transition accept;
     }
     @name("start") state start {
@@ -32,7 +34,9 @@ control egress(inout headers hdr, inout
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("namedmeter") direct_meter<bit<32>>(MeterType.packets) my_meter_0;
     @name("_drop") action _drop_0() {
-        mark_to_drop(standard_metadata);
+        {
+            mark_to_drop(standard_metadata);
+        }
     }
     @name("_nop") action _nop_1() {
     }
@@ -49,12 +53,20 @@ control ingress(inout headers hdr, inout
         default_action = NoAction();
     }
     @name("m_action") action m_action(bit<9> meter_idx) {
-        standard_metadata.egress_spec = meter_idx;
-        standard_metadata.egress_spec = 9w1;
-        my_meter_0.read(meta.meta.meter_tag);
+        {
+            standard_metadata.egress_spec = meter_idx;
+        }
+        {
+            standard_metadata.egress_spec = 9w1;
+        }
+        {
+            my_meter_0.read(meta.meta.meter_tag);
+        }
     }
     @name("_nop") action _nop_2() {
-        my_meter_0.read(meta.meta.meter_tag);
+        {
+            my_meter_0.read(meta.meta.meter_tag);
+        }
     }
     @name("m_table") table m_table_0 {
         actions = {
@@ -70,13 +82,19 @@ control ingress(inout headers hdr, inout
         meters = my_meter_0;
     }
     apply {
-        m_table_0.apply();
-        m_filter_0.apply();
+        {
+            m_table_0.apply();
+        }
+        {
+            m_filter_0.apply();
+        }
     }
 }
 control DeparserImpl(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
     }
 }
 control verifyChecksum(inout headers hdr, inout metadata meta) {
