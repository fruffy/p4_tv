--- before_pass
+++ after_pass
@@ -30,50 +30,32 @@ struct headers {
 }
 parser MyParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     state start {
-        {
-            packet.extract<ethernet_t>(hdr.ethernet);
-        }
+        packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
             16w0x800: ipv4;
             default: accept;
         }
     }
     state ipv4 {
-        {
-            packet.extract<ipv4_t>(hdr.ipv4);
-        }
+        packet.extract<ipv4_t>(hdr.ipv4);
         transition accept;
     }
 }
 control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        {
-            verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
-        }
+        verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.isValid(), { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
     }
 }
 control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("drop") action drop_0() {
-        {
-            mark_to_drop(standard_metadata);
-        }
+        mark_to_drop(standard_metadata);
     }
     @name("ipv4_forward") action ipv4_forward_0(macAddr_t dstAddr, egressSpec_t port) {
-        {
-            hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
-        }
-        {
-            hdr.ethernet.dstAddr = dstAddr;
-        }
-        {
-            standard_metadata.egress_spec = port;
-        }
-        {
-            hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
-        }
-        {
-            hdr.ipv4.hdrChecksum = 16w1;
-        }
+        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
+        hdr.ethernet.dstAddr = dstAddr;
+        standard_metadata.egress_spec = port;
+        hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        hdr.ipv4.hdrChecksum = 16w1;
     }
     @name("ipv4_lpm") table ipv4_lpm_0 {
         key = {
@@ -103,12 +85,8 @@ control MyComputeChecksum(inout headers
 }
 control MyDeparser(packet_out packet, in headers hdr) {
     apply {
-        {
-            packet.emit<ethernet_t>(hdr.ethernet);
-        }
-        {
-            packet.emit<ipv4_t>(hdr.ipv4);
-        }
+        packet.emit<ethernet_t>(hdr.ethernet);
+        packet.emit<ipv4_t>(hdr.ipv4);
     }
 }
 V1Switch<headers, metadata>(MyParser(), MyVerifyChecksum(), MyIngress(), MyEgress(), MyComputeChecksum(), MyDeparser()) main;
