--- before_pass
+++ after_pass
@@ -19,9 +19,9 @@ struct headers {
     p4calc_t   p4calc;
 }
 parser Parser(packet_in packet, out headers hdr) {
-    p4calc_t tmp_3;
-    p4calc_t tmp_4;
-    p4calc_t tmp_5;
+    p4calc_t tmp;
+    p4calc_t tmp_0;
+    p4calc_t tmp_1;
     state start {
         packet.extract<ethernet_t>(hdr.ethernet);
         transition select(hdr.ethernet.etherType) {
@@ -30,10 +30,10 @@ parser Parser(packet_in packet, out head
         }
     }
     state check_p4calc {
-        tmp_3 = packet.lookahead<p4calc_t>();
-        tmp_4 = packet.lookahead<p4calc_t>();
-        tmp_5 = packet.lookahead<p4calc_t>();
-        transition select(tmp_3.p, tmp_4.four, tmp_5.ver) {
+        tmp = packet.lookahead<p4calc_t>();
+        tmp_0 = packet.lookahead<p4calc_t>();
+        tmp_1 = packet.lookahead<p4calc_t>();
+        transition select(tmp.p, tmp_0.four, tmp_1.ver) {
             (8w0x50, 8w0x34, 8w0x1): parse_p4calc;
             default: accept;
         }
@@ -44,71 +44,71 @@ parser Parser(packet_in packet, out head
     }
 }
 control Ingress(inout headers hdr, out bool xout) {
-    bit<48> tmp_6;
-    @name("operation_add") action operation_add_0() {
-        tmp_6 = hdr.ethernet.dstAddr;
+    bit<48> tmp_2;
+    @name("operation_add") action operation_add() {
+        tmp_2 = hdr.ethernet.dstAddr;
         hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
-        hdr.ethernet.srcAddr = tmp_6;
+        hdr.ethernet.srcAddr = tmp_2;
         hdr.p4calc.res = hdr.p4calc.operand_a + hdr.p4calc.operand_b;
     }
-    @name("operation_sub") action operation_sub_0() {
-        tmp_6 = hdr.ethernet.dstAddr;
+    @name("operation_sub") action operation_sub() {
+        tmp_2 = hdr.ethernet.dstAddr;
         hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
-        hdr.ethernet.srcAddr = tmp_6;
+        hdr.ethernet.srcAddr = tmp_2;
         hdr.p4calc.res = hdr.p4calc.operand_a - hdr.p4calc.operand_b;
     }
-    @name("operation_and") action operation_and_0() {
-        tmp_6 = hdr.ethernet.dstAddr;
+    @name("operation_and") action operation_and() {
+        tmp_2 = hdr.ethernet.dstAddr;
         hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
-        hdr.ethernet.srcAddr = tmp_6;
+        hdr.ethernet.srcAddr = tmp_2;
         hdr.p4calc.res = hdr.p4calc.operand_a & hdr.p4calc.operand_b;
     }
-    @name("operation_or") action operation_or_0() {
-        tmp_6 = hdr.ethernet.dstAddr;
+    @name("operation_or") action operation_or() {
+        tmp_2 = hdr.ethernet.dstAddr;
         hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
-        hdr.ethernet.srcAddr = tmp_6;
+        hdr.ethernet.srcAddr = tmp_2;
         hdr.p4calc.res = hdr.p4calc.operand_a | hdr.p4calc.operand_b;
     }
-    @name("operation_xor") action operation_xor_0() {
-        tmp_6 = hdr.ethernet.dstAddr;
+    @name("operation_xor") action operation_xor() {
+        tmp_2 = hdr.ethernet.dstAddr;
         hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
-        hdr.ethernet.srcAddr = tmp_6;
+        hdr.ethernet.srcAddr = tmp_2;
         hdr.p4calc.res = hdr.p4calc.operand_a ^ hdr.p4calc.operand_b;
     }
-    @name("operation_drop") action operation_drop_0() {
+    @name("operation_drop") action operation_drop() {
         xout = false;
     }
-    @name("operation_drop") action operation_drop_1() {
+    @name("operation_drop") action operation_drop_2() {
         xout = false;
     }
-    @name("calculate") table calculate {
+    @name("calculate") table calculate_0 {
         key = {
             hdr.p4calc.op: exact @name("hdr.p4calc.op") ;
         }
         actions = {
-            operation_add_0();
-            operation_sub_0();
-            operation_and_0();
-            operation_or_0();
-            operation_xor_0();
-            operation_drop_0();
+            operation_add();
+            operation_sub();
+            operation_and();
+            operation_or();
+            operation_xor();
+            operation_drop();
         }
-        const default_action = operation_drop_0();
+        const default_action = operation_drop();
         const entries = {
-                        8w0x2b : operation_add_0();
-                        8w0x2d : operation_sub_0();
-                        8w0x26 : operation_and_0();
-                        8w0x7c : operation_or_0();
-                        8w0x5e : operation_xor_0();
+                        8w0x2b : operation_add();
+                        8w0x2d : operation_sub();
+                        8w0x26 : operation_and();
+                        8w0x7c : operation_or();
+                        8w0x5e : operation_xor();
         }
         implementation = hash_table(32w8);
     }
     apply {
         xout = true;
         if (hdr.p4calc.isValid()) {
-            calculate.apply();
+            calculate_0.apply();
         } else {
-            operation_drop_1();
+            operation_drop_2();
         }
     }
 }
