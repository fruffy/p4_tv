--- before_pass
+++ after_pass
@@ -38,28 +38,24 @@ parser prs(packet_in p, out Headers_t he
         transition accept;
     }
 }
-control Check(in IPv4Address address, inout bool pass) {
-    @name("Reject") action Reject_0() {
-        pass = false;
+control pipe(inout Headers_t headers, out bool pass) {
+    IPv4Address address_0;
+    bool pass_0;
+    @name("c1.Reject") action c1_Reject() {
+        pass_0 = false;
     }
-    @name("Check_ip") table Check_ip_0 {
+    @name("c1.Check_ip") table c1_Check_ip {
         key = {
-            address: exact @name("address") ;
+            address_0: exact @name("address") ;
         }
         actions = {
-            Reject_0();
+            c1_Reject();
             NoAction();
         }
         implementation = hash_table(32w1024);
         const default_action = NoAction();
     }
     apply {
-        Check_ip_0.apply();
-    }
-}
-control pipe(inout Headers_t headers, out bool pass) {
-    @name("c1") Check() c1_0;
-    apply {
         bool hasReturned = false;
         pass = true;
         if (!headers.ipv4.isValid()) {
@@ -69,8 +65,18 @@ control pipe(inout Headers_t headers, ou
             }
         }
         if (!hasReturned) {
-            c1_0.apply(headers.ipv4.srcAddr, pass);
-            c1_0.apply(headers.ipv4.dstAddr, pass);
+            {
+                address_0 = headers.ipv4.srcAddr;
+                pass_0 = pass;
+                c1_Check_ip.apply();
+                pass = pass_0;
+            }
+            {
+                address_0 = headers.ipv4.dstAddr;
+                pass_0 = pass;
+                c1_Check_ip.apply();
+                pass = pass_0;
+            }
         }
     }
 }
