--- before_pass
+++ after_pass
@@ -27,26 +27,20 @@ struct Headers_t {
 }
 parser prs(packet_in p, out Headers_t headers) {
     state start {
-        {
-            p.extract<Ethernet_h>(headers.ethernet);
-        }
+        p.extract<Ethernet_h>(headers.ethernet);
         transition select(headers.ethernet.etherType) {
             16w0x800: ip;
             default: reject;
         }
     }
     state ip {
-        {
-            p.extract<IPv4_h>(headers.ipv4);
-        }
+        p.extract<IPv4_h>(headers.ipv4);
         transition accept;
     }
 }
 control Check(in IPv4Address address, inout bool pass) {
     @name("Reject") action Reject_0() {
-        {
-            pass = false;
-        }
+        pass = false;
     }
     @name("Check_ip") table Check_ip_0 {
         key = {
@@ -60,29 +54,19 @@ control Check(in IPv4Address address, in
         const default_action = NoAction();
     }
     apply {
-        {
-            Check_ip_0.apply();
-        }
+        Check_ip_0.apply();
     }
 }
 control pipe(inout Headers_t headers, out bool pass) {
     @name("c1") Check() c1_0;
     apply {
-        {
-            pass = true;
-        }
+        pass = true;
         if (!headers.ipv4.isValid()) {
-            {
-                pass = false;
-            }
+            pass = false;
             return;
         }
-        {
-            c1_0.apply(headers.ipv4.srcAddr, pass);
-        }
-        {
-            c1_0.apply(headers.ipv4.dstAddr, pass);
-        }
+        c1_0.apply(headers.ipv4.srcAddr, pass);
+        c1_0.apply(headers.ipv4.dstAddr, pass);
     }
 }
 ebpfFilter<Headers_t>(prs(), pipe()) main;
