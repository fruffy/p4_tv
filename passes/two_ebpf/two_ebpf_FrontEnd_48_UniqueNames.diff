--- before_pass
+++ after_pass
@@ -39,38 +39,38 @@ parser prs(packet_in p, out Headers_t he
     }
 }
 control pipe(inout Headers_t headers, out bool pass) {
-    IPv4Address address_0;
-    bool pass_0;
-    @name("c1.Reject") action c1_Reject() {
-        pass_0 = false;
+    IPv4Address address;
+    bool pass_1;
+    @name("c1.Reject") action c1_Reject_0() {
+        pass_1 = false;
     }
-    @name("c1.Check_ip") table c1_Check_ip {
+    @name("c1.Check_ip") table c1_Check_ip_0 {
         key = {
-            address_0: exact @name("address") ;
+            address: exact @name("address") ;
         }
         actions = {
-            c1_Reject();
+            c1_Reject_0();
             NoAction();
         }
         implementation = hash_table(32w1024);
         const default_action = NoAction();
     }
     apply {
-        bool hasReturned = false;
+        bool hasReturned_0 = false;
         pass = true;
         if (!headers.ipv4.isValid()) {
             pass = false;
-            hasReturned = true;
+            hasReturned_0 = true;
         }
-        if (!hasReturned) {
-            address_0 = headers.ipv4.srcAddr;
-            pass_0 = pass;
-            c1_Check_ip.apply();
-            pass = pass_0;
-            address_0 = headers.ipv4.dstAddr;
-            pass_0 = pass;
-            c1_Check_ip.apply();
-            pass = pass_0;
+        if (!hasReturned_0) {
+            address = headers.ipv4.srcAddr;
+            pass_1 = pass;
+            c1_Check_ip_0.apply();
+            pass = pass_1;
+            address = headers.ipv4.dstAddr;
+            pass_1 = pass;
+            c1_Check_ip_0.apply();
+            pass = pass_1;
         }
     }
 }
