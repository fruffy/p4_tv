--- before_pass
+++ after_pass
@@ -58,11 +58,21 @@ struct headers {
 parser SubParser(packet_in packet, out prot_i_t inf, inout metadata meta, in bool currentISelected, in bit<8> currI) {
     bool currentISelected2_0;
     state start {
-        packet.extract<prot_i_t>(inf);
-        currentISelected2_0 = currI == meta.currPos;
-        meta.currenti.upDirection = meta.currenti.upDirection + (bit<1>)currentISelected2_0 * inf.upDirection;
-        meta.hLeft = inf.segLen;
-        meta.currPos = meta.currPos + 8w1;
+        {
+            packet.extract<prot_i_t>(inf);
+        }
+        {
+            currentISelected2_0 = currI == meta.currPos;
+        }
+        {
+            meta.currenti.upDirection = meta.currenti.upDirection + (bit<1>)currentISelected2_0 * inf.upDirection;
+        }
+        {
+            meta.hLeft = inf.segLen;
+        }
+        {
+            meta.currPos = meta.currPos + 8w1;
+        }
         transition accept;
     }
 }
@@ -73,25 +83,53 @@ parser PROTParser(packet_in packet, out
     bool currentISelected_1;
     @name("subParser") SubParser() subParser_0;
     state start {
-        packet.extract<preamble_t>(hdr.preamble);
-        packet.extract<prot_common_t>(hdr.prot_common);
-        packet.extract<prot_addr_common_t>(hdr.prot_addr_common);
-        meta.headerLen = hdr.prot_common.hdrLen;
-        packet.extract<prot_host_addr_ipv4_t>(hdr.prot_host_addr_dst.ipv4);
-        meta.addrLen = 9w32;
+        {
+            packet.extract<preamble_t>(hdr.preamble);
+        }
+        {
+            packet.extract<prot_common_t>(hdr.prot_common);
+        }
+        {
+            packet.extract<prot_addr_common_t>(hdr.prot_addr_common);
+        }
+        {
+            meta.headerLen = hdr.prot_common.hdrLen;
+        }
+        {
+            packet.extract<prot_host_addr_ipv4_t>(hdr.prot_host_addr_dst.ipv4);
+        }
+        {
+            meta.addrLen = 9w32;
+        }
         transition select(hdr.prot_common.srcType) {
             6w0x1: parse_prot_host_addr_src_ipv4;
         }
     }
     state parse_prot_host_addr_src_ipv4 {
-        packet.extract<prot_host_addr_ipv4_t>(hdr.prot_host_addr_src.ipv4);
-        meta.addrLen = meta.addrLen + 9w32;
-        paddingLen_0 = 9w64 - (meta.addrLen & 9w63) & 9w63;
-        packet.extract<prot_host_addr_padding_t>(hdr.prot_host_addr_padding, (bit<32>)paddingLen_0);
-        meta.addrLen = meta.addrLen + paddingLen_0;
-        meta.currPos = (bit<8>)(9w3 + (meta.addrLen >> 6));
-        currentISelected_0 = hdr.prot_common.curri == meta.currPos;
-        subParser_0.apply(packet, hdr.prot_inf_0, meta, currentISelected_0, hdr.prot_common.curri);
+        {
+            packet.extract<prot_host_addr_ipv4_t>(hdr.prot_host_addr_src.ipv4);
+        }
+        {
+            meta.addrLen = meta.addrLen + 9w32;
+        }
+        {
+            paddingLen_0 = 9w64 - (meta.addrLen & 9w63) & 9w63;
+        }
+        {
+            packet.extract<prot_host_addr_padding_t>(hdr.prot_host_addr_padding, (bit<32>)paddingLen_0);
+        }
+        {
+            meta.addrLen = meta.addrLen + paddingLen_0;
+        }
+        {
+            meta.currPos = (bit<8>)(9w3 + (meta.addrLen >> 6));
+        }
+        {
+            currentISelected_0 = hdr.prot_common.curri == meta.currPos;
+        }
+        {
+            subParser_0.apply(packet, hdr.prot_inf_0, meta, currentISelected_0, hdr.prot_common.curri);
+        }
         transition parse_prot_h_0_pre;
     }
     state parse_prot_h_0_pre {
@@ -101,21 +139,33 @@ parser PROTParser(packet_in packet, out
         }
     }
     state parse_prot_h_0 {
-        packet.extract<prot_h_t>(hdr.prot_h_0.next);
-        meta.hLeft = meta.hLeft + 8w255;
-        meta.currPos = meta.currPos + 8w1;
+        {
+            packet.extract<prot_h_t>(hdr.prot_h_0.next);
+        }
+        {
+            meta.hLeft = meta.hLeft + 8w255;
+        }
+        {
+            meta.currPos = meta.currPos + 8w1;
+        }
         transition parse_prot_h_0_pre;
     }
     state parse_prot_1 {
-        hdrLeft_0 = meta.headerLen - meta.currPos;
+        {
+            hdrLeft_0 = meta.headerLen - meta.currPos;
+        }
         transition select(hdrLeft_0) {
             8w0: accept;
             default: parse_prot_inf_1;
         }
     }
     state parse_prot_inf_1 {
-        currentISelected_1 = meta.currPos == hdr.prot_common.curri;
-        subParser_0.apply(packet, hdr.prot_inf_1, meta, currentISelected_1, hdr.prot_common.curri);
+        {
+            currentISelected_1 = meta.currPos == hdr.prot_common.curri;
+        }
+        {
+            subParser_0.apply(packet, hdr.prot_inf_1, meta, currentISelected_1, hdr.prot_common.curri);
+        }
         transition accept;
     }
 }
@@ -140,7 +190,9 @@ control PROTComputeChecksum(inout header
 }
 control PROTDeparser(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<headers>(hdr);
+        {
+            packet.emit<headers>(hdr);
+        }
     }
 }
 V1Switch<headers, metadata>(PROTParser(), PROTVerifyChecksum(), PROTIngress(), PROTEgress(), PROTComputeChecksum(), PROTDeparser()) main;
