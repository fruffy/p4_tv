--- before_pass
+++ after_pass
@@ -56,9 +56,10 @@ struct headers {
     prot_i_t                 prot_inf_1;
 }
 parser SubParser(packet_in packet, out prot_i_t inf, inout metadata meta, in bool currentISelected, in bit<8> currI) {
+    bool currentISelected2_0;
     state start {
         packet.extract<prot_i_t>(inf);
-        bool currentISelected2_0 = currI == meta.currPos;
+        currentISelected2_0 = currI == meta.currPos;
         meta.currenti.upDirection = meta.currenti.upDirection + (bit<1>)currentISelected2_0 * inf.upDirection;
         meta.hLeft = inf.segLen;
         meta.currPos = meta.currPos + 8w1;
@@ -66,6 +67,10 @@ parser SubParser(packet_in packet, out p
     }
 }
 parser PROTParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
+    bit<9> paddingLen_0;
+    bool currentISelected_0;
+    bit<8> hdrLeft_0;
+    bool currentISelected_1;
     @name("subParser") SubParser() subParser_0;
     state start {
         packet.extract<preamble_t>(hdr.preamble);
@@ -81,11 +86,11 @@ parser PROTParser(packet_in packet, out
     state parse_prot_host_addr_src_ipv4 {
         packet.extract<prot_host_addr_ipv4_t>(hdr.prot_host_addr_src.ipv4);
         meta.addrLen = meta.addrLen + 9w32;
-        bit<9> paddingLen_0 = 9w64 - (meta.addrLen & 9w63) & 9w63;
+        paddingLen_0 = 9w64 - (meta.addrLen & 9w63) & 9w63;
         packet.extract<prot_host_addr_padding_t>(hdr.prot_host_addr_padding, (bit<32>)paddingLen_0);
         meta.addrLen = meta.addrLen + paddingLen_0;
         meta.currPos = (bit<8>)(9w3 + (meta.addrLen >> 6));
-        bool currentISelected_0 = hdr.prot_common.curri == meta.currPos;
+        currentISelected_0 = hdr.prot_common.curri == meta.currPos;
         subParser_0.apply(packet, hdr.prot_inf_0, meta, currentISelected_0, hdr.prot_common.curri);
         transition parse_prot_h_0_pre;
     }
@@ -102,14 +107,14 @@ parser PROTParser(packet_in packet, out
         transition parse_prot_h_0_pre;
     }
     state parse_prot_1 {
-        bit<8> hdrLeft_0 = meta.headerLen - meta.currPos;
+        hdrLeft_0 = meta.headerLen - meta.currPos;
         transition select(hdrLeft_0) {
             8w0: accept;
             default: parse_prot_inf_1;
         }
     }
     state parse_prot_inf_1 {
-        bool currentISelected_1 = meta.currPos == hdr.prot_common.curri;
+        currentISelected_1 = meta.currPos == hdr.prot_common.curri;
         subParser_0.apply(packet, hdr.prot_inf_1, meta, currentISelected_1, hdr.prot_common.curri);
         transition accept;
     }
