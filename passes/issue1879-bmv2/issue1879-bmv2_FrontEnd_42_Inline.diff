--- before_pass
+++ after_pass
@@ -55,23 +55,16 @@ struct headers {
     prot_h_t[10]             prot_h_0;
     prot_i_t                 prot_inf_1;
 }
-parser SubParser(packet_in packet, out prot_i_t inf, inout metadata meta, in bool currentISelected, in bit<8> currI) {
-    bool currentISelected2_0;
-    state start {
-        packet.extract<prot_i_t>(inf);
-        currentISelected2_0 = currI == meta.currPos;
-        meta.currenti.upDirection = meta.currenti.upDirection + (bit<1>)currentISelected2_0 * inf.upDirection;
-        meta.hLeft = inf.segLen;
-        meta.currPos = meta.currPos + 8w1;
-        transition accept;
-    }
-}
 parser PROTParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     bit<9> paddingLen_0;
     bool currentISelected_0;
     bit<8> hdrLeft_0;
     bool currentISelected_1;
-    @name("subParser") SubParser() subParser_0;
+    prot_i_t inf_0;
+    metadata meta_0;
+    bool currentISelected_2;
+    bit<8> currI_0;
+    bool subParser_currentISelected2;
     state start {
         packet.extract<preamble_t>(hdr.preamble);
         packet.extract<prot_common_t>(hdr.prot_common);
@@ -91,7 +84,23 @@ parser PROTParser(packet_in packet, out
         meta.addrLen = meta.addrLen + paddingLen_0;
         meta.currPos = (bit<8>)(9w3 + (meta.addrLen >> 6));
         currentISelected_0 = hdr.prot_common.curri == meta.currPos;
-        subParser_0.apply(packet, hdr.prot_inf_0, meta, currentISelected_0, hdr.prot_common.curri);
+        inf_0.setInvalid();
+        meta_0 = meta;
+        currentISelected_2 = currentISelected_0;
+        currI_0 = hdr.prot_common.curri;
+        transition SubParser_start;
+    }
+    state SubParser_start {
+        packet.extract<prot_i_t>(inf_0);
+        subParser_currentISelected2 = currI_0 == meta_0.currPos;
+        meta_0.currenti.upDirection = meta_0.currenti.upDirection + (bit<1>)subParser_currentISelected2 * inf_0.upDirection;
+        meta_0.hLeft = inf_0.segLen;
+        meta_0.currPos = meta_0.currPos + 8w1;
+        transition parse_prot_host_addr_src_ipv4_0;
+    }
+    state parse_prot_host_addr_src_ipv4_0 {
+        hdr.prot_inf_0 = inf_0;
+        meta = meta_0;
         transition parse_prot_h_0_pre;
     }
     state parse_prot_h_0_pre {
@@ -115,7 +124,23 @@ parser PROTParser(packet_in packet, out
     }
     state parse_prot_inf_1 {
         currentISelected_1 = meta.currPos == hdr.prot_common.curri;
-        subParser_0.apply(packet, hdr.prot_inf_1, meta, currentISelected_1, hdr.prot_common.curri);
+        inf_0.setInvalid();
+        meta_0 = meta;
+        currentISelected_2 = currentISelected_1;
+        currI_0 = hdr.prot_common.curri;
+        transition SubParser_start_0;
+    }
+    state SubParser_start_0 {
+        packet.extract<prot_i_t>(inf_0);
+        subParser_currentISelected2 = currI_0 == meta_0.currPos;
+        meta_0.currenti.upDirection = meta_0.currenti.upDirection + (bit<1>)subParser_currentISelected2 * inf_0.upDirection;
+        meta_0.hLeft = inf_0.segLen;
+        meta_0.currPos = meta_0.currPos + 8w1;
+        transition parse_prot_inf;
+    }
+    state parse_prot_inf {
+        hdr.prot_inf_1 = inf_0;
+        meta = meta_0;
         transition accept;
     }
 }
