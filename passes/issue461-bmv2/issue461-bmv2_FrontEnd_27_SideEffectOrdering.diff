--- before_pass
+++ after_pass
@@ -31,15 +31,21 @@ struct headers {
     ipv4_t     ipv4;
 }
 action my_drop(inout standard_metadata_t smeta) {
-    mark_to_drop(smeta);
+    {
+        mark_to_drop(smeta);
+    }
 }
 parser ParserImpl(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     state parse_ipv4 {
-        packet.extract<ipv4_t>(hdr.ipv4);
+        {
+            packet.extract<ipv4_t>(hdr.ipv4);
+        }
         transition accept;
     }
     state start {
-        packet.extract<ethernet_t>(hdr.ethernet);
+        {
+            packet.extract<ethernet_t>(hdr.ethernet);
+        }
         transition select(hdr.ethernet.etherType) {
             16w0x800: parse_ipv4;
             default: accept;
@@ -49,18 +55,34 @@ parser ParserImpl(packet_in packet, out
 control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("ipv4_da_lpm_stats") direct_counter(CounterType.packets) ipv4_da_lpm_stats_0;
     @name("set_l2ptr") action set_l2ptr_0(bit<32> l2ptr) {
-        ipv4_da_lpm_stats_0.count();
-        meta.fwd_metadata.l2ptr = l2ptr;
+        {
+            ipv4_da_lpm_stats_0.count();
+        }
+        {
+            meta.fwd_metadata.l2ptr = l2ptr;
+        }
     }
     @name("drop_with_count") action drop_with_count_0() {
-        ipv4_da_lpm_stats_0.count();
-        mark_to_drop(standard_metadata);
+        {
+            ipv4_da_lpm_stats_0.count();
+        }
+        {
+            mark_to_drop(standard_metadata);
+        }
     }
     @name("set_bd_dmac_intf") action set_bd_dmac_intf_0(bit<24> bd, bit<48> dmac, bit<9> intf) {
-        meta.fwd_metadata.out_bd = bd;
-        hdr.ethernet.dstAddr = dmac;
-        standard_metadata.egress_spec = intf;
-        hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        {
+            meta.fwd_metadata.out_bd = bd;
+        }
+        {
+            hdr.ethernet.dstAddr = dmac;
+        }
+        {
+            standard_metadata.egress_spec = intf;
+        }
+        {
+            hdr.ipv4.ttl = hdr.ipv4.ttl + 8w255;
+        }
     }
     @name("ipv4_da_lpm") table ipv4_da_lpm_0 {
         actions = {
@@ -84,13 +106,19 @@ control ingress(inout headers hdr, inout
         default_action = my_drop(standard_metadata);
     }
     apply {
-        ipv4_da_lpm_0.apply();
-        mac_da_0.apply();
+        {
+            ipv4_da_lpm_0.apply();
+        }
+        {
+            mac_da_0.apply();
+        }
     }
 }
 control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
     @name("rewrite_mac") action rewrite_mac_0(bit<48> smac) {
-        hdr.ethernet.srcAddr = smac;
+        {
+            hdr.ethernet.srcAddr = smac;
+        }
     }
     @name("send_frame") table send_frame_0 {
         actions = {
@@ -103,23 +131,33 @@ control egress(inout headers hdr, inout
         default_action = my_drop(standard_metadata);
     }
     apply {
-        send_frame_0.apply();
+        {
+            send_frame_0.apply();
+        }
     }
 }
 control DeparserImpl(packet_out packet, in headers hdr) {
     apply {
-        packet.emit<ethernet_t>(hdr.ethernet);
-        packet.emit<ipv4_t>(hdr.ipv4);
+        {
+            packet.emit<ethernet_t>(hdr.ethernet);
+        }
+        {
+            packet.emit<ipv4_t>(hdr.ipv4);
+        }
     }
 }
 control verifyChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            verify_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 control computeChecksum(inout headers hdr, inout metadata meta) {
     apply {
-        update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        {
+            update_checksum<tuple<bit<4>, bit<4>, bit<8>, bit<16>, bit<16>, bit<3>, bit<13>, bit<8>, bit<8>, bit<32>, bit<32>>, bit<16>>(hdr.ipv4.ihl == 4w5, { hdr.ipv4.version, hdr.ipv4.ihl, hdr.ipv4.diffserv, hdr.ipv4.totalLen, hdr.ipv4.identification, hdr.ipv4.flags, hdr.ipv4.fragOffset, hdr.ipv4.ttl, hdr.ipv4.protocol, hdr.ipv4.srcAddr, hdr.ipv4.dstAddr }, hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
+        }
     }
 }
 V1Switch<headers, metadata>(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;
